<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL划题复习</title>
    <url>/post/4366.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL划题复习整理"><a href="#MySQL划题复习整理" class="headerlink" title="MySQL划题复习整理"></a>MySQL划题复习整理</h1><a id="more"></a>

<h2 id="什么是外部模式？概念模式？内部模式？它们之间有何联系？这种分级构造的优点是什么？-P46"><a href="#什么是外部模式？概念模式？内部模式？它们之间有何联系？这种分级构造的优点是什么？-P46" class="headerlink" title="什么是外部模式？概念模式？内部模式？它们之间有何联系？这种分级构造的优点是什么？(P46)"></a>什么是外部模式？概念模式？内部模式？它们之间有何联系？这种分级构造的优点是什么？(P46)</h2><ul>
<li><p>外部模式又称子模式，介于模式与应用之间，是用户与数据库之间的接口，是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述。</p>
</li>
<li><p>概念模式简称模式，是由数据库设计者综合所有用户数据，按照统一的观点构造的对数据库全局逻辑结构的描述。</p>
</li>
<li><p>内部模式也称存储模式，是对数据库中数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。</p>
</li>
<li><p>一个数据库结构从逻辑上可以划分为三个层次：外部模式（External&#8194;Schema），概念模式（Conceptual&#8194;Schema）和内部模式（Internal&#8194;Schema），称为数据库系统的三级模式结构。</p>
</li>
<li><p>数据库系统的三级模式是对数据进行三个级别的抽象。它把数据的具体组织留给DBMS去做，用户只要抽象地处理数据，而不必关心数据在机器中的具体表示方式和存储方式。数据库的三级结构是依靠映像来联系和互相转换的。正是这两层映像保证了数据库系统中的数据具有较高的数据独立性。</p>
</li>
</ul>
<h2 id="在数据库技术中，为提高数据库的逻辑独立性和物理独立性，数据库的结构被划分成用户级、-和储存级三个层次。-P48"><a href="#在数据库技术中，为提高数据库的逻辑独立性和物理独立性，数据库的结构被划分成用户级、-和储存级三个层次。-P48" class="headerlink" title="在数据库技术中，为提高数据库的逻辑独立性和物理独立性，数据库的结构被划分成用户级、( )和储存级三个层次。(P48)"></a>在数据库技术中，为提高数据库的逻辑独立性和物理独立性，数据库的结构被划分成用户级、( )和储存级三个层次。(P48)</h2><h2 id="A-管理员级-B-外部级-C-概念级-D-内部级"><a href="#A-管理员级-B-外部级-C-概念级-D-内部级" class="headerlink" title="A. 管理员级  B. 外部级  C. 概念级  D. 内部级"></a>A. 管理员级  B. 外部级  C. 概念级  D. 内部级</h2><p>答案：C</p>
<h2 id="在数据库的三级模式结构中，描述数据库中全体数据的逻辑结构和特征的是（）。"><a href="#在数据库的三级模式结构中，描述数据库中全体数据的逻辑结构和特征的是（）。" class="headerlink" title="在数据库的三级模式结构中，描述数据库中全体数据的逻辑结构和特征的是（）。"></a>在数据库的三级模式结构中，描述数据库中全体数据的逻辑结构和特征的是（）。</h2><h2 id="A-外模式-B-内模式-C-存储模式-D-模式"><a href="#A-外模式-B-内模式-C-存储模式-D-模式" class="headerlink" title="A. 外模式  B. 内模式  C. 存储模式  D. 模式"></a>A. 外模式  B. 内模式  C. 存储模式  D. 模式</h2><p>答案：D</p>
<hr>
<h2 id="广义笛卡尔积运算"><a href="#广义笛卡尔积运算" class="headerlink" title="广义笛卡尔积运算"></a>广义笛卡尔积运算</h2><p>R∪S：将关系相同的数据合并，并记录下来，并且记录下来的数据都是完全不同的。</p>
<p>R∩S：得到的是关系相同的记录。</p>
<p>R-S：在关系R中去掉和关系S中相同的记录。</p>
<p>RxS：关系R的每条记录后面都跟上关系S的全部记录。</p>
<h3 id="关系和关系模式的关系"><a href="#关系和关系模式的关系" class="headerlink" title="关系和关系模式的关系"></a>关系和关系模式的关系</h3><h3 id="关系："><a href="#关系：" class="headerlink" title="关系："></a>关系：</h3><p><code>D1 × D2 × ··· × Dn 的子集叫做在域D1，D2，···，Dn 上的关系，表示为 R(D1，D2，···，Dn )，其中R就是关系名，n就是目或度。 一个关系对应一张二维表，二维表就是关系名。</code></p>
<p>例如：</p>
<hr>
<p>​                    姓名                                            性别                                            小说名</p>
<hr>
<p>​                    唐僧                                            男                                                西游记</p>
<p>​                    宋江                                            男                                                水浒传</p>
<p>​                    林黛玉                                        女                                                红楼梦</p>
<hr>
<h3 id="关系模式："><a href="#关系模式：" class="headerlink" title="关系模式："></a>关系模式：</h3><p><code>在二维表中的行定义，即对关系的描述称为关系模式。</code></p>
<h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><p>1.关系是关系模式在某一时刻的状态或内容。 </p>
<p>2.关系模式是静态的；关系是动态的。</p>
<p>3.关系模式是二维表的表头属性等，即一个二维表的主要架构。由于二维表的属性名一般不会修改，所以呈现出静态。</p>
<p>4.关系是一张二维表的具体数据，除去表头外各数据间的联系。由于二维表中是数据会时常修改，所以呈现出动态。</p>
<hr>
<h2 id="数据库特点"><a href="#数据库特点" class="headerlink" title="数据库特点"></a>数据库特点</h2><ul>
<li><p>数据结构化</p>
</li>
<li><p>实现数据共享</p>
</li>
<li><p>数据独立性高</p>
</li>
<li><p>数据统一管理与控制</p>
</li>
<li><p>减少数据的冗余度</p>
</li>
<li><p>数据一致性和可维护性</p>
</li>
<li><p>故障恢复</p>
</li>
</ul>
<hr>
<h2 id="数据库不一致的原因"><a href="#数据库不一致的原因" class="headerlink" title="数据库不一致的原因"></a>数据库不一致的原因</h2><ul>
<li><p>由于数据冗余造成的</p>
</li>
<li><p>由于并发控制不当造成的</p>
</li>
<li><p>由于各种故障、错误造成的。</p>
</li>
</ul>
<hr>
<h2 id="关系代数运算特点"><a href="#关系代数运算特点" class="headerlink" title="关系代数运算特点"></a>关系代数运算特点</h2><p>运算对象和结果都是关系</p>
<hr>
<h2 id="SQL语言特点"><a href="#SQL语言特点" class="headerlink" title="SQL语言特点"></a>SQL语言特点</h2><ul>
<li><p>1.高度非过程化</p>
</li>
<li><p>2.功能完备并且一体化</p>
</li>
<li><p>3.统一的语法结构</p>
</li>
<li><p>4.语言简洁，易学易用（P79）</p>
</li>
<li><p>5.能为编程提供多种API(老师出题时的答案)</p>
<p>6.面向集合的操作方式</p>
<p>7.对于数据统计方便直观（网上补充）</p>
</li>
</ul>
<hr>
<h2 id="表中插入数据"><a href="#表中插入数据" class="headerlink" title="表中插入数据"></a>表中插入数据</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into table_name (column1, column2, column3, ...)</span><br><span class="line">values (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>

<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into table_name</span><br><span class="line">values (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>

<p>方法一没有指定要插入数据的名称，只提供要插入的值，即可添加一行新的数据。</p>
<p>方法二要为表中的所有列添加值，不需要在SQL查询中指定列名称。但是，请确保值的顺序与表中的列顺序相同。</p>
<hr>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop user XXX;		&#x2F;&#x2F;删除已存在的用户</span><br><span class="line">delete from user where user&#x3D;&#39;XXX&#39; and host&#x3D;&#39;localhost&#39;; &#x2F;&#x2F;删除用户</span><br><span class="line">flush privileges; &#x2F;&#x2F;刷新权限；否则下次使用create语句创建用户时会报错</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="关系规范化操作异常原因"><a href="#关系规范化操作异常原因" class="headerlink" title="关系规范化操作异常原因"></a>关系规范化操作异常原因</h2><ul>
<li><p>数据冗余大</p>
</li>
<li><p>插入异常</p>
</li>
<li><p>删除异常</p>
</li>
<li><p>更新异常</p>
</li>
</ul>
<hr>
<h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p>范式实际上表示关系模式满足的某种约束级别。当关系模式满足某级别范式要求的约束条件时，就称这个关系模式属于这个级别的范式，记作R∈xNF。</p>
<p>联系： 5NF⊂4NF⊂BCNF⊂3NF⊂2NF⊂1NF</p>
<hr>
<p>第一范式：设R是一个关系模式，如果R中的每一个属性A的属性名和属性值都是不可再分的，则称R属于第一范式，记作R∈1NF。</p>
<p>第二范式：若R∈1NF，且每一个非主属性都完全函数依赖于码，则R∈2NF。</p>
<p>第三范式：关系模式R(U,F)中若不存在这样的码X，属性组Y及非主属性组Z(Z⫋Y)，使得X→Y,Y(→/)X,Y→Z成立，则称R(U,F)∈3NF</p>
<p>BCNF：关系模式R(U,F)∈1NF，若每一个决定因素都含有码，则R∈BCNF。</p>
<p>多依赖值和4NF：</p>
<p>多依赖值：设有R(U)，X、Y是U的子集，Z=U-X-Y。多值依赖X→→Y成立，当且仅当R的任一具体关系r，给定一对(X、Y)值，就有一组Y值与之对应，且这种对应关系与Z值无关。</p>
<p>性质：</p>
<p>(1)若X→→Y，必有X→→U-X-Y。</p>
<p>(2)若X→Y，则必有X→→Y，即X→Y，是X→→Y的特例。</p>
<p>4NF：关系模式R(U)∈1NF，若对R的每个非平凡多值依赖X→→Y(Y⫋X)，X都包含码，则称R(U)满足第四范式，记为R∈4NF。</p>
<hr>
<p>关系规范化的主要目的：</p>
<p>(1)消除异常现象。</p>
<p>(2)方便用户使用，简化检索操作。关系中的每一数据项应是一个简单的数或符号串，而不是一组数或一个重复组。</p>
<p>(3)增强数据独立性，即当引入新数据项时，减少对原有数据结构的修改。</p>
<p>(4)使关系模式更加灵活，更容易使用非过程化的高级查询语言。</p>
<p>(5)更容易进行各种查询统计工作。</p>
<hr>
<h2 id="创建表启用全文搜索（子语句）"><a href="#创建表启用全文搜索（子语句）" class="headerlink" title="创建表启用全文搜索（子语句）"></a>创建表启用全文搜索（子语句）</h2><p>1.建立索引</p>
<p><strong>create [unique] [cluster] index &lt;索引名&gt; on &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;] [,&lt;列名&gt;[&lt;次序&gt;]]…)</strong></p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create unique index stu_idx_sno on 学生(学号);   &#x2F;&#x2F;为学生建立索引</span><br><span class="line">create unique index cou_idx_cno on 课程(课程号);  &#x2F;&#x2F;为课程建立索引</span><br><span class="line">create unique index sc_idx_sno_cno on 学习(学号 ASC,课程表 DESC); &#x2F;&#x2F;为学习表建立索引</span><br></pre></td></tr></table></figure>

<p>2.删除索引</p>
<p><strong>drop index &lt;索引名&gt;;</strong></p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop index stu_idx_sno;     &#x2F;&#x2F;删除学生表上的学号上建立的索引</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="撤销表格-撤销数据库中已经存在的表"><a href="#撤销表格-撤销数据库中已经存在的表" class="headerlink" title="撤销表格(撤销数据库中已经存在的表)"></a>撤销表格(撤销数据库中已经存在的表)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 表名 [where 条件];		&#x2F;&#x2F;仅删除表数据，可以回滚</span><br><span class="line">drop table table_name;			&#x2F;&#x2F;连表数据和表结构一起删除，不可回滚</span><br><span class="line">truncate table 表名;				&#x2F;&#x2F;仅删除表数据，不可回滚</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="创建自动加ID"><a href="#创建自动加ID" class="headerlink" title="创建自动加ID"></a>创建自动加ID</h2><p>执行<code>auto_increment</code>任务，默认开始值为1，每条新纪录递增1。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table test (</span><br><span class="line"></span><br><span class="line">            aid int not null auto_increment,</span><br><span class="line"></span><br><span class="line">            site_id int, cout int, date date,</span><br><span class="line"></span><br><span class="line">            primary key (aid) );</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="unique作用"><a href="#unique作用" class="headerlink" title="unique作用"></a>unique作用</h2><ul>
<li><p>unique惟一索引的作用是：保证各行在该索引上的值都不得重复</p>
<p>unique起到取值唯一的作用</p>
</li>
</ul>
<h2 id="一个关系模式能否没有关键字？为什么？"><a href="#一个关系模式能否没有关键字？为什么？" class="headerlink" title="一个关系模式能否没有关键字？为什么？"></a>一个关系模式能否没有关键字？为什么？</h2><ul>
<li>不可以没有关键字，因为关键字是元组的唯一标志，如果没有关键字则无法唯一标识一个元组。</li>
</ul>
<h2 id="什么是数据库设计？试述数据库设计的步骤。"><a href="#什么是数据库设计？试述数据库设计的步骤。" class="headerlink" title="什么是数据库设计？试述数据库设计的步骤。"></a>什么是数据库设计？试述数据库设计的步骤。</h2><p>数据库设计：</p>
<p>数据库设计是指对于一个给定的应用环境，根据用户的需求。在某一具体的数据库管理系统上，构造一个性能良好的数据模式。建立数据库及其应用系统，使之能够有效地存储数据，满足各种用户的信息需求和处理需求。</p>
<p>步骤：</p>
<ul>
<li>需求分析阶段</li>
<li>概念结构设计阶段</li>
<li>逻辑结构设计阶段</li>
<li>数据库物理设计阶段</li>
<li>数据库实施阶段</li>
<li>数据库运行和维护阶段</li>
</ul>
<hr>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h3><p>将一组数据库操作打包起来形成一个逻辑独立的工作单元。这个工作单元不可分割，其中包含的数据库操作要么全部都发生，要么全部都不发生。</p>
<p>例如：在关系数据库(关系数据库是建立在关系数据库模型基础上的数据库，借助于集合代数等概念和方法来处理数据库中的数据。)中，一个事务可以是一条SQL语句结构化查询语言简称SQL，结构化查询语言是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；sql 语句就是对数据库进行操作的一种语言。)，一组SQL语句或整个程序。</p>
<h3 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h3><ul>
<li><p>原子性</p>
</li>
<li><p>一致性</p>
</li>
<li><p>隔离性</p>
</li>
<li><p>持久性</p>
</li>
</ul>
<hr>
<h2 id="数据库系统的故障"><a href="#数据库系统的故障" class="headerlink" title="数据库系统的故障"></a>数据库系统的故障</h2><ul>
<li><p>事务内部故障            //影响事务的正常执行</p>
</li>
<li><p>系统故障                   //影响事务的正常执行</p>
</li>
<li><p>介质故障                   //影响事务的正常执行，破坏数据库的数据</p>
</li>
<li><p>计算机病毒               //破坏数据库的数据</p>
</li>
</ul>
<h2 id="例7-1（P229）"><a href="#例7-1（P229）" class="headerlink" title="例7-1（P229）"></a>例7-1（P229）</h2><p>假定需要在学生数据库(StudentDB)中创建一张学生表，要求包括学生的标识信息(id,自增)，学号(code,varchar(10),主键)，姓名(name,varchar(20)，非空)，性别(sex,varchar(2))，出生日期(birth,date)，所在学院(school,varchar(20),非空)，所在班级(class,varchar(10),非空)，户籍所在地(localtion,varchar(16),非空)，入学成绩(score,float,非空,默认值为0)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table student(id int not null auto_increment primary key,</span><br><span class="line">				code varchar(10) not null,</span><br><span class="line">				name varchar(20) not null,</span><br><span class="line">				sex varchar(2),</span><br><span class="line">				birth date,</span><br><span class="line">				school varchar(20) not null,</span><br><span class="line">				class varchar(10) not null,</span><br><span class="line">				location varchar(16) not null,</span><br><span class="line">				score float not null default 0.0,</span><br><span class="line">				unique index codeidx (code asc)</span><br><span class="line">				);</span><br></pre></td></tr></table></figure>

<p>查看索引是否被使用：</p>
<p>*<em>explain select * from 表名 where 索引名 ;*</em></p>
<p>创建空间索引：</p>
<p><strong>spatial index</strong> 索引名（属性名）;</p>
<p>在已经存在的表上创建索引：</p>
<p><strong>create [unique|fulltext| sratial ] index 索引名 on 表名 (属性名[(长度)] [asc|desc]) ;</strong></p>
<p>在已经存在的表上，用alter table 语句来创建索引：</p>
<p><strong>alter table 表名 add [unique |fulltext| spatial] index 索引名（属性名[(长度)] [asc|desc]）</strong></p>
<p>删除索引：</p>
<p><strong>drop index 索引名 on 表名</strong></p>
<p>关于E-R图，多看看P21的例题，目前不知道咋总结，注意关系之间的图形。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title>VC++复习——C++语言面向对象编程基础</title>
    <url>/post/12682.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="VC-复习"><a href="#VC-复习" class="headerlink" title="VC++复习"></a>VC++复习</h1><a id="more"></a>

<p>​    VC++是面向对象的可视化集成编程系统。</p>
<hr>
<h2 id="C-语言面向对象编程基础"><a href="#C-语言面向对象编程基础" class="headerlink" title="C++语言面向对象编程基础"></a>C++语言面向对象编程基础</h2><h3 id="1-一个简单的C-语言程序"><a href="#1-一个简单的C-语言程序" class="headerlink" title="1.一个简单的C++语言程序"></a>1.一个简单的C++语言程序</h3><p><strong>main是主函数名</strong>，函数体用一对大括号括住，函数是C++语言程序里最小的功能单位。</p>
<p>C++语言程序里**必须有且只能有一个函数main( )**，它是程序执行的入口。</p>
<p>C++语言所有语句最后都应当有一个分号。</p>
<hr>
<h3 id="2-C-语言程序基本要素"><a href="#2-C-语言程序基本要素" class="headerlink" title="2.C++语言程序基本要素"></a>2.C++语言程序基本要素</h3><p>C++语言的字符集：</p>
<p>(1)英文字母：A ~ Z,a ~ z。</p>
<p>(2)数字字符：0~9。</p>
<p>(3)特殊字符：空格、！、#、%、^、&amp;、*、_、+、=、-、~、&lt;、&gt;、/、\、‘、”、；、.、，、()、[]、{}。</p>
<p>关键字全部由小写字母组成。</p>
<hr>
<p>标识符是软件开发者自己声明的单词，用于命名一些实体，如函数名、变量名、类名、对象名等。构成规则：</p>
<p>(1)以大写字母、小写字母或下画线开头。</p>
<p>(2)可由大写字母、小写字母、下画线或数字组成。</p>
<p>(3)字母区分大小写，大写字母和小写字母表示不同的标识符。</p>
<p>(4)不能用C++语言的关键字。</p>
<p>尽量<strong>不用下画线开头，</strong>避免与系统定义的关键字冲突。</p>
<hr>
<p>分隔符不进行实际操作，只是用于构造程序。</p>
<p>数据类型指明<strong>变量或表达式的状态和行为，</strong>决定了<strong>数的取值范围和允许执行的运算符集。</strong>可分为<strong>基本类型</strong>和<strong>引用类型</strong>两大类。</p>
<p>基本类型是指<strong>不能再分解</strong>的数据类型，其数据在函数的调用中是以<strong>传值方式</strong>工作的。</p>
<p>unsigned (int)    无符号整型</p>
<p>(signed) int    有符号整型</p>
<hr>
<p>换行符 \n    回车符 \r    水平制表符(Tab键) \t</p>
<hr>
<p>变量：先定义，后使用</p>
<p>使用变量之前必须先声明它的类型和名称</p>
<p>例如：int和float的声明变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int num;</span><br><span class="line">float a;</span><br></pre></td></tr></table></figure>

<p>常量：const  &lt;数值类型&gt; &lt;常量名&gt;</p>
<p><code>const float pi=3.1415926</code></p>
<hr>
<p><strong>基本运算符</strong>：+、-、*、/、%。(-作为负号时为一元运算符，作为减号时为二元运算符)</p>
<p>前置后置：i++是后置；–i是前置。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i&#x3D;5,j&#x3D;5,m,n;</span><br><span class="line">m&#x3D;i++;	&#x2F;&#x2F;后置++；相当于m&#x3D;1；i&#x3D;i+1；结果：i&#x3D;6；m&#x3D;5</span><br><span class="line">n&#x3D;++j;	&#x2F;&#x2F;前置++；相当于j&#x3D;j+1；n&#x3D;j；结果：j&#x3D;6，n&#x3D;6</span><br></pre></td></tr></table></figure>

<p><strong>赋值运算符</strong>：=、+=、-=、*=、/=、%=、&lt;&lt;=、&gt;&gt;=、&amp;=、^=、|=。    结合性从右向左。例如：</p>
<p><code>a=3+(c=4)</code>        这个表达式的值为7，a=7，c=4。</p>
<p><strong>逗号运算符</strong>：(例如)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;b&#x3D;(a&#x3D;3,4*3);		&#x2F;&#x2F;结果为：a&#x3D;3，b&#x3D;12，c&#x3D;12，表达式值为12</span><br><span class="line">c&#x3D;b&#x3D;a&#x3D;3,4*3;		&#x2F;&#x2F;结果为：a&#x3D;3，b&#x3D;3，c&#x3D;3，表达式值为12</span><br><span class="line">c&#x3D;(b&#x3D;a&#x3D;3,4*3);		&#x2F;&#x2F;结果为：a&#x3D;3，b&#x3D;3，c&#x3D;12，表达式值为12</span><br></pre></td></tr></table></figure>

<p><strong>关系运算符</strong>：&lt;、&lt;=、&gt;、&gt;=、==、!=。前四个优先级相同，后两个优先级相同。前四个优先级比后两个优先级高。</p>
<p><strong>逻辑运算符</strong>：!(非)、&amp;&amp;(与)、||(或)。优先级依此降低。(&amp;与|同时运算)</p>
<p><strong>条件运算符</strong>：C++语言唯一的**<em>三元运算符**</em>。例如：</p>
<p><code>(a&lt;b)?a:b</code>    a:b表示如果a&lt;b，那么结果为a；如果a&gt;b，那么结果为b。</p>
<p><strong>sizeof运算符</strong>：计算某个对象在内存中占用的字节数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sizeof(int);				&#x2F;&#x2F;值为4</span><br><span class="line">double x; sizeof(x);		&#x2F;&#x2F;值为8</span><br></pre></td></tr></table></figure>

<hr>
<p>表达式中的类型转换分为：<strong>隐含转换</strong>和<strong>强制转换</strong>。</p>
<p>隐含转换是安全的，因为没有精度损失。</p>
<p>隐含转换原则：将低类型数据转换为高类型数据。</p>
<p>从低到高的顺序：char、short、int、unsigned int、long、unsigned long、float、double。类型越高，范围越大，精度也越高。</p>
<p>赋值运算要求赋值运算符左边的值和右边的值类型相同，不同的话，会进行自动转换，将一律将右边的值类型转换为左边的值类型。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i; float f; double d;</span><br><span class="line">d&#x3D;i*f;		&#x2F;&#x2F;计算时现将i转换为f一样的浮点型的值，乘法结果再转换为双精度浮点型的值。</span><br></pre></td></tr></table></figure>

<h2 id="3-类与对象"><a href="#3-类与对象" class="headerlink" title="3.类与对象"></a>3.类与对象</h2><p>面向对象程序设计理论角度：类是对某一类对象的抽象，而对象是对类的具体实例。</p>
<p>程序设计的角度：类是一种复杂的自定义数据类型，对象是属于这种类型的变量。</p>
<hr>
<p><strong>抽象</strong>：对象进行概括，抽出一类对象的共性并加以描述的过程。  有两方面：<strong>数据抽象</strong>和<strong>行为抽象</strong>。</p>
<p><strong>数据抽象</strong>：属性和状态。        <strong>行为抽象</strong>：共同行为或共同功能。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">时钟(clock)</span><br><span class="line">数据抽象:</span><br><span class="line">int Hour; int Minute; int Second;</span><br><span class="line">行为抽象:</span><br><span class="line">ShowTime(); SetTime();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>VC++</category>
      </categories>
      <tags>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title>gitee仓库</title>
    <url>/post/4e62faf5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于gitee仓库的建立"><a href="#关于gitee仓库的建立" class="headerlink" title="关于gitee仓库的建立"></a>关于gitee仓库的建立</h2><a id="more"></a>

<p>注册好gitee账号登录后</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821141508.png"></p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821141825.png"></p>
<p>然后点击创建</p>
]]></content>
      <categories>
        <category>gitee</category>
      </categories>
      <tags>
        <tag>Hexo+Gitee+Node.js搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Git安装</title>
    <url>/post/2dbf7e22.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git简易安装流程"><a href="#Git简易安装流程" class="headerlink" title="Git简易安装流程"></a>Git简易安装流程</h2><a id="more"></a>

<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821131900.png"></p>
<p>下载完成之后，傻瓜式安装，因为我已经安装好了，所以这部分没有配安装过程图片。大致分为如下步骤：</p>
<p>1.Next 安装</p>
<p>2.选择安装目录，并点击Next(如果觉得影响电脑运行速度，可以不安装在C盘)</p>
<p>3.选择组件 </p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821132738.png"></p>
<p>(Addtional icons是桌面图标，视个人喜好情况选择)</p>
<p>4.开始菜单的目录名设置 (如果对这些没什么要求的话，直接点Next就行)</p>
<p>5.选择命令行的环境</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821133025.png"></p>
<p>(一般选这个，这个是Git自带命令行工具，第二个是Windows命令行工具，第三个是两者都有)</p>
<p>6.以下几步直接默认即可</p>
<p>7.检查是否安装成功 鼠标右击，出现Git GUI Here和Git Bash Here则安装成功</p>
<h2 id="Git的初始化"><a href="#Git的初始化" class="headerlink" title="Git的初始化"></a>Git的初始化</h2><p>首先通过下面命令查看git版本</p>
<p> #git –version</p>
<p>​    在开始使用Git之前，我们首先要用git config命令设置一下git的配置变量，主要有以下几步：</p>
<p>   （1）配置姓名，这个将在提交的时候用到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#git config --global user.name “pang”</span><br><span class="line">#git config --global user.email pang@126.com</span><br></pre></td></tr></table></figure>

<p>然后检查以下是否配置成功</p>
<p>​    （2）设置一些别名，以便使用更为简洁的子命令</p>
<p> #git config –global alias.ci commit</p>
<p>​    （3）开启颜色显示</p>
<p> #git config –global color.ui true</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git安装</tag>
      </tags>
  </entry>
  <entry>
    <title>修改电脑的DNS</title>
    <url>/post/c2fc7544.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于电脑DNS的修改"><a href="#关于电脑DNS的修改" class="headerlink" title="关于电脑DNS的修改"></a>关于电脑DNS的修改</h1><a id="more"></a>

<p>  之前在搭建博客的时候，发现了电脑没有办法打开GitHub之类的网站，以及没有办法打开Next的使用文档</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822090320.png"></p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822090628.png"></p>
<p>  所以我只能转战gitee，但是我发现每次部署完之后，打开发现没有css和js</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822090912.png"></p>
<p>于是，我去问了一些人，终于找到了一个这样的方法——修改电脑的DNS</p>
<hr>
<h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><h3 id="1-打开控制面板"><a href="#1-打开控制面板" class="headerlink" title="1.打开控制面板"></a>1.打开控制面板</h3><p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822091212.png"></p>
<h3 id="2-打开网络和共享中心"><a href="#2-打开网络和共享中心" class="headerlink" title="2.打开网络和共享中心"></a>2.打开网络和共享中心</h3><p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822091358.png" alt="image-20200822091357982"></p>
<h3 id="3-打开更改适配器设置"><a href="#3-打开更改适配器设置" class="headerlink" title="3.打开更改适配器设置"></a>3.打开更改适配器设置</h3><p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822091430.png"></p>
<h3 id="4-打开WLAN属性"><a href="#4-打开WLAN属性" class="headerlink" title="4.打开WLAN属性"></a>4.打开WLAN属性</h3><p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822091528.png"></p>
<h3 id="5-双击IPv4-取消勾选IPv6"><a href="#5-双击IPv4-取消勾选IPv6" class="headerlink" title="5.双击IPv4 取消勾选IPv6"></a>5.双击IPv4 取消勾选IPv6</h3><p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822091703.png"></p>
<h3 id="6-使用下面的DNS服务器地址"><a href="#6-使用下面的DNS服务器地址" class="headerlink" title="6.使用下面的DNS服务器地址"></a>6.使用下面的DNS服务器地址</h3><p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822091823.png" alt="image-20200822091823427"></p>
<p>首选DNS服务器： <code>114.114.114.114</code></p>
<p>备用DNS服务器：<code>8.8.8.8</code></p>
<p>这个地址是我从网上看到的</p>
<hr>
<p>  然后，我们就可以发现NexT文档和GitHub的网址都能使用了。</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822092041.png"></p>
]]></content>
      <categories>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>修改DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>快速下载网盘神器</title>
    <url>/post/62944.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="亿寻"><a href="#亿寻" class="headerlink" title="亿寻"></a>亿寻</h1><a id="more"></a>

<p>平时需要在网盘下载东西时，发现下载的东西很慢有木有，有时候一个连接不稳定还得重新下载，属实让人难受。</p>
<p>所以，这里推一款软件——亿寻。附上网盘地址：</p>
<p>链接：<a href="https://pan.baidu.com/s/19wDLbDDiEnnOPgkI821c1g">https://pan.baidu.com/s/19wDLbDDiEnnOPgkI821c1g</a><br>提取码：3q6h</p>
<p>下载后，解压发现电脑提示有病毒的话，关掉安全管家就行了，如果安全管家太强大，比如我的安全管家就会把亿寻的exe程序删除，以至于我只有文件，没有启动程序，那么，就保留压缩的文件，到需要的时候，就仅仅解压exe文件即可</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200823212322.png"></p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200823212749.png" alt="image-20200823212748976"></p>
]]></content>
      <tags>
        <tag>网盘神器 --网盘文件助手</tag>
      </tags>
  </entry>
  <entry>
    <title>军队武器</title>
    <url>/post/89814dd7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="军队武器"><a href="#军队武器" class="headerlink" title="军队武器"></a>军队武器</h1><a id="more"></a>

<h2 id="Weapon类（父类）"><a href="#Weapon类（父类）" class="headerlink" title="Weapon类（父类）"></a>Weapon类（父类）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">&#x2F;&#x2F;所有武器的父类</span><br><span class="line">public class Weapon &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Shootable类（接口）"><a href="#Shootable类（接口）" class="headerlink" title="Shootable类（接口）"></a>Shootable类（接口）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">public interface Shootable &#123;</span><br><span class="line">    &#x2F;&#x2F;射击行为</span><br><span class="line">    void shoot();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Moveable类（接口）"><a href="#Moveable类（接口）" class="headerlink" title="Moveable类（接口）"></a>Moveable类（接口）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">public interface Moveable &#123;</span><br><span class="line">    &#x2F;&#x2F;移动方法</span><br><span class="line">    void move();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Tank类"><a href="#Tank类" class="headerlink" title="Tank类"></a>Tank类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">&#x2F;&#x2F;坦克是一种武器，可移动，可攻击</span><br><span class="line">public class Tank extends Weapon implements Moveable,Shootable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void move() &#123;</span><br><span class="line">        System.out.println(&quot;坦克移动&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void shoot() &#123;</span><br><span class="line">        System.out.println(&quot;坦克开炮&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Fighter类"><a href="#Fighter类" class="headerlink" title="Fighter类"></a>Fighter类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">&#x2F;&#x2F;战斗机是一种武器，可移动，可射击</span><br><span class="line">public class Fighter extends Weapon implements Moveable,Shootable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void move() &#123;</span><br><span class="line">        System.out.println(&quot;战斗机起飞&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void shoot() &#123;</span><br><span class="line">        System.out.println(&quot;战斗机开跑！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GaoShePao类"><a href="#GaoShePao类" class="headerlink" title="GaoShePao类"></a>GaoShePao类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">&#x2F;&#x2F;高射炮是一种武器，可射击，不可移动</span><br><span class="line">public class GaoShePao extends Weapon implements Shootable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void shoot() &#123;</span><br><span class="line">        System.out.println(&quot;高射炮开炮！！！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WuZiFeiJi类"><a href="#WuZiFeiJi类" class="headerlink" title="WuZiFeiJi类"></a>WuZiFeiJi类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">&#x2F;&#x2F;物资飞机</span><br><span class="line">public class WuZiFeiJi extends Weapon implements Moveable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void move() &#123;</span><br><span class="line">        System.out.println(&quot;运输机起飞！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Army类"><a href="#Army类" class="headerlink" title="Army类"></a>Army类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">public class Army &#123;</span><br><span class="line">    &#x2F;&#x2F;武器数组</span><br><span class="line">    private Weapon[] weapons;</span><br><span class="line">    &#x2F;&#x2F;创建军队的构造方法</span><br><span class="line">    public Army(int count)&#123;</span><br><span class="line">        &#x2F;&#x2F;动态初始化数组中每一个元素默认值是null</span><br><span class="line">        &#x2F;&#x2F;武器组组没有放武器</span><br><span class="line">        weapons &#x3D; new Weapon[count];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;将武器加入数组</span><br><span class="line">    public void addWeapon(Weapon weapon) throws AddWeaponException&#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; weapons.length; i++) &#123;</span><br><span class="line">            if(null &#x3D;&#x3D; weapons[i])&#123;</span><br><span class="line">                weapons[i] &#x3D; weapon;</span><br><span class="line">                System.out.println(weapon+&quot;:武器添加成功！&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;&#x2F;&#x2F;程序如果执行到这，说明武器没有添加成功</span><br><span class="line">        throw new AddWeaponException(&quot;武器数量已经达到上限！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;所有可攻击的武器</span><br><span class="line">    public void attackAll()&#123;</span><br><span class="line">        &#x2F;&#x2F;遍历数组</span><br><span class="line">        for (int i &#x3D; 0; i &lt; weapons.length; i++) &#123;</span><br><span class="line">            if(weapons[i] instanceof Shootable)&#123;</span><br><span class="line">                &#x2F;&#x2F;调用子类中特有的方法，向下转型</span><br><span class="line">                Shootable shootable &#x3D; (Shootable)weapons[i];</span><br><span class="line">                shootable.shoot();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;所有课移动的武器</span><br><span class="line">    public void moveAll()&#123;</span><br><span class="line">        &#x2F;&#x2F;遍历数组</span><br><span class="line">        for (int i &#x3D; 0; i &lt; weapons.length; i++) &#123;</span><br><span class="line">            if(weapons[i] instanceof Moveable)&#123;</span><br><span class="line">                &#x2F;&#x2F;调用子类中特有的方法，向下转型</span><br><span class="line">                Moveable moveable &#x3D; (Moveable)weapons[i];</span><br><span class="line">                moveable.move();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AddWeaponException类（异常类）"><a href="#AddWeaponException类（异常类）" class="headerlink" title="AddWeaponException类（异常类）"></a>AddWeaponException类（异常类）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">&#x2F;&#x2F;添加武器异常</span><br><span class="line">public class AddWeaponException extends Exception&#123;</span><br><span class="line">    public AddWeaponException()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public AddWeaponException(String s)&#123;</span><br><span class="line">        super(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Test类"><a href="#Test类" class="headerlink" title="Test类"></a>Test类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package MyProject;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;构建一个军队</span><br><span class="line">        Army army &#x3D; new Army(4);&#x2F;&#x2F;军队只有四个武器</span><br><span class="line">        &#x2F;&#x2F;创建武器</span><br><span class="line">        Fighter fighter &#x3D; new Fighter();</span><br><span class="line">        Fighter fighter2 &#x3D; new Fighter();</span><br><span class="line">        GaoShePao gaoShePao &#x3D; new GaoShePao();</span><br><span class="line">        Tank tank &#x3D; new Tank();</span><br><span class="line">        WuZiFeiJi wuZiFeiJi &#x3D; new WuZiFeiJi();</span><br><span class="line">        &#x2F;&#x2F;添加武器</span><br><span class="line">        try &#123;</span><br><span class="line">            army.addWeapon(fighter);</span><br><span class="line">            army.addWeapon(gaoShePao);</span><br><span class="line">            army.addWeapon(tank);</span><br><span class="line">            army.addWeapon(wuZiFeiJi);</span><br><span class="line">            army.addWeapon(fighter2);</span><br><span class="line">        &#125; catch (AddWeaponException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">&#x2F;*          MyProject.Fighter@27973e9b:武器添加成功！</span><br><span class="line">            MyProject.GaoShePao@312b1dae:武器添加成功！</span><br><span class="line">            MyProject.Tank@7530d0a:武器添加成功！</span><br><span class="line">            MyProject.WuZiFeiJi@27bc2616:武器添加成功！</span><br><span class="line">            武器数量已经达到上限！*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;所有可移动的移动</span><br><span class="line">        army.moveAll();&#x2F;&#x2F;战斗机起飞 坦克移动 运输机起飞！</span><br><span class="line">        &#x2F;&#x2F;所有可攻击的攻击</span><br><span class="line">        army.attackAll();&#x2F;&#x2F;战斗机开跑 高射炮开炮！！！ 坦克开炮</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传案例</title>
    <url>/post/98207517.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件上传案例"><a href="#文件上传案例" class="headerlink" title="文件上传案例"></a>文件上传案例</h1><a id="more"></a>

<h2 id="TCPClient"><a href="#TCPClient" class="headerlink" title="TCPClient"></a>TCPClient</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.FileUpload;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">&#x2F;*文件上传案例的客户端：读取本地文件，上传服务器，读取服务器回写数据</span><br><span class="line">    明确：数据源 目的地：服务器</span><br><span class="line">    实现步骤：</span><br><span class="line">        1.创建一个本地字节输入流FileInputStream对象，构造方法中绑定要读取数据源</span><br><span class="line">        2.创建一个客户端Socket对象，构造方法绑定服务器的IP地址和端口号</span><br><span class="line">        3.使用Socket中的方法getOutputStream，获取网络字节输出流OutputStream对象</span><br><span class="line">        4.使用本地字节输入流FileInputStream对象中的方法read，读取本地文件</span><br><span class="line">        5.使用网络字节输出流OutputStream对象中的方法write，把读取到的文件上传到服务器</span><br><span class="line">        6.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象</span><br><span class="line">        7.使用网络字节输入流InputStream对象中的方法read读取服务回写的数据</span><br><span class="line">        8.释放资源(FileInputStream,Socket)*&#x2F;</span><br><span class="line">public class TCPClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建一个本地字节输入流FileInputStream对象，构造方法中绑定要读取数据源</span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(&quot;g:\\1.jpg&quot;);</span><br><span class="line">        &#x2F;&#x2F;2.创建一个客户端Socket对象，构造方法绑定服务器的IP地址和端口号</span><br><span class="line">        Socket socket &#x3D; new Socket(&quot;127.0.0.1&quot;,8888);</span><br><span class="line">        &#x2F;&#x2F;3.使用Socket中的方法getOutputStream，获取网络字节输出流OutputStream对象</span><br><span class="line">        OutputStream os &#x3D; socket.getOutputStream();</span><br><span class="line">        &#x2F;&#x2F;4.使用本地字节输入流FileInputStream对象中的方法read，读取本地文件</span><br><span class="line">        int len &#x3D; 0;</span><br><span class="line">        byte[] bytes &#x3D; new byte[1024];</span><br><span class="line">        while ((len &#x3D; fis.read(bytes)) !&#x3D; -1)&#123;</span><br><span class="line">            &#x2F;&#x2F;5.使用网络字节输出流OutputStream对象中的方法write，把读取到的文件上传到服务器</span><br><span class="line">            os.write(bytes,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        &#x2F;&#x2F;6.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象</span><br><span class="line">        InputStream is &#x3D; socket.getInputStream();</span><br><span class="line">        while ((len &#x3D; is.read(bytes)) !&#x3D; -1)&#123;</span><br><span class="line">            &#x2F;&#x2F;7.使用网络字节输入流InputStream对象中的方法read读取服务回写的数据</span><br><span class="line">            System.out.println(new String(bytes,0,len));</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;8.释放资源(FileInputStream,Socket)*&#x2F;</span><br><span class="line">        fis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TCPServer"><a href="#TCPServer" class="headerlink" title="TCPServer"></a>TCPServer</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.FileUpload;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">&#x2F;*文件上传案例服务器端：读取客户端上传的文件，保存到服务器的硬盘，给客户端回写“上传成功”</span><br><span class="line">      明确：数据源 目的地</span><br><span class="line">      实现步骤：</span><br><span class="line">        1.创建一个服务器ServerSocket对象，和系统要指定的端口号</span><br><span class="line">        2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象</span><br><span class="line">        3.使用Socket对象中的方法getInputStream，获取网络字节输入流InputStream对象</span><br><span class="line">        4.判断文件夹g:\\upload是否存在，不存在则创建</span><br><span class="line">        5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地</span><br><span class="line">        6.使用网络字节输入流InputSteam对象中的方法read，读取客户端上传的文件</span><br><span class="line">        7.使用本地字节输入流FileOutputSteam对象中的方法write，把读取到的文件保存到服务器的硬盘上</span><br><span class="line">        8.使用Socket对象中的方法getOutputStream，获取网络字节输入流OutputStream对象</span><br><span class="line">        9.使用网络字节输出流OutputStream对象中方法write，给客户端回写“上传成功”</span><br><span class="line">        10.释放资源（FileOutputStream,Socket,ServerSocket）*&#x2F;</span><br><span class="line">public class TCPServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建一个服务器ServerSocket对象，和系统要指定的端口号</span><br><span class="line">        ServerSocket serve &#x3D; new ServerSocket(8888);</span><br><span class="line">        &#x2F;&#x2F;2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象</span><br><span class="line">        &#x2F;&#x2F;让服务器一直处于监听状态（死循环accept方法）</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Socket socket &#x3D; serve.accept();</span><br><span class="line">            &#x2F;&#x2F;使用多线程技术，来提高程序效率</span><br><span class="line">            &#x2F;&#x2F;有一个客户端上传文件，就开启一个线程，完成上传文件</span><br><span class="line">            new Thread(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        &#x2F;&#x2F;3.使用Socket对象中的方法getInputStream，获取网络字节输入流InputStream对象</span><br><span class="line">                        InputStream is &#x3D; socket.getInputStream();</span><br><span class="line">                        &#x2F;&#x2F;4.判断文件夹g:\\upload是否存在，不存在则创建</span><br><span class="line">                        File file &#x3D; new File(&quot;g:\\upload&quot;);</span><br><span class="line">                        if (!file.exists()) &#123;</span><br><span class="line">                            file.mkdirs();</span><br><span class="line">                        &#125;</span><br><span class="line">                        &#x2F;&#x2F;自定义一个文件的命名规则：防止同名文件被覆盖</span><br><span class="line">                        &#x2F;&#x2F;规则：域名+毫秒数+随机数</span><br><span class="line">                        String fileName &#x3D; &quot;itcast&quot; + System.currentTimeMillis() + new Random().nextInt(99999) + &quot;.jpg&quot;;</span><br><span class="line">                        &#x2F;&#x2F;5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地</span><br><span class="line">                        &#x2F;&#x2F;FileOutputStream fos &#x3D; new FileOutputStream(file + &quot;\\1.jpg&quot;);</span><br><span class="line">                        FileOutputStream fos &#x3D; new FileOutputStream(file + &quot;\\&quot; + fileName);</span><br><span class="line">                        &#x2F;&#x2F;6.使用网络字节输入流InputSteam对象中的方法read，读取客户端上传的文件</span><br><span class="line">                        int len &#x3D; 0;</span><br><span class="line">                        byte[] bytes &#x3D; new byte[1024];</span><br><span class="line">                        while ((len &#x3D; is.read(bytes)) !&#x3D; -1) &#123;</span><br><span class="line">                            &#x2F;&#x2F;7.使用本地字节输入流FileOutputSteam对象中的方法write，把读取到的文件保存到服务器的硬盘上</span><br><span class="line">                            fos.write(bytes, 0, len);</span><br><span class="line">                        &#125;</span><br><span class="line">        &#x2F;*8.使用Socket对象中的方法getOutputStream，获取网络字节输入流OutputStream对象</span><br><span class="line">        9.使用网络字节输出流OutputStream对象中方法write，给客户端回写“上传成功”*&#x2F;</span><br><span class="line">                        socket.getOutputStream().write(&quot;上传成功&quot;.getBytes());</span><br><span class="line">                        &#x2F;&#x2F;10.释放资源（FileOutputStream,Socket,ServerSocket）</span><br><span class="line">                        fos.close();</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125;catch (IOException e)&#123;</span><br><span class="line">                        System.out.println(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125;&#x2F;&#x2F;服务器不用关闭</span><br><span class="line">        &#x2F;&#x2F;serve.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客——GitHub篇</title>
    <url>/post/fb98ceba.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo-GIT-Node-js搭建博客"><a href="#Hexo-GIT-Node-js搭建博客" class="headerlink" title="Hexo+ GIT+Node.js搭建博客"></a><a href="http://zsquw5.coding-pages.com/2020/08/20/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94Gitee%E7%AF%87/">Hexo+ GIT+Node.js搭建博客</a></h1><a id="more"></a>

<p>软件准备工作和之前的  搭建hexo博客——Gitee篇  一样，点击标题即可转接。</p>
<h2 id="正文开始-以下命令都是在git中执行"><a href="#正文开始-以下命令都是在git中执行" class="headerlink" title="正文开始(以下命令都是在git中执行)"></a>正文开始(以下命令都是在git中执行)</h2><p>在本地建立一个文件夹，这个文件夹就是搭建hexo博客的开始。我的文件夹名字叫(博客)，便于理解。</p>
<p>在博客内打开Git，就是Git Bash Here，输入：</p>
<p><code>hexo init</code></p>
<p>然后开始一段时间的等待……</p>
<p>加载完成之后，你可以输入</p>
<p><code>hexo s</code>        查看当前网站(注意：这是在本地4000端口查看的，不是网上能查出来的，是需要部署之后才能查看)</p>
<hr>
<p>之前说的不能查看GitHub相关的网站，我也在修改DNS中有提到过解决方法。</p>
<p><a href="https://solitudehero.github.io/2020/08/22/%E4%BF%AE%E6%94%B9%E7%94%B5%E8%84%91%E7%9A%84DNS/#more">DNS修改</a></p>
<p>ok，废话不多说，上干货。</p>
<hr>
<p>同样的，需要首先去<a href="https://github.com/">GitHub官网</a>那去创建一个仓库</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822195521.png"></p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822195721.png"></p>
<p>一般情况下，完成后，会返回你一个仓库地址值，如果没有返回也不要着急，在这也可以找到</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822195915.png" alt="image-20200822195914713"></p>
<p>在 Blog 目录下安装一个 hexo 部署插件 </p>
<p><code>cnpm install --save hexo-deployer-git</code></p>
<p>找到 Blog 文件中的 _config.yml 文件，使用工具打开，如果不是很熟练，建议使用Visual Studio Code 打开，当然，如果觉得麻烦，也可以笔记本打开，但是容易出现错误。</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821142432.png"></p>
<p>找到这行代码repo后输入接上刚刚让你复制的仓库地址。</p>
<p>然后进行保存。</p>
<p>在博客目录下打开的git里面输入<code>hexo d</code></p>
<p>然后，你就可以直接打开自己的网址了，不需要再去Github上面部署了。</p>
<p>等等……什么？你不知道网址？</p>
<p>在这里</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822200115.png" alt="image-20200822200115078"></p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822200156.png" alt="image-20200822200156187"></p>
<p>如果你第一次勾选了那个README(就是创建仓库的时候)，你们会自动生成，如果没有勾选，按照我的这个设置之后，按save即可获取</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200822200231.png" alt="image-20200822200231115"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Hexo+Github+Node.js搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客——Gitee篇</title>
    <url>/post/c04ba748.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo-Git-Node-js搭建博客"><a href="#Hexo-Git-Node-js搭建博客" class="headerlink" title="Hexo+Git+Node.js搭建博客"></a>Hexo+Git+Node.js搭建博客</h1><a id="more"></a>

<p>  经过了三天过程中的十几次搭建，最终对一些优化放弃了继续的挣扎，next的版本高，一些东西不会操作，导致重新开始，也算是小有心得，写下来当做第一篇博客！</p>
<h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><p>(1) Git下载：</p>
<p><a href="https://git-scm.com/">官网</a></p>
<p><a href="npm.taobao.org/mirrors/git-for-windows">国内</a></p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821125321.png"></p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821125940.png"></p>
<p><a href="https://solitudehero.github.io/2020/08/21/git%E5%AE%89%E8%A3%85/#more">Git安装</a></p>
<p><a href="https://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html">Git配置</a>(我是看网上的)</p>
<p>(2)<a href="https://nodejs.org/en/">Node.js安装</a></p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821135324.png"></p>
<p>傻瓜式安装即可！</p>
<p>(3)安装Hexo</p>
<p>打开Git Bash Here</p>
<hr>
<p>检测node是否安装成功</p>
<p>node -v    (返回版本号)</p>
<p>npm -v     (返回版本号)</p>
<hr>
<p>安装淘宝镜像源</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p>检测</p>
<p>cnpm         (返回 cnpm 的信息)</p>
<p>cnpm -v     (返回 cnpm 的版本信息)</p>
<hr>
<p>安装hexo</p>
<p><code>cnpm install -g hexo-cli</code></p>
<p>hexo -v    (返回hexo的版本信息)</p>
<h2 id="正文开始-以下命令都是在git中执行"><a href="#正文开始-以下命令都是在git中执行" class="headerlink" title="正文开始(以下命令都是在git中执行)"></a>正文开始(以下命令都是在git中执行)</h2><p>在本地建立一个文件夹，这个文件夹就是搭建hexo博客的开始。我的文件夹名字叫(博客)，便于理解。</p>
<p>在博客内打开Git，就是Git Bash Here，输入：</p>
<p><code>hexo init</code></p>
<p>然后开始一段时间的等待……</p>
<p>加载完成之后，你可以输入</p>
<p><code>hexo s</code>        查看当前网站(注意：这是在本地4000端口查看的，不是网上能查出来的，是需要部署之后才能查看)</p>
<hr>
<p>因为我的电脑不知道什么情况不能查看GitHub相关的网站，所以我用的是Gitee部署的，Gitee是国内版的GitHub，速度相对于GitHub比较快，但是部署时会较GitHub麻烦一点，需要去码云那里更新一次，不然显示不出来更新效果。</p>
<hr>
<p>到gitee那里注册一个账号，然后创建一个仓库即可。不会的可以查看链接。</p>
<p><a href="https://solitudehero.github.io/2020/08/21/gitee%E4%BB%93%E5%BA%93/#more">gitee仓库</a></p>
<p>复制一下仓库URL(就是仓库地址的网址)</p>
<hr>
<p>在 Blog 目录下安装一个 hexo 部署插件 </p>
<p><code>cnpm install --save hexo-deployer-git</code></p>
<p>找到 Blog 文件中的 _config.yml 文件，使用工具打开，如果不是很熟练，建议使用Visual Studio Code 打开，当然，如果觉得麻烦，也可以笔记本打开，但是容易出现错误。</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821142432.png"></p>
<p>找到这行代码repo后输入接上刚刚让你复制的仓库地址。</p>
<p>然后进行保存。</p>
<p>在博客目录下打开的git里面输入<code>hexo d</code></p>
<p>然后再在码云仓库里</p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821142717.png"></p>
<p><img src="https://gitee.com/studynil/boke/raw/master/ing/20200821142755.png"></p>
<p>然后那个网站地址就是你部署的，别人也可以通过搜那个网站进入你的博客了。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Hexo+Gitee+Node.js搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>英语六级笔记整理</title>
    <url>/post/undefined.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="英语六级笔记整理"><a href="#英语六级笔记整理" class="headerlink" title="英语六级笔记整理"></a>英语六级笔记整理</h3><p>bilibili看后总结   <a href="https://www.bilibili.com/video/BV1Ca4y177Zm/?spm_id_from=333.788.videocard.0">这里是原视频地址</a>（四级的也可以看这个视频）</p>
<h2 id="时间规划以及顺序方面"><a href="#时间规划以及顺序方面" class="headerlink" title="时间规划以及顺序方面"></a>时间规划以及顺序方面</h2><p>1.写作 （30分钟，建议&lt;25分钟）</p>
<p>2.听力   （30分钟）</p>
<p>3.仔细阅读</p>
<p>4.长篇阅读</p>
<p>5.翻译  （30分钟，建议&lt;25分钟）</p>
<p>6.选词填空</p>
<h2 id="内容方面"><a href="#内容方面" class="headerlink" title="内容方面"></a>内容方面</h2><h3 id="1-写作"><a href="#1-写作" class="headerlink" title="1.写作"></a>1.写作</h3><p>分类：论说文，谚语警句，图画图表，书信。</p>
<p>1.常见土单词排行榜：</p>
<ol>
<li>think:</li>
</ol>
<p>a.have been convinced that</p>
<p>b.be of the opinion that</p>
<p>c.cling to the perspective that</p>
<ol start="2">
<li>many:</li>
</ol>
<p>a.a sea of</p>
<p>b.multitudes of</p>
<p>c.immense</p>
<p>d.amounts of</p>
<ol start="3">
<li>people we us  要求单词准确</li>
</ol>
<p>a.private individuals</p>
<p>b.younters and teenagers</p>
<p>c.all children and adults</p>
<p>d.experts and professors</p>
<p>e.parents kids offspring</p>
<p>f.youngters on campus</p>
<ol start="4">
<li>very</li>
</ol>
<p>a.exceedingly</p>
<p>b.distinctly</p>
<p>c.more than</p>
<ol start="5">
<li>important</li>
</ol>
<p>a.significant</p>
<p>b.crucial</p>
<p>c.play a crucial role in sth.</p>
<h2 id="2-写作中可用的万能句型"><a href="#2-写作中可用的万能句型" class="headerlink" title="2.写作中可用的万能句型"></a>2.写作中可用的万能句型</h2><p>1） 主语从句：（记住三个左右就差不多了）</p>
<p>a.It proves self-evident that </p>
<p>b.It have been found that</p>
<p>c.It becomes my point that</p>
<p>d.It seems universally acknowledged that</p>
<ol start="2">
<li>定语从句 (which 引导的非限制性定语从句可以修饰前面的整句话(此时which翻译成：“这”))</li>
</ol>
<p>他是一个色狼，是显而易见的(a、b、c随便选一个)</p>
<p>He is a lady killer,</p>
<p>a.which is really beyond dispute</p>
<p>b.which has been widely accepted</p>
<p>c.which has provoked the public’s widespread concern</p>
<p>3)万能状语</p>
<p>1.as every one can see it</p>
<p>2.with the rapid advance of science and technology</p>
<p>3.in our contemporary society</p>
<p>4.in the general routine of everyday living</p>
<p>4)万能插入语（选一个）（推荐：某一段的段首句主谓之间）</p>
<ul>
<li><p>to be frank；needless to say</p>
</li>
<li><p>in my judgment</p>
</li>
<li><p>from my perspective</p>
</li>
<li><p>to tell the trut</p>
</li>
<li><p>as a matter of fact</p>
</li>
</ul>
<p>5)强调句型</p>
<ul>
<li>It is … that…</li>
</ul>
<h2 id="3-文章"><a href="#3-文章" class="headerlink" title="3.文章"></a>3.文章</h2><p>一、引出主题+个人观点</p>
<p>二、原因分析或举例</p>
<p>三、总结</p>
<h2 id="4-翻译"><a href="#4-翻译" class="headerlink" title="4.翻译"></a>4.翻译</h2><p>要求：基本表达原文意思，文字通顺连贯，无重大语言错误</p>
<p>不会的单词：</p>
<p>1.上位词</p>
<p>2.同义词</p>
<p>3.用会用的单词解释</p>
<p>4.大词瞎写，小词装没看见</p>
<h3 id="英汉差异对比"><a href="#英汉差异对比" class="headerlink" title="英汉差异对比"></a>英汉差异对比</h3><h4 id="1-汉语意合，英语形合"><a href="#1-汉语意合，英语形合" class="headerlink" title="1.汉语意合，英语形合"></a>1.汉语意合，英语形合</h4><p>and：at the same time</p>
<p>but：on the contrary</p>
<p>so：as a result</p>
<p>then：in addition（moreovre）</p>
<h4 id="2-英语被动，汉语主动"><a href="#2-英语被动，汉语主动" class="headerlink" title="2.英语被动，汉语主动"></a>2.英语被动，汉语主动</h4><h4 id="3-英语长句，汉语短句"><a href="#3-英语长句，汉语短句" class="headerlink" title="3.英语长句，汉语短句"></a>3.英语长句，汉语短句</h4><p>1.非谓语动词</p>
<p>2.从句</p>
<p>3.逻辑关系词</p>
<h3 id="翻译步骤"><a href="#翻译步骤" class="headerlink" title="翻译步骤"></a>翻译步骤</h3><p>1.以意群为单位读句子，确定句子时态</p>
<p>2.确定句子主干，非主干部分用定语和状语翻译</p>
<p>3.上下句逻辑关系，加逻辑关系词</p>
<h2 id="仔细阅读"><a href="#仔细阅读" class="headerlink" title="仔细阅读"></a>仔细阅读</h2><p>1.时间：8-10分钟一篇</p>
<p>2.原则：</p>
<p>​    1)读首段和各段首句，把握文章中心（两分钟读完）</p>
<p>​    2)顺序原则</p>
<p>3.题型分析</p>
<p>​    主旨题：无论题干问什么，四个选项当中，和文章中心套的最近的方向一定是正确答案</p>
<p>​    作者态度题不选词：</p>
<p>​        indifferent     biased     prejudiced</p>
<p>​        detached       nutral      pessinistic</p>
<p>​        subjective      puzzled   confused</p>
<p>​    细节题：</p>
<p>​        1）特点：用主旨做不出来的题都是细节题</p>
<p>​        2）方法：定位</p>
<p>​                a.关键词定位</p>
<p>​                b.顺序定位</p>
<p>​        3）正确答案特征：</p>
<p>​                a.位置：定位句+前后句</p>
<p>​                b.细节题的正确答案一定来自于文中某句话</p>
<h2 id="长篇阅读"><a href="#长篇阅读" class="headerlink" title="长篇阅读"></a>长篇阅读</h2><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ul>
<li><p>看大标题，小标题（中心词不能拿来定位）</p>
<ul>
<li>了解文章中心，推测文章大概内容及作者态度</li>
</ul>
</li>
<li><p>找题干中的定位词 回头定位</p>
<ul>
<li>专有名词：<ul>
<li>时间 地点 数字 人名 地名 国家名</li>
</ul>
</li>
<li>固定概念<ul>
<li>合成词、专业概念、特别说法、具体的名词</li>
</ul>
</li>
<li>如以上线索没没有<ul>
<li>常用动词、形容词、副词、极端词、最高级</li>
</ul>
</li>
<li>文章中心词不能拿来定位</li>
</ul>
</li>
</ul>
<ul>
<li>重叠选项，得出答案<ul>
<li>注意：找出明显词后，最好阅读一下该句子意思，和选项是否意思一致</li>
</ul>
</li>
</ul>
<ul>
<li>查漏补缺<ul>
<li>找不到定位后再做</li>
<li>读每段的重点句<ul>
<li>段首段尾句</li>
<li>段中转折词，因果词，递进词后</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="选词填空题"><a href="#选词填空题" class="headerlink" title="选词填空题"></a>选词填空题</h2><h4 id="步骤（7-8min）"><a href="#步骤（7-8min）" class="headerlink" title="步骤（7-8min）"></a>步骤（7-8min）</h4><ul>
<li>标注选项中单词的词性，归类</li>
<li>看文章首句，了解文章中心</li>
<li>根据没个空出现的位置判断需要填的单词的词性</li>
<li>把对应词性的选项代入，符合意思一致即正确答案</li>
</ul>
<h2 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h2><ul>
<li>主旨题<ul>
<li>选项多为<strong>名词</strong>、<strong>动名词</strong>和<strong>概括性的词</strong></li>
</ul>
</li>
</ul>
<h3 id="观点态度题"><a href="#观点态度题" class="headerlink" title="观点态度题"></a>观点态度题</h3><p>1.先进行一般性评价，然后再说出个人观点</p>
<p>2.间接说出态度</p>
<h3 id="细节题"><a href="#细节题" class="headerlink" title="细节题"></a>细节题</h3><p>所听即所选</p>
]]></content>
      <categories>
        <category>英语六级</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>六级</tag>
      </tags>
  </entry>
  <entry>
    <title>斗地主</title>
    <url>/post/fdec2179.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="斗地主"><a href="#斗地主" class="headerlink" title="斗地主"></a>斗地主</h1><a id="more"></a>

<h2 id="基础版"><a href="#基础版" class="headerlink" title="基础版"></a>基础版</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line"></span><br><span class="line">public class poke &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;1.准备牌</span><br><span class="line">        ArrayList&lt;String&gt; poker &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        String[] colors &#x3D; &#123;&quot;♠&quot;,&quot;♥&quot;,&quot;♣&quot;,&quot;♦&quot;&#125;;</span><br><span class="line">        String[] nums &#x3D; &#123;&quot;2&quot;,&quot;A&quot;,&quot;K&quot;,&quot;Q&quot;,&quot;J&quot;,&quot;10&quot;,&quot;9&quot;,&quot;8&quot;,&quot;7&quot;,&quot;6&quot;,&quot;5&quot;,&quot;4&quot;,&quot;3&quot;&#125;;</span><br><span class="line">        &#x2F;&#x2F;先把大小王储存到poker集合中</span><br><span class="line">        poker.add(&quot;大王&quot;);</span><br><span class="line">        poker.add(&quot;小王&quot;);</span><br><span class="line">        for (String num : nums)&#123;</span><br><span class="line">            for (String color : colors)&#123;</span><br><span class="line">                &#x2F;&#x2F;把组装好的牌存储到poker集合中</span><br><span class="line">                poker.add(color+num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;2.洗牌</span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line">        &#x2F;&#x2F;3.发牌</span><br><span class="line">        ArrayList&lt;String&gt; player01 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player02 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player03 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dipai &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;遍历poker集合，获取每一张牌，索引%3给3个玩家轮流发牌</span><br><span class="line">        for (int i &#x3D; 0; i &lt; poker.size(); i++)&#123;</span><br><span class="line">            &#x2F;&#x2F;获取每一张牌</span><br><span class="line">            String p &#x3D; poker.get(i);</span><br><span class="line">            &#x2F;&#x2F;轮流发牌</span><br><span class="line">            if (i&gt;&#x3D;51)&#123;</span><br><span class="line">                &#x2F;&#x2F;给底牌发牌</span><br><span class="line">                dipai.add(p);</span><br><span class="line">            &#125;else if (i%3 &#x3D;&#x3D; 0)&#123;</span><br><span class="line">                &#x2F;&#x2F;给玩家1发牌</span><br><span class="line">                player01.add(p);</span><br><span class="line">            &#125;else if (i%3 &#x3D;&#x3D; 1)&#123;</span><br><span class="line">                &#x2F;&#x2F;给玩家2发牌</span><br><span class="line">                player02.add(p);</span><br><span class="line">            &#125;else if (i%3 &#x3D;&#x3D; 2)&#123;</span><br><span class="line">                &#x2F;&#x2F;给玩家3发牌</span><br><span class="line">                player03.add(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;4.看牌</span><br><span class="line">        System.out.println(&quot;张三&quot; + player01);</span><br><span class="line">        System.out.println(&quot;李四&quot; + player02);</span><br><span class="line">        System.out.println(&quot;王五&quot; + player03);</span><br><span class="line">        System.out.println(&quot;底牌&quot; + dipai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="排序版"><a href="#排序版" class="headerlink" title="排序版"></a>排序版</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class poker &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;1.准备牌</span><br><span class="line">        HashMap&lt;Integer,String&gt; poker &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; pokerIndex &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; colors &#x3D; List.of(&quot;♠&quot;, &quot;♥&quot;, &quot;♣&quot;, &quot;♦&quot;);</span><br><span class="line">        List&lt;String&gt; numbers &#x3D; List.of(&quot;2&quot;, &quot;A&quot;, &quot;K&quot;, &quot;Q&quot;, &quot;J&quot;, &quot;10&quot;, &quot;9&quot;, &quot;8&quot;, &quot;7&quot;, &quot;6&quot;, &quot;5&quot;, &quot;4&quot;, &quot;3&quot;);</span><br><span class="line">        int index &#x3D; 0;</span><br><span class="line">        poker.put(index,&quot;大王&quot;);</span><br><span class="line">        pokerIndex.add(index);</span><br><span class="line">        index++;</span><br><span class="line">        poker.put(index,&quot;小王&quot;);</span><br><span class="line">        pokerIndex.add(index);</span><br><span class="line">        index++;</span><br><span class="line">        for (String number : numbers) &#123;</span><br><span class="line">            for (String color : colors) &#123;</span><br><span class="line">                poker.put(index,color+number);</span><br><span class="line">                pokerIndex.add(index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;2.洗牌</span><br><span class="line">        Collections.shuffle(pokerIndex);</span><br><span class="line">        &#x2F;&#x2F;3.发牌</span><br><span class="line">        ArrayList&lt;Integer&gt; player01 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; player02 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; player03 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; dipai &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i &#x3D; 0; i&lt;pokerIndex.size();i++)&#123;</span><br><span class="line">            Integer in &#x3D; pokerIndex.get(i);</span><br><span class="line">            if (i&gt;&#x3D;51)&#123;</span><br><span class="line">                &#x2F;&#x2F;给底牌发牌</span><br><span class="line">                dipai.add(in);</span><br><span class="line">            &#125;else if (i%3 &#x3D;&#x3D; 0)&#123;</span><br><span class="line">                &#x2F;&#x2F;给玩家1发牌</span><br><span class="line">                player01.add(in);</span><br><span class="line">            &#125;else if (i%3 &#x3D;&#x3D; 1)&#123;</span><br><span class="line">                &#x2F;&#x2F;给玩家2发牌</span><br><span class="line">                player02.add(in);</span><br><span class="line">            &#125;else if (i%3 &#x3D;&#x3D; 2)&#123;</span><br><span class="line">                &#x2F;&#x2F;给玩家3发牌</span><br><span class="line">                player03.add(in);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;4.排序</span><br><span class="line">        Collections.sort(player01);</span><br><span class="line">        Collections.sort(player02);</span><br><span class="line">        Collections.sort(player03);</span><br><span class="line">        Collections.sort(dipai);</span><br><span class="line">        &#x2F;&#x2F;5.看牌</span><br><span class="line">        lookPoker(&quot;张三&quot;,poker,player01);</span><br><span class="line">        lookPoker(&quot;李四&quot;,poker,player02);</span><br><span class="line">        lookPoker(&quot;王五&quot;,poker,player03);</span><br><span class="line">        lookPoker(&quot;底牌&quot;,poker,dipai);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void lookPoker(String name,HashMap&lt;Integer,String&gt; poke,ArrayList&lt;Integer&gt; list)&#123;</span><br><span class="line">        &#x2F;&#x2F;输出玩家名称，不换行</span><br><span class="line">        System.out.print(name+&quot;: &quot;);</span><br><span class="line">        for (Integer key : list)&#123;</span><br><span class="line">            String value &#x3D; poke.get(key);</span><br><span class="line">            System.out.print(value+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>生成五个不相同的随机数</title>
    <url>/post/b30b8561.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="生成不同的随机数"><a href="#生成不同的随机数" class="headerlink" title="生成不同的随机数"></a>生成不同的随机数</h1><a id="more"></a>

<h2 id="random类"><a href="#random类" class="headerlink" title="random类"></a>random类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Random;</span><br><span class="line">&#x2F;&#x2F;生成5个不相同的随机数</span><br><span class="line">public class random &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Random r &#x3D; new Random();</span><br><span class="line">        int[] a &#x3D;new int[5];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i]&#x3D;-1;</span><br><span class="line">        &#125;</span><br><span class="line">        int index &#x3D; 0;</span><br><span class="line">        while (index &lt; a.length)&#123;</span><br><span class="line">            int num &#x3D; r.nextInt(6);</span><br><span class="line">            System.out.println(&quot;生成的随机数：&quot;+num);&#x2F;&#x2F;1 4 2 5 2 3</span><br><span class="line">            if(!contain(a,num))&#123;</span><br><span class="line">                a[index++]&#x3D;num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);&#x2F;&#x2F;1 4 2 5 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static boolean contain(int[] a,int key)&#123;</span><br><span class="line">        &#x2F;*Arrays.sort(a);</span><br><span class="line">        return Arrays.binarySearch(a, key) &gt;&#x3D;0;</span><br><span class="line">        存在bug*&#x2F;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            if (a[i] &#x3D;&#x3D; key)&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>酒店管理系统代码</title>
    <url>/post/6348d4b5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="酒店管理系统代码"><a href="#酒店管理系统代码" class="headerlink" title="酒店管理系统代码"></a>酒店管理系统代码</h1><a id="more"></a>

<h2 id="1-Room类"><a href="#1-Room类" class="headerlink" title="1.Room类"></a>1.Room类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Objects;</span><br><span class="line">&#x2F;&#x2F;关于酒店房间的设置</span><br><span class="line">public class Room &#123;</span><br><span class="line">        &#x2F;&#x2F;房间编号</span><br><span class="line">        private int no;</span><br><span class="line">        &#x2F;&#x2F;房间类型</span><br><span class="line">        private String type;</span><br><span class="line">        &#x2F;&#x2F;房间状态</span><br><span class="line">        private boolean status;</span><br><span class="line">        &#x2F;&#x2F;构造方法</span><br><span class="line">        public Room()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        public Room(int no,String type,boolean status)&#123;</span><br><span class="line">            this.no&#x3D;no;</span><br><span class="line">            this.type&#x3D;type;</span><br><span class="line">            this.status&#x3D;status;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;setter and getter</span><br><span class="line">        public int getNo() &#123;</span><br><span class="line">            return no;</span><br><span class="line">        &#125;</span><br><span class="line">        public void setNo(int no) &#123;</span><br><span class="line">            this.no &#x3D; no;</span><br><span class="line">        &#125;</span><br><span class="line">        public String getType() &#123;</span><br><span class="line">            return type;</span><br><span class="line">        &#125;</span><br><span class="line">        public void setType(String type) &#123;</span><br><span class="line">            this.type &#x3D; type;</span><br><span class="line">        &#125;</span><br><span class="line">        public boolean getStatus() &#123;</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        public void setStatus(boolean status) &#123;</span><br><span class="line">            this.status &#x3D; status;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;toString重写</span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;[&quot; + no + &quot;,&quot; + type + &quot;,&quot; + (status ? &quot;空闲&quot; : &quot;占用&quot;) + &quot;]&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;equals重写</span><br><span class="line">        @Override</span><br><span class="line">        public boolean equals(Object o) &#123;</span><br><span class="line">            if (o &#x3D;&#x3D; null || !(o instanceof Room)) return false;</span><br><span class="line">            if(this &#x3D;&#x3D; o) return true;</span><br><span class="line">            Room room &#x3D; (Room) o;</span><br><span class="line">            return this.getNo() &#x3D;&#x3D; room.getNo();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Hotel类"><a href="#2-Hotel类" class="headerlink" title="2.Hotel类"></a>2.Hotel类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Hotel &#123;</span><br><span class="line">    &#x2F;&#x2F;建房</span><br><span class="line">    private Room[][]rooms;</span><br><span class="line">    public Hotel() &#123;</span><br><span class="line">        &#x2F;&#x2F;动态初始化</span><br><span class="line">        rooms &#x3D; new Room[3][10];</span><br><span class="line">        &#x2F;&#x2F;创建数组，遍历</span><br><span class="line">        for (int i &#x3D; 0; i &lt;rooms.length ; i++) &#123;</span><br><span class="line">            for (int j &#x3D; 0; j &lt;rooms[i].length ; j++) &#123;</span><br><span class="line">               if(i &#x3D;&#x3D; 0)&#123;</span><br><span class="line">                   &#x2F;&#x2F;一层</span><br><span class="line">                   rooms[i][j] &#x3D; new Room((i+1)*100+j+1,&quot;单人间&quot;,true);</span><br><span class="line">               &#125;else if (i &#x3D;&#x3D; 1)&#123;</span><br><span class="line">                   &#x2F;&#x2F;二层</span><br><span class="line">                   rooms[i][j] &#x3D; new Room((i+1)*100+j+1,&quot;标准间&quot;,true);</span><br><span class="line">               &#125;else if (i &#x3D;&#x3D; 2)&#123;</span><br><span class="line">                   &#x2F;&#x2F;三层</span><br><span class="line">                   rooms[i][j] &#x3D; new Room((i+1)*100+j+1,&quot;总统套房&quot;,true);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;在酒店对象上提供一个打印房间列表的方法</span><br><span class="line">    public void print()&#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; rooms.length; i++) &#123;</span><br><span class="line">            for (int j &#x3D; 0; j &lt; rooms[i].length; j++) &#123;</span><br><span class="line">                Room room &#x3D; rooms[i][j];</span><br><span class="line">                System.out.print(room);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;订房方法</span><br><span class="line">    public void order(int roomNo)&#123;</span><br><span class="line">        &#x2F;&#x2F;订房最主要的是将房间对象的status修改为false</span><br><span class="line">        Room room &#x3D; rooms[roomNo &#x2F; 100 - 1][roomNo % 100 - 1];</span><br><span class="line">        &#x2F;&#x2F;修改为占用</span><br><span class="line">        room.setStatus(false);</span><br><span class="line">        System.out.println(roomNo+&quot;已定房！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;退房系统</span><br><span class="line">    public void exit(int roomNo)&#123;</span><br><span class="line">        Room room &#x3D; rooms[roomNo &#x2F; 100 - 1][roomNo % 100 - 1];</span><br><span class="line">        &#x2F;&#x2F;修改为空闲</span><br><span class="line">        room.setStatus(true);</span><br><span class="line">        System.out.println(roomNo+&quot;已退房！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Manage"><a href="#3-Manage" class="headerlink" title="3.Manage"></a>3.Manage</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;关于酒店管理系统</span><br><span class="line">public class Manage &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Hotel hotel &#x3D; new Hotel();</span><br><span class="line">        System.out.println(&quot;欢迎使用酒店管理系统，请认真阅读使用说明&quot;);</span><br><span class="line">        System.out.println(&quot;请输入对应的功能编号：[1]表示查看房间列表。[2]标识订房。[3]表示退房。[0]退出系统。&quot;);</span><br><span class="line">        Scanner scanner &#x3D; new Scanner(System.in);</span><br><span class="line">       while (true)&#123;</span><br><span class="line">           System.out.println(&quot;请输入功能编号：&quot;);</span><br><span class="line">           int i &#x3D; scanner.nextInt();</span><br><span class="line">           if (i &#x3D;&#x3D; 1)&#123;</span><br><span class="line">               hotel.print();</span><br><span class="line">           &#125;else if(i &#x3D;&#x3D; 2)&#123;</span><br><span class="line">               System.out.print(&quot;请输入房间编号：&quot;);</span><br><span class="line">               int roomNo &#x3D; scanner.nextInt();</span><br><span class="line">               hotel.order(roomNo);</span><br><span class="line">           &#125;else if(i &#x3D;&#x3D; 3)&#123;</span><br><span class="line">               System.out.print(&quot;请输入房间编号：&quot;);</span><br><span class="line">               int roomNo &#x3D; scanner.nextInt();</span><br><span class="line">               hotel.exit(roomNo);</span><br><span class="line">           &#125;else if(i &#x3D;&#x3D; 0)&#123;</span><br><span class="line">               System.out.println(&quot;退出系统！&quot;);</span><br><span class="line">               return;</span><br><span class="line">           &#125;else &#123;</span><br><span class="line">               System.out.println(&quot;输入编号有误，请重新输入！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>节点的删除插入等基本操作</title>
    <url>/post/b94a87bf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="节点的删除插入等基本操作"><a href="#节点的删除插入等基本操作" class="headerlink" title="节点的删除插入等基本操作"></a>节点的删除插入等基本操作</h1><a id="more"></a>

<h2 id="Mylink"><a href="#Mylink" class="headerlink" title="Mylink"></a>Mylink</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Mylink &#123;</span><br><span class="line">    private Node first;&#x2F;&#x2F;第一个节点</span><br><span class="line">    private Node end;&#x2F;&#x2F;最后一个节点</span><br><span class="line">    private int size;&#x2F;&#x2F;节点个数</span><br><span class="line">    &#x2F;&#x2F;用尾插法增加一个节点</span><br><span class="line">    public void linkListAdd(Object obj) &#123;</span><br><span class="line">        size++;</span><br><span class="line">        Node node &#x3D; new Node(obj);</span><br><span class="line">        if(first&#x3D;&#x3D;null) &#123;</span><br><span class="line">            first &#x3D; node;</span><br><span class="line">            end &#x3D; node;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            end.next &#x3D; node;</span><br><span class="line">            node.previous &#x3D; end;</span><br><span class="line">            end &#x3D; node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;删除一个节点</span><br><span class="line">    public void linkListRemove(int index) &#123;</span><br><span class="line">        if(index&#x3D;&#x3D;0) &#123;</span><br><span class="line">            first&#x3D;first.next;</span><br><span class="line">            first.previous&#x3D;null;</span><br><span class="line">        &#125;else if(index&#x3D;&#x3D;size-1)&#123;</span><br><span class="line">            end&#x3D;end.previous;</span><br><span class="line">            end.next&#x3D;null;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            Node temp&#x3D;getNode(index);</span><br><span class="line">            temp.previous.next&#x3D;temp.next;</span><br><span class="line">            temp.next.previous&#x3D;temp.previous;</span><br><span class="line">            temp.next&#x3D;temp.previous&#x3D;null;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;插入一个节点</span><br><span class="line">    public void linkListInsert(Object obj , int index) &#123;</span><br><span class="line">        Node node &#x3D; new Node(obj);</span><br><span class="line">        if(index&#x3D;&#x3D;0) &#123;</span><br><span class="line">            first.previous&#x3D;node;</span><br><span class="line">            node.next&#x3D;first;</span><br><span class="line">            first&#x3D;node;</span><br><span class="line">        &#125;else if(index&#x3D;&#x3D;size) &#123;</span><br><span class="line">            end.next&#x3D;node;</span><br><span class="line">            end.previous&#x3D;end;</span><br><span class="line">            end&#x3D;node;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            Node temp&#x3D;getNode(index);</span><br><span class="line">            node.next&#x3D;temp;</span><br><span class="line">            node.previous&#x3D;temp.previous;</span><br><span class="line">            temp.previous.next&#x3D;node;</span><br><span class="line">            temp.previous&#x3D;node;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;返回特定下标的节点</span><br><span class="line">    public Node getNode(int index) &#123;</span><br><span class="line">        if(index&lt;0||index&gt;size-1) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;索引不合法：&quot;+index);</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp&#x3D;null;</span><br><span class="line">        if(index&lt;&#x3D;(size&gt;&gt;1)) &#123;</span><br><span class="line">            temp &#x3D; first;</span><br><span class="line">            for(int i&#x3D;0 ; i&lt;index ; i++) &#123;</span><br><span class="line">                temp &#x3D; temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            temp &#x3D; end;</span><br><span class="line">            for(int i&#x3D;size-1 ; i&gt;index ; i--) &#123;</span><br><span class="line">                temp &#x3D; temp.previous;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return temp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;取得指定下表的节点的内容</span><br><span class="line">    public Object get(int index) &#123;</span><br><span class="line">        Node temp &#x3D; getNode(index);</span><br><span class="line">        return temp&#x3D;&#x3D;null?null:temp.element;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Mylink linklist &#x3D; new Mylink();</span><br><span class="line">        linklist.linkListAdd(&quot;a&quot;);</span><br><span class="line">        linklist.linkListAdd(&quot;b&quot;);</span><br><span class="line">        linklist.linkListAdd(&quot;c&quot;);</span><br><span class="line">        linklist.linkListAdd(&quot;d&quot;);</span><br><span class="line">        linklist.linkListAdd(&quot;e&quot;);</span><br><span class="line">        System.out.print(linklist);&#x2F;&#x2F;abcde</span><br><span class="line">        System.out.println(&quot;链表的长度为：&quot;+linklist.size);&#x2F;&#x2F;链表的长度为：5</span><br><span class="line">        System.out.println(&quot;从链表中取得的元素为：&quot;+linklist.get(4));&#x2F;&#x2F;从链表中取得的元素为：e</span><br><span class="line">        linklist.linkListRemove(3);</span><br><span class="line">        System.out.print(linklist);&#x2F;&#x2F;abce</span><br><span class="line">        linklist.linkListInsert(&quot;f&quot;, 4);</span><br><span class="line">        System.out.println(linklist);&#x2F;&#x2F;abcef</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;打印链表，改写toString方法</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        Node temp &#x3D; first;</span><br><span class="line">        while(temp!&#x3D;null) &#123;</span><br><span class="line">            System.out.print(temp.element);</span><br><span class="line">            temp &#x3D; temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Node &#123;</span><br><span class="line">    Node previous;</span><br><span class="line">    Node next;</span><br><span class="line">    Object element;</span><br><span class="line">    public Node(Object o)&#123;</span><br><span class="line">        this.element &#x3D; o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML+CSS+JS学习</title>
    <url>/post/d29d4f7a.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML-CSS-JS"><a href="#HTML-CSS-JS" class="headerlink" title="HTML+CSS+JS"></a>HTML+CSS+JS</h1><a id="more"></a>

<h2 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h2><p>B / S架构：（以后主要走的方向是这个）</p>
<p>​    Browser / Server （浏览器 / 服务器）</p>
<p>优点：升级方便，只升级服务器端代码即可</p>
<p>缺点：速度慢，体验不好，界面不炫酷</p>
<p>C / S架构</p>
<p>​    Client / Server （客户端 / 服务器端） </p>
<p>优点：速度好，体验好，界面炫酷（娱乐型的系统多数是C/S架构）</p>
<p>缺点：升级麻烦，维护成本较高</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;String练习&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var x&#x3D;&quot;abc&quot;</span><br><span class="line">    alert(typeof x)</span><br><span class="line">    alert(x.length)</span><br><span class="line">    function User(a,b,c) &#123;</span><br><span class="line">        this.sno&#x3D;a;</span><br><span class="line">        this.sname&#x3D;b;</span><br><span class="line">        this.sage&#x3D;c;</span><br><span class="line">    &#125;</span><br><span class="line">    var u1&#x3D;new User(111,&quot;张三&quot;,25)</span><br><span class="line">    alert(u1.sno)</span><br><span class="line">    alert(u1.sname)</span><br><span class="line">    alert(u1.sage)</span><br><span class="line">    Product&#x3D;function (pno,pname,price) &#123;</span><br><span class="line">        &#x2F;&#x2F;属性</span><br><span class="line">        this.pno&#x3D;pno</span><br><span class="line">        this.pname&#x3D;pname</span><br><span class="line">        this.price&#x3D;price</span><br><span class="line">        &#x2F;&#x2F;函数</span><br><span class="line">        this.getPrice&#x3D;function () &#123;</span><br><span class="line">            return this.price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var pro&#x3D;new Product(111,&quot;香蕉&quot;,3.8)</span><br><span class="line">    var pri&#x3D;pro.getPrice()</span><br><span class="line">    alert(pri)</span><br><span class="line">    Product.prototype.getPname &#x3D; function () &#123;</span><br><span class="line">        return this.pname</span><br><span class="line">    &#125;</span><br><span class="line">    var pna &#x3D; pro.getPname()</span><br><span class="line">    alert(pna)</span><br><span class="line">    alert(typeof null)&#x2F;&#x2F;&quot;Object&quot;</span><br><span class="line">    alert(typeof NaN)&#x2F;&#x2F;&quot;number&quot;</span><br><span class="line">    alert(typeof undefined)&#x2F;&#x2F;&quot;undefined&quot;</span><br><span class="line">    alert(null&#x3D;&#x3D;NaN)&#x2F;&#x2F;false</span><br><span class="line">    alert(null&#x3D;&#x3D;undefined)&#x2F;&#x2F;true</span><br><span class="line">    alert(NaN&#x3D;&#x3D;undefined)&#x2F;&#x2F;false</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JS中的事件"><a href="#JS中的事件" class="headerlink" title="JS中的事件"></a>JS中的事件</h2><ul>
<li>blur失去焦点</li>
<li>change下拉列表选中项改变，或文本框内容改变</li>
<li>click鼠标单击</li>
<li>dbclick鼠标双击</li>
<li>focus获得焦点</li>
<li>keydown键盘按下</li>
<li>keyup键盘弹起</li>
<li>load页面加载完毕</li>
<li>mousedown鼠标按下</li>
<li>mouseover鼠标经过</li>
<li>mousemove鼠标移动</li>
<li>mouseout鼠标离开</li>
<li>reset表单重置</li>
<li>select文本被选定</li>
<li>submit表单提交</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;JS常用事件&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    function sayHello() &#123;</span><br><span class="line">        alert(&quot;hello js&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;sdf&quot; onclick&#x3D;&quot;f1()&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;hello1&quot; id&#x3D;&quot;01&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;hello2&quot; id&#x3D;&quot;mybtn&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;hello3&quot; id&#x3D;&quot;mybtn1&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;hello4&quot; id&#x3D;&quot;mybtn2&quot;&#x2F;&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    function f1() &#123;</span><br><span class="line">        alert(&quot;sad&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    function doSome() &#123;</span><br><span class="line">        alert(&quot;do Some!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;第一步：先获取这个按钮对象（document是全部小写，内置对象，可以直接用，document就代表整个HTML页面）</span><br><span class="line">    var btnObj &#x3D; document.getElementById(&quot;mybtn&quot;)</span><br><span class="line">    &#x2F;&#x2F;第二步：给按钮对象的onclick属性赋值</span><br><span class="line">    btnObj.onclick &#x3D; doSome</span><br><span class="line">    function f() &#123;</span><br><span class="line">        alert(&quot;01&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    var o &#x3D; document.getElementById(&quot;01&quot;)</span><br><span class="line">    o.onclick &#x3D; f</span><br><span class="line">    var mybtn1 &#x3D; document.getElementById(&quot;mybtn1&quot;)</span><br><span class="line">    mybtn1.onclick &#x3D; function () &#123;</span><br><span class="line">        alert(&quot;test......&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementById(&quot;mybtn2&quot;).onclick &#x3D; function () &#123;</span><br><span class="line">        alert(&quot;test22222&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="关于JS代码的执行顺序"><a href="#关于JS代码的执行顺序" class="headerlink" title="关于JS代码的执行顺序"></a>关于JS代码的执行顺序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;关于JS代码的执行顺序&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    window.onload &#x3D; function ready() &#123;</span><br><span class="line">        var btn &#x3D; document.getElementById(&quot;btn&quot;)</span><br><span class="line">        btn.onclick &#x3D; function () &#123;</span><br><span class="line">            alert(&quot;hello js&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;hello&quot; id&#x3D;&quot;btn&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JS代码设置节点的属性"><a href="#JS代码设置节点的属性" class="headerlink" title="JS代码设置节点的属性"></a>JS代码设置节点的属性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;JS代码设置节点的属性&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    window.onload &#x3D; function () &#123;</span><br><span class="line">        document.getElementById(&quot;btn&quot;).onclick &#x3D; function () &#123;</span><br><span class="line">            var mytext &#x3D; document.getElementById(&quot;mytext&quot;)</span><br><span class="line">            mytext.type &#x3D; &quot;checkbox&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;mytext&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;将文本框修改为复选框&quot; id&#x3D;&quot;btn&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="DOM编程-获取文本框的value"><a href="#DOM编程-获取文本框的value" class="headerlink" title="DOM编程-获取文本框的value"></a>DOM编程-获取文本框的value</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;DOM编程-获取文本框的value&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    window.onload &#x3D; function () &#123;</span><br><span class="line">        &#x2F;&#x2F;var btnElt &#x3D; window.document.getElementById(&quot;btn&quot;)</span><br><span class="line">       var btnElt &#x3D; document.getElementById(&quot;btn&quot;)</span><br><span class="line">        alert(btnElt)&#x2F;&#x2F;object HTMLInputElement</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id &#x3D; &quot;btn&quot; value&#x3D;&quot;hello&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="innerHTML和innerText操作div和spa"><a href="#innerHTML和innerText操作div和spa" class="headerlink" title="innerHTML和innerText操作div和spa"></a>innerHTML和innerText操作div和spa</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;innerHTML和innerText操作div和span&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        #div1&#123;</span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            border: 1px black solid;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 100px;</span><br><span class="line">            left: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    window.onload &#x3D; function () &#123;</span><br><span class="line">        var btn1 &#x3D; document.getElementById(&quot;btn1&quot;)</span><br><span class="line">        btn1.onclick &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;第一步：获取div对象</span><br><span class="line">            var divElt &#x3D; document.getElementById(&quot;div1&quot;)</span><br><span class="line">            &#x2F;&#x2F;第二步：使用innerHTML属性设置元素内部的内容</span><br><span class="line">            divElt.innerHTML &#x3D; &quot;&lt;font color&#x3D;&#39;red&#39;&gt;用户名不能为空！！！&lt;&#x2F;font&gt;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        var btn2 &#x3D; document.getElementById(&quot;btn2&quot;)</span><br><span class="line">        btn2.onclick &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;第一步：获取div对象</span><br><span class="line">            var div &#x3D; document.getElementById(&quot;div1&quot;)</span><br><span class="line">            &#x2F;&#x2F;第二步：使用innerHTML属性设置元素内部的内容</span><br><span class="line">            div.innerText &#x3D; &quot;&lt;font color&#x3D;&#39;red&#39;&gt;用户名不能为空！！！&lt;&#x2F;font&gt;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;设置div中的内容(innerHTML)&quot; id&#x3D;&quot;btn1&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;设置div中的内容(innerText)&quot; id&#x3D;&quot;btn2&quot;&#x2F;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;div1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="DOM编程-关于正则表达式"><a href="#DOM编程-关于正则表达式" class="headerlink" title="DOM编程-关于正则表达式"></a>DOM编程-关于正则表达式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;DOM编程-关于正则表达式&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    window.onload &#x3D; function () &#123;</span><br><span class="line">        document.getElementById(&quot;btn&quot;).onclick &#x3D; function () &#123;</span><br><span class="line">            var email &#x3D; document.getElementById(&quot;email&quot;).value</span><br><span class="line">            var emailRegExp &#x3D; &#x2F;^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&#x2F;</span><br><span class="line">            var ok &#x3D; emailRegExp.test(email)</span><br><span class="line">            if (!ok)&#123;</span><br><span class="line">                document.getElementById(&quot;emailError&quot;).innerText&#x3D;&quot;邮箱地址不合法&quot;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                document.getElementById(&quot;emailError&quot;).innerText&#x3D;&quot;邮箱地址合法&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&quot;email&quot;).onfocus &#x3D; function () &#123;</span><br><span class="line">            document.getElementById(&quot;emailError&quot;).innerText&#x3D;&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;email&quot;&#x2F;&gt;</span><br><span class="line">&lt;span id&#x3D;&quot;emailError&quot;style&#x3D;&quot;color: #ff0000;font-size: 12px&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;验证邮箱&quot; id&#x3D;&quot;btn&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="去除字符串的前后空白trim"><a href="#去除字符串的前后空白trim" class="headerlink" title="去除字符串的前后空白trim"></a>去除字符串的前后空白trim</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;去除字符串的前后空白trim&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    &#x2F;&#x2F;低版本的IE浏览器不支持字符串的trim()函数</span><br><span class="line">    &#x2F;&#x2F;自己对String类扩展一个全新的trim()函数</span><br><span class="line">    String.prototype.trim &#x3D; function()&#123;</span><br><span class="line">        return this.replace(&#x2F;^\s+&#x2F;,&quot;&quot;).replace(&#x2F;\s+$&#x2F;,&quot;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    window.onload &#x3D; function () &#123;</span><br><span class="line">        document.getElementById(&quot;btn&quot;).onclick &#x3D; function () &#123;</span><br><span class="line">            var username &#x3D; document.getElementById(&quot;username&quot;).value</span><br><span class="line">            &#x2F;&#x2F;去除前后空白</span><br><span class="line">            username &#x3D; username.trim()</span><br><span class="line">            &#x2F;&#x2F;测试</span><br><span class="line">            alert(&quot;---&gt;&quot; + username + &quot;&lt;----&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取用户名&quot; id&#x3D;&quot;btn&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;表单验证&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        span&#123;</span><br><span class="line">            color: red;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    window.onload &#x3D;function () &#123;</span><br><span class="line">        &#x2F;&#x2F;给用户名文本框绑定blur事件</span><br><span class="line">        var usernameElt &#x3D; document.getElementById(&quot;username&quot;)</span><br><span class="line">        &#x2F;&#x2F;获取username的span标签</span><br><span class="line">        var usernameErrorSpan &#x3D; document.getElementById(&quot;usernameError&quot;)</span><br><span class="line">        usernameElt.onblur &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;获取用户名</span><br><span class="line">            var username &#x3D; usernameElt.value</span><br><span class="line">            username&#x3D;username.trim()</span><br><span class="line">            &#x2F;&#x2F;判断用户名是否为空</span><br><span class="line">            if (username&#x3D;&#x3D;&#x3D; &quot;&quot;)&#123;</span><br><span class="line">                usernameErrorSpan.innerText &#x3D; &quot;用户名不能为空&quot;</span><br><span class="line">            &#125;else &#123;if (username.length&lt;6||username.length&gt;14)&#123;</span><br><span class="line">                usernameErrorSpan.innerText &#x3D; &quot;用户名长度必须在【6-14】之间&quot;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;给username这个文本框绑定获得焦点事件</span><br><span class="line">        usernameElt.onfocus &#x3D;function () &#123;</span><br><span class="line">            &#x2F;&#x2F;清空非法的value</span><br><span class="line">            if (usernameErrorSpan.innerText!&#x3D;&#x3D;&quot;&quot;)&#123;</span><br><span class="line">                usernameElt.value&#x3D;&quot;&quot;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;清空span</span><br><span class="line">            usernameErrorSpan.innerText &#x3D; &quot;&quot;</span><br><span class="line">            var regExp &#x3D; &#x2F;^[A-Za-z0-9]+$&#x2F;</span><br><span class="line">            var ok &#x3D; regExp.test(username)</span><br><span class="line">            if (ok)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                usernameErrorSpan.innerText &#x3D; &quot;用户名只能由数字和字母组成&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取密码错误提示的span标签</span><br><span class="line">        var wdErrorSpan &#x3D; document.getElementById(&quot;wdError&quot;)</span><br><span class="line">        &#x2F;&#x2F;获取确认密码框对象</span><br><span class="line">        var userwd2Elt &#x3D; document.getElementById(&quot;userwd2&quot;)</span><br><span class="line">        userwd2Elt.onblur &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;获取密码和确认密码</span><br><span class="line">            var userwdElt &#x3D; document.getElementById(&quot;userwd&quot;)</span><br><span class="line">            var userwd &#x3D; userwdElt.value</span><br><span class="line">            var userwd2 &#x3D; userwd2Elt.value</span><br><span class="line">            if (userwd !&#x3D; userwd2)&#123;</span><br><span class="line">                &#x2F;&#x2F;密码不一致</span><br><span class="line">                wdErrorSpan.innerText &#x3D; &quot;密码不一致&quot;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                &#x2F;&#x2F;密码一致</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;绑定focus事件</span><br><span class="line">        userwd2Elt.onfocus &#x3D; function () &#123;</span><br><span class="line">            if (wdErrorSpan.innerText !&#x3D; &quot;&quot;)&#123;</span><br><span class="line">                userwd2Elt.value &#x3D; &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            wdErrorSpan.innerText &#x3D; &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;给email绑定blur事件</span><br><span class="line">        var emailElt &#x3D; document.getElementById(&quot;email&quot;)</span><br><span class="line">        &#x2F;&#x2F;获取email的span</span><br><span class="line">        var emailSpan &#x3D; document.getElementById(&quot;emailError&quot;)</span><br><span class="line">        email.onblur &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;获取email</span><br><span class="line">            var email &#x3D; emailElt.value</span><br><span class="line">            var emailRegExp &#x3D; &#x2F;^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&#x2F;</span><br><span class="line">            var ok &#x3D; emailRegExp.test(email)</span><br><span class="line">            if (ok)&#123;</span><br><span class="line">                &#x2F;&#x2F;合法</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                &#x2F;&#x2F;不合法</span><br><span class="line">                emailSpan.innerText &#x3D; &quot;邮箱不合法&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;给email绑定foucs</span><br><span class="line">        emailElt.onfocus &#x3D; function () &#123;</span><br><span class="line">            if (emailSpan.innerText !&#x3D; &quot;&quot;)&#123;</span><br><span class="line">                emailElt.value &#x3D; &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            emailSpan.innerText &#x3D; &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;给提交按钮绑定鼠标点击事件</span><br><span class="line">        var submitBtnElt &#x3D; document.getElementById(&quot;submitBtn&quot;)</span><br><span class="line">        submitBtnElt.onclick &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;触发username的blur userwd2的blur email的blur</span><br><span class="line">            usernameElt.focus()</span><br><span class="line">            usernameElt.blur()</span><br><span class="line">            userwd2Elt.focus()</span><br><span class="line">            userwd2Elt.blur()</span><br><span class="line">            emailElt.focus()</span><br><span class="line">            emailElt.blur()</span><br><span class="line">            if (usernameErrorSpan.innerText &#x3D;&#x3D; &quot;&quot; &amp;&amp; wdErrorSpan.innerText &#x3D;&#x3D; &quot;&quot; &amp;&amp; emailElt.innerText &#x3D;&#x3D; &quot;&quot;)&#123;</span><br><span class="line">                var userFormElt &#x3D; document.getElementById(&quot;userForm&quot;)</span><br><span class="line">                userFormElt.submit()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;form id&#x3D;&quot;userForm&quot; action &#x3D; &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;jd&#x2F;save&quot; method&#x3D;&quot;get&quot;&gt;&lt;br&gt;</span><br><span class="line">    用户名&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; id&#x3D;&quot;username&quot;&#x2F;&gt;&lt;span id&#x3D;&quot;usernameError&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;</span><br><span class="line">    密码&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;userwd&quot; id&#x3D;&quot;userwd&quot;&#x2F;&gt;&lt;br&gt;</span><br><span class="line">    确认密码&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;userwd2&quot;&#x2F;&gt;&lt;span id&#x3D;&quot;wdError&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;</span><br><span class="line">    邮箱&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; id&#x3D;&quot;email&quot;&#x2F;&gt;&lt;span id&#x3D;&quot;emailError&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;注册&quot; id&#x3D;&quot;submitBtn&quot;&#x2F;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="完善了一下"><a href="#完善了一下" class="headerlink" title="完善了一下"></a>完善了一下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;表单验证&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        span&#123;</span><br><span class="line">            color: red;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    window.onload &#x3D;function () &#123;</span><br><span class="line">        &#x2F;&#x2F;给用户名文本框绑定blur事件</span><br><span class="line">        var usernameElt &#x3D; document.getElementById(&quot;username&quot;)</span><br><span class="line">        &#x2F;&#x2F;获取username的span标签</span><br><span class="line">        var usernameErrorSpan &#x3D; document.getElementById(&quot;usernameError&quot;)</span><br><span class="line">        usernameElt.onblur &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;获取用户名</span><br><span class="line">            var username &#x3D; usernameElt.value</span><br><span class="line">            username&#x3D;username.trim()</span><br><span class="line">            &#x2F;&#x2F;判断用户名是否为空</span><br><span class="line">            if (username&#x3D;&#x3D;&#x3D; &quot;&quot;)&#123;</span><br><span class="line">                usernameErrorSpan.innerText &#x3D; &quot;用户名不能为空&quot;</span><br><span class="line">            &#125;else &#123;if (username.length&lt;6||username.length&gt;14)&#123;</span><br><span class="line">                usernameErrorSpan.innerText &#x3D; &quot;用户名长度必须在【6-14】之间&quot;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;给username这个文本框绑定获得焦点事件</span><br><span class="line">        usernameElt.onfocus &#x3D;function () &#123;</span><br><span class="line">            &#x2F;&#x2F;清空非法的value</span><br><span class="line">            if (usernameErrorSpan.innerText!&#x3D;&#x3D;&quot;&quot;)&#123;</span><br><span class="line">                usernameElt.value&#x3D;&quot;&quot;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;清空span</span><br><span class="line">            usernameErrorSpan.innerText &#x3D; &quot;&quot;</span><br><span class="line">            var regExp &#x3D; &#x2F;^[A-Za-z0-9]+$&#x2F;</span><br><span class="line">            var ok &#x3D; regExp.test(username)</span><br><span class="line">            if (ok)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                usernameErrorSpan.innerText &#x3D; &quot;用户名只能由数字和字母组成&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取密码错误提示的span标签</span><br><span class="line">        var wdErrorSpan &#x3D; document.getElementById(&quot;wdError&quot;)</span><br><span class="line">        &#x2F;&#x2F;获取确认密码框对象</span><br><span class="line">        var userwd2Elt &#x3D; document.getElementById(&quot;userwd2&quot;)</span><br><span class="line">        userwd2Elt.onblur &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;获取密码和确认密码</span><br><span class="line">            var userwdElt &#x3D; document.getElementById(&quot;userwd&quot;)</span><br><span class="line">            var userwd &#x3D; userwdElt.value</span><br><span class="line">            var userwd2 &#x3D; userwd2Elt.value</span><br><span class="line">            if (userwd !&#x3D; userwd2)&#123;</span><br><span class="line">                &#x2F;&#x2F;密码不一致</span><br><span class="line">                wdErrorSpan.innerText &#x3D; &quot;密码不一致&quot;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                &#x2F;&#x2F;密码一致</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;绑定focus事件</span><br><span class="line">        userwd2Elt.onfocus &#x3D; function () &#123;</span><br><span class="line">            if (wdErrorSpan.innerText !&#x3D; &quot;&quot;)&#123;</span><br><span class="line">                userwd2Elt.value &#x3D; &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            wdErrorSpan.innerText &#x3D; &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;给email绑定blur事件</span><br><span class="line">        var emailElt &#x3D; document.getElementById(&quot;email&quot;)</span><br><span class="line">        &#x2F;&#x2F;获取email的span</span><br><span class="line">        var emailSpan &#x3D; document.getElementById(&quot;emailError&quot;)</span><br><span class="line">        email.onblur &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;获取email</span><br><span class="line">            var email &#x3D; emailElt.value</span><br><span class="line">            var emailRegExp &#x3D; &#x2F;^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&#x2F;</span><br><span class="line">            var ok &#x3D; emailRegExp.test(email)</span><br><span class="line">            if (ok)&#123;</span><br><span class="line">                &#x2F;&#x2F;合法</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                &#x2F;&#x2F;不合法</span><br><span class="line">                emailSpan.innerText &#x3D; &quot;邮箱不合法&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;给email绑定foucs</span><br><span class="line">        emailElt.onfocus &#x3D; function () &#123;</span><br><span class="line">            if (emailSpan.innerText !&#x3D; &quot;&quot;)&#123;</span><br><span class="line">                emailElt.value &#x3D; &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            emailSpan.innerText &#x3D; &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;给提交按钮绑定鼠标点击事件</span><br><span class="line">        var submitBtnElt &#x3D; document.getElementById(&quot;submitBtn&quot;)</span><br><span class="line">        submitBtnElt.onclick &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;触发username的blur userwd2的blur email的blur</span><br><span class="line">            usernameElt.focus()</span><br><span class="line">            usernameElt.blur()</span><br><span class="line">            userwd2Elt.focus()</span><br><span class="line">            userwd2Elt.blur()</span><br><span class="line">            emailElt.focus()</span><br><span class="line">            emailElt.blur()</span><br><span class="line">            if (usernameErrorSpan.innerText &#x3D;&#x3D; &quot;&quot; &amp;&amp; wdErrorSpan.innerText &#x3D;&#x3D; &quot;&quot; &amp;&amp; emailElt.innerText &#x3D;&#x3D; &quot;&quot;)&#123;</span><br><span class="line">                var userFormElt &#x3D; document.getElementById(&quot;userForm&quot;)</span><br><span class="line">                userFormElt.submit()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;form id&#x3D;&quot;userForm&quot; action &#x3D; &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;jd&#x2F;save&quot; method&#x3D;&quot;get&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;table&gt;&lt;tr&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; id&#x3D;&quot;username&quot;&#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&lt;span id&#x3D;&quot;usernameError&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;&lt;br&gt;</span><br><span class="line">        &lt;tr&gt;&lt;th&gt;密码&lt;&#x2F;th&gt;&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;userwd&quot; id&#x3D;&quot;userwd&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;br&gt;</span><br><span class="line">        &lt;tr&gt;&lt;th&gt;确认密码&lt;&#x2F;th&gt;&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;userwd2&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;span id&#x3D;&quot;wdError&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;br&gt;</span><br><span class="line">        &lt;tr&gt;&lt;th&gt;邮箱&lt;&#x2F;th&gt;&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; id&#x3D;&quot;email&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;span id&#x3D;&quot;emailError&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;&lt;td colspan&#x3D;&quot;2&quot; align&#x3D;&quot;center&quot;&gt;&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;注册&quot; id&#x3D;&quot;submitBtn&quot;&#x2F;&gt;&lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/post/8fe47ff4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a>

<h2 id="JDBC快速入门"><a href="#JDBC快速入门" class="headerlink" title="JDBC快速入门"></a>JDBC快速入门</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcase.jdbc;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class jdbc &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F;1.导入驱动jar包</span><br><span class="line">        &#x2F;&#x2F;2.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        &#x2F;&#x2F;3.获取数据库连接对象</span><br><span class="line">        &#x2F;&#x2F;localhost:3306&#x2F;db3.root,root);</span><br><span class="line">        Connection connection &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;stu?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&quot;, &quot;root&quot;, &quot;8023&quot;);</span><br><span class="line">        &#x2F;&#x2F;4.定义sql语言</span><br><span class="line">        String sql &#x3D;&quot;update class set score &#x3D; 100 where id&#x3D; 23&quot;;</span><br><span class="line">        &#x2F;&#x2F;5.获取执行sql的对象 Statement</span><br><span class="line">        Statement statement&#x3D;connection.createStatement();</span><br><span class="line">        &#x2F;&#x2F;6.执行sql</span><br><span class="line">        int i &#x3D; statement.executeUpdate(sql);</span><br><span class="line">        &#x2F;&#x2F;7.处理结果</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        &#x2F;&#x2F;8.释放资源</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="详解各个对象"><a href="#详解各个对象" class="headerlink" title="详解各个对象"></a>详解各个对象</h2><p>1.DriverManager：驱动管理对象</p>
<ul>
<li>功能</li>
</ul>
<p>1.注册驱动：告诉程序该使用哪一个数据驱动jar</p>
<p> static void registerDriver(Driver driver):注册给定的驱动程序 DriverManager。</p>
<p>写代码使用：<code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code></p>
<p><strong>注意：mysql5之后的驱动jar包可以省略注册驱动的步骤</strong></p>
<p>2.获取数据库连接：</p>
<ul>
<li><p>方法：<code>Connection connection = DriverManager.getConnection(String url,String user,String password)</code></p>
<p>url：语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</p>
<p>​         细节：如果是连接本地mysql服务器，并且服务器默认端口是3306，则URL可以写成：jdbc:mysql:///数据库名称</p>
</li>
</ul>
<p>2.Connection：数据库连接对象</p>
<ul>
<li><p>功能</p>
<p>1.获取执行sql对象</p>
<p>​    Statement createStatement()</p>
<p>​    PreparedStatement preparedStatement(String sql)</p>
<p>2.管理事务：</p>
<p>​    *开启事务：setAutoCommit(boolean autoCommit)：调用该方法设置参数为false，即为开启事务</p>
<p>​    *提交事务：commit()</p>
<p>​    *回滚事务：rollback()</p>
</li>
</ul>
<p>3.Statement：执行sql的对象</p>
<p>​    1.执行sql</p>
<p>​        1.boolean execute(String sql)：可以执行任意的sql  了解</p>
<p>​        2.int executeUpdate(String sql)：执行DML（insert、update、delete）语句、DDL（create、alter、drop）语句</p>
<p><strong>返回值：影响行数，可以通过这个影响的行数判断DML语句是否执行成功，返回值&gt;0的则执行成功，反之，失败</strong></p>
<p>​        3.ResultSet executeQuery(String sql)：执行DQL(select)语句</p>
<p>​    2.练习：</p>
<p>​        1.stu表 添加一条记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcase.jdbc;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class jbdc练习 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection connection &#x3D; null;</span><br><span class="line">        Statement stmt &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;1.注册驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">            &#x2F;&#x2F;2.定义sql</span><br><span class="line">            String sql &#x3D;&quot;insert into student values(11,&#39;小四&#39;,&#39;男&#39;,&#39;16&#39;,&#39;河南郑州&#39;)&quot;;</span><br><span class="line">            &#x2F;&#x2F;3.获取Connection对象</span><br><span class="line">            try &#123;</span><br><span class="line">                 connection &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;stu?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&quot;,&quot;root&quot;,&quot;8023&quot;);</span><br><span class="line">            &#x2F;&#x2F;4.获取执行sql的对象 Statement</span><br><span class="line">                 stmt &#x3D; connection.createStatement();</span><br><span class="line">            &#x2F;&#x2F;5.执行sql</span><br><span class="line">                int i &#x3D; stmt.executeUpdate(sql);&#x2F;&#x2F;影响行数</span><br><span class="line">            &#x2F;&#x2F;6.处理结果</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                if(i&gt;0)&#123;</span><br><span class="line">                    System.out.println(&quot;添加成功！&quot;);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    System.out.println(&quot;添加失败！&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            &#x2F;&#x2F;stmt.close();</span><br><span class="line">            &#x2F;&#x2F;7.释放资源</span><br><span class="line">            &#x2F;&#x2F;避免空指针异常</span><br><span class="line">            if(stmt!&#x3D;null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;避免空指针异常</span><br><span class="line">            if(connection!&#x3D;null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>​        2.stu表 修改记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcase.jdbc;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public class jdbc练习2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection connection&#x3D;null;</span><br><span class="line">        Statement stmt&#x3D;null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;1.注册驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">            &#x2F;&#x2F;2.获取连接对象</span><br><span class="line">            connection&#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;stu?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&quot;,&quot;root&quot;,&quot;8023&quot;);</span><br><span class="line">            &#x2F;&#x2F;3.定义sql</span><br><span class="line">            String sql &#x3D; &quot;update stu set score&#x3D;550 where id&#x3D;12&quot;;</span><br><span class="line">            &#x2F;&#x2F;4.获取执行sql对象</span><br><span class="line">            stmt&#x3D;connection.createStatement();</span><br><span class="line">            &#x2F;&#x2F;5.执行sql</span><br><span class="line">            int i &#x3D; stmt.executeUpdate(sql);</span><br><span class="line">            &#x2F;&#x2F;6.处理结果</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            if (i &gt; 0)&#123;</span><br><span class="line">                System.out.println(&quot;修改成功！&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.println(&quot;修改失败！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (stmt!&#x3D;null)&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (connection!&#x3D;null)&#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        3.stu表 删除记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcase.jdbc;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class jdbc练习3 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection connection&#x3D;null;</span><br><span class="line">        Statement stmt&#x3D;null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;1.注册驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">            &#x2F;&#x2F;2.获取连接对象</span><br><span class="line">            connection&#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;stu?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&quot;,&quot;root&quot;,&quot;8023&quot;);</span><br><span class="line">            &#x2F;&#x2F;3.定义sql</span><br><span class="line">            String sql &#x3D; &quot;delete from student where id&#x3D;11&quot;;</span><br><span class="line">            &#x2F;&#x2F;4.获取执行sql对象</span><br><span class="line">            stmt&#x3D;connection.createStatement();</span><br><span class="line">            &#x2F;&#x2F;5.执行sql</span><br><span class="line">            int i &#x3D; stmt.executeUpdate(sql);</span><br><span class="line">            &#x2F;&#x2F;6.处理结果</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            if (i &gt; 0)&#123;</span><br><span class="line">                System.out.println(&quot;删除成功！&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.println(&quot;删除失败！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (stmt!&#x3D;null)&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (connection!&#x3D;null)&#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        4.添加一个表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcase.jdbc;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class jdbc练习4 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection connection&#x3D;null;</span><br><span class="line">        Statement stmt&#x3D;null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;1.注册驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">            &#x2F;&#x2F;2.获取连接对象</span><br><span class="line">            connection&#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;stu?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&quot;,&quot;root&quot;,&quot;8023&quot;);</span><br><span class="line">            &#x2F;&#x2F;3.定义sql</span><br><span class="line">            String sql &#x3D; &quot;create table mine (id int , name varchar(20))&quot;;</span><br><span class="line">            &#x2F;&#x2F;4.获取执行sql对象</span><br><span class="line">            stmt&#x3D;connection.createStatement();</span><br><span class="line">            &#x2F;&#x2F;5.执行sql</span><br><span class="line">            int i &#x3D; stmt.executeUpdate(sql);</span><br><span class="line">            &#x2F;&#x2F;6.处理结果</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            if (i &gt; 0)&#123;</span><br><span class="line">                System.out.println(&quot;删除成功！&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.println(&quot;删除失败！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (stmt!&#x3D;null)&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (connection!&#x3D;null)&#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.ResultSet：结果集对象，封装查询结果</p>
<ul>
<li><p>next()：游标向下移动一行</p>
</li>
<li><p>getXxx：获取数据</p>
<ul>
<li><p>Xxx：代表数据类型      如：int getInt()，String getString()</p>
</li>
<li><p>参数</p>
<p>1.int：代表列的编号，从1开始  如：getString(1)</p>
<p>2.Sting:代表列名称。如：getDouble(“score”)</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcase.jdbc;</span><br><span class="line"></span><br><span class="line">import com.mysql.cj.protocol.Resultset;</span><br><span class="line"></span><br><span class="line">import javax.xml.transform.Result;</span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public class jdbc练习5 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection connection&#x3D;null;</span><br><span class="line">        Statement stmt&#x3D;null;</span><br><span class="line">        ResultSet r &#x3D; null ;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;1.注册驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">            &#x2F;&#x2F;2.获取连接对象</span><br><span class="line">            connection&#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;stu?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&quot;,&quot;root&quot;,&quot;8023&quot;);</span><br><span class="line">            &#x2F;&#x2F;3.定义sql</span><br><span class="line">            String sql &#x3D; &quot;select * from student&quot;;</span><br><span class="line">            &#x2F;&#x2F;4.获取执行sql对象</span><br><span class="line">            stmt&#x3D;connection.createStatement();</span><br><span class="line">            &#x2F;&#x2F;5.执行sql</span><br><span class="line">            r &#x3D; stmt.executeQuery(sql);</span><br><span class="line">            &#x2F;&#x2F;6.处理结果</span><br><span class="line">            &#x2F;&#x2F;6.1让游标向下移动一行</span><br><span class="line">            r.next();</span><br><span class="line">            &#x2F;&#x2F;6.2获取数据</span><br><span class="line">            int id &#x3D; r.getInt(1);</span><br><span class="line">            String name &#x3D; r.getString(&quot;name&quot;);</span><br><span class="line">            String sex &#x3D; r.getString(&quot;sex&quot;);</span><br><span class="line">            int age &#x3D; r.getInt(4);</span><br><span class="line">            String address &#x3D; r.getString(&quot;address&quot;);</span><br><span class="line"></span><br><span class="line">            System.out.println(id+&quot; &quot;+name+&quot; &quot;+sex+&quot; &quot;+age+&quot; &quot;+address);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (stmt!&#x3D;null)&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (connection!&#x3D;null)&#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (r!&#x3D;null)&#123;</span><br><span class="line">                    r.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<pre><code> 使用步骤：</code></pre>
<p>​        1.游标向下移动一行</p>
<p>​        2.判断是否有数据</p>
<p>​        3.获取数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (r.next()) &#123;</span><br><span class="line">              &#x2F;&#x2F;获取数据</span><br><span class="line">              &#x2F;&#x2F;6.1让游标向下移动一行</span><br><span class="line">              &#x2F;&#x2F;6.2获取数据</span><br><span class="line">              int id &#x3D; r.getInt(1);</span><br><span class="line">              String name &#x3D; r.getString(&quot;name&quot;);</span><br><span class="line">              String sex &#x3D; r.getString(&quot;sex&quot;);</span><br><span class="line">              int age &#x3D; r.getInt(4);</span><br><span class="line">              String address &#x3D; r.getString(&quot;address&quot;);</span><br><span class="line"></span><br><span class="line">              System.out.println(id + &quot; &quot; + name + &quot; &quot; + sex + &quot; &quot; + age + &quot; &quot; + address);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>练习</p>
<ul>
<li><p>查询student表的数据将其封装为对象，然后装在集合，返回。</p>
<p>1.定义student类</p>
<p>2.定义方法public List<student> findAll(){}</p>
<p>3.实现方法 select * from student;</p>
</li>
</ul>
</li>
</ul>
<p>5.PreparedStatement：执行sql的对象</p>
<ul>
<li><p>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接，会造成安全性问题</p>
<ul>
<li>输入用户随便，输入密码：a’ or ‘a’=’a</li>
<li>sql:select * from user where usename=XXX and password=XXX</li>
</ul>
</li>
<li><p>解决sql问题：使用PreparedStement对象来解决</p>
</li>
<li><p>预编译的SQL：参数使用?作为占位符</p>
</li>
</ul>
<h2 id="抽取JDBC工具类-：JDBCUtils"><a href="#抽取JDBC工具类-：JDBCUtils" class="headerlink" title="抽取JDBC工具类 ：JDBCUtils"></a>抽取JDBC工具类 ：JDBCUtils</h2><ul>
<li><p>目的：简化书写</p>
</li>
<li><p>分析：</p>
<p>1.注册驱动也抽取</p>
<p>2.抽取一个方法获取连接对象</p>
<ul>
<li><p>需求：不想传递参数（麻烦），还得保证工具类的通用性</p>
</li>
<li><p>解决：配置文件</p>
<p>jdbc.properties</p>
<p>​    url=</p>
<p>​    user=</p>
<p>​    password=</p>
</li>
</ul>
<p>3.抽取一个方法释放资源</p>
<p>JDBCutils</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcase.util;</span><br><span class="line"></span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class JDBCutils &#123;</span><br><span class="line">    private static String url;</span><br><span class="line">    private static String user;</span><br><span class="line">    private static String password;</span><br><span class="line">    private static String driver;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        &#x2F;&#x2F;读取资源文件，获取值</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;1.创建Properties集合类</span><br><span class="line">            Properties pr&#x3D;new Properties();</span><br><span class="line">            &#x2F;&#x2F;获取src路径下的文件的方式---&gt;ClassLoader类加载器th);</span><br><span class="line">            &#x2F;&#x2F;2.加载文件</span><br><span class="line">            pr.load(new FileReader(&quot;G:\\JDBC\\jdbc\\src\\jdbc.properties&quot;));</span><br><span class="line">            &#x2F;&#x2F;3.获取数据，赋值</span><br><span class="line">            url &#x3D; pr.getProperty(&quot;url&quot;);</span><br><span class="line">            user &#x3D; pr.getProperty(&quot;user&quot;);</span><br><span class="line">            password &#x3D; pr.getProperty(&quot;password&quot;);</span><br><span class="line">            driver &#x3D; pr.getProperty(&quot;driver&quot;);</span><br><span class="line">            &#x2F;&#x2F;4.注册驱动</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; catch (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Connection getConnection() throws SQLException&#123;</span><br><span class="line">        return DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void close(Statement stmt,Connection connection)&#123;</span><br><span class="line">        if(stmt!&#x3D;null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(connection!&#x3D;null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void close(ResultSet r, Statement stmt, Connection connection)&#123;</span><br><span class="line">        if(r!&#x3D;null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                r.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(stmt!&#x3D;null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(connection!&#x3D;null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JDBC练习</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcase.jdbc;</span><br><span class="line"></span><br><span class="line">import cn.itcase.student.student;</span><br><span class="line">import cn.itcase.util.JDBCutils;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class JDBC练习6 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        JDBC练习6 jdbc练习6 &#x3D; new JDBC练习6();</span><br><span class="line">        List&lt;student&gt; list &#x3D; jdbc练习6.findAll();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;student&gt; findAll() &#123;</span><br><span class="line">        Statement stmt &#x3D;null;</span><br><span class="line">        ResultSet r&#x3D;null;</span><br><span class="line">        Connection connection &#x3D;null;</span><br><span class="line">        List&lt;student&gt; list&#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;1.注册驱动</span><br><span class="line">            &#x2F;&#x2F;3.定义sql</span><br><span class="line">            connection &#x3D; JDBCutils.getConnection();</span><br><span class="line">            String sql &#x3D; &quot;select * from student&quot;;</span><br><span class="line">            &#x2F;&#x2F;4.获取执行sql的对象</span><br><span class="line">            stmt &#x3D; connection.createStatement();</span><br><span class="line">            &#x2F;&#x2F;5.执行sql</span><br><span class="line">            r &#x3D; stmt.executeQuery(sql);</span><br><span class="line">            &#x2F;&#x2F;6.遍历结果集，封装对象，装载集合</span><br><span class="line">            student student &#x3D; new student();</span><br><span class="line">            list &#x3D; new ArrayList&lt;student&gt;();</span><br><span class="line">            while (r.next()) &#123;</span><br><span class="line">                &#x2F;&#x2F;获取数据</span><br><span class="line">                int id &#x3D; r.getInt(1);</span><br><span class="line">                String name &#x3D; r.getString(2);</span><br><span class="line">                String sex &#x3D; r.getString(3);</span><br><span class="line">                int age &#x3D; r.getInt(4);</span><br><span class="line">                String address &#x3D; r.getString(5);</span><br><span class="line">                &#x2F;&#x2F;创建对象,并赋值</span><br><span class="line">                student.setId(id);</span><br><span class="line">                student.setName(name);</span><br><span class="line">                student.setSex(sex);</span><br><span class="line">                student.setAge(age);</span><br><span class="line">                student.setAddress(address);</span><br><span class="line">                &#x2F;&#x2F;装载集合return list;</span><br><span class="line">                list.add(student);</span><br><span class="line">                return list;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        JDBCutils.close(r,stmt,connection);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcase.student;</span><br><span class="line"></span><br><span class="line">public class student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private int age;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;student&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, sex&#x3D;&#39;&quot; + sex + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &quot;, address&#x3D;&#39;&quot; + address + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex &#x3D; sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address &#x3D; address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public student(int id, String name, String sex, int age, String address) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.sex &#x3D; sex;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.address &#x3D; address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>毛概复习</title>
    <url>/post/6522.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="毛概复习重点"><a href="#毛概复习重点" class="headerlink" title="毛概复习重点"></a>毛概复习重点</h1><a id="more"></a>

<h2 id="一：选择题"><a href="#一：选择题" class="headerlink" title="一：选择题"></a>一：选择题</h2><h2 id="单选题："><a href="#单选题：" class="headerlink" title="单选题："></a>单选题：</h2><h2 id="1-近代中国的社会性质和中国革命的历史任务，决定了中国革命的性质是？"><a href="#1-近代中国的社会性质和中国革命的历史任务，决定了中国革命的性质是？" class="headerlink" title="1.近代中国的社会性质和中国革命的历史任务，决定了中国革命的性质是？"></a>1.近代中国的社会性质和中国革命的历史任务，决定了中国革命的性质是？</h2><p>资产阶级民主主义革命</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213503.jpg" alt="img"></p>
<h2 id="5-中国特色社会主义理论体系的最新成果是？"><a href="#5-中国特色社会主义理论体系的最新成果是？" class="headerlink" title="5.中国特色社会主义理论体系的最新成果是？"></a>5.中国特色社会主义理论体系的最新成果是？</h2><p>习近平新时代中国特色社会主义思想。<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213522.jpg" alt="img"> </p>
<h2 id="6-新民主主义社会经济成分中，具有完全的社会主义性质的是？"><a href="#6-新民主主义社会经济成分中，具有完全的社会主义性质的是？" class="headerlink" title="6.新民主主义社会经济成分中，具有完全的社会主义性质的是？"></a>6.新民主主义社会经济成分中，具有完全的社会主义性质的是？</h2><p>国营经济</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213528.jpg" alt="img"></p>
<h2 id="8-当今时代的主题是？"><a href="#8-当今时代的主题是？" class="headerlink" title="8.当今时代的主题是？"></a>8.当今时代的主题是？</h2><p>和平与发展。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213531.jpg" alt="img"></p>
<h2 id="9-我们今天讲一切从实际出发，中国最大的实际就是？"><a href="#9-我们今天讲一切从实际出发，中国最大的实际就是？" class="headerlink" title="9.我们今天讲一切从实际出发，中国最大的实际就是？"></a>9.我们今天讲一切从实际出发，中国最大的实际就是？</h2><p>中国目前正处于并将长期处于社会主义初级阶段。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213535.jpg" alt="img"></p>
<h2 id="10-实现祖国和平统一的基础和前提是？"><a href="#10-实现祖国和平统一的基础和前提是？" class="headerlink" title="10.实现祖国和平统一的基础和前提是？"></a>10.实现祖国和平统一的基础和前提是？</h2><p>坚持一个中国原则。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213446.jpg" alt="img"></p>
<h2 id="11-党的十八大以来，我国在外交工作方面要构建新型国际关系的核心是？"><a href="#11-党的十八大以来，我国在外交工作方面要构建新型国际关系的核心是？" class="headerlink" title="11.党的十八大以来，我国在外交工作方面要构建新型国际关系的核心是？"></a>11.党的十八大以来，我国在外交工作方面要构建新型国际关系的核心是？</h2><p>合作共赢。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213447.jpg" alt="img"></p>
<h2 id="12-什么是“一化三改”"><a href="#12-什么是“一化三改”" class="headerlink" title="12.什么是“一化三改”"></a>12.什么是“一化三改”</h2><p>“一化”指的是逐步实现国家的社会主义工业化;“三改”指的是逐步实现国家对农业、手工业、资本主义工商业的社会主义改造。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816214726.png" alt="image-20200816214726126"></p>
<h2 id="13-我国“两个一百年”奋斗目标是？"><a href="#13-我国“两个一百年”奋斗目标是？" class="headerlink" title="13.我国“两个一百年”奋斗目标是？"></a>13.我国“两个一百年”奋斗目标是？</h2><p>第一个一百年，是到中国共产党成立100年时全面建成小康社会；</p>
<p>第二个一百年，是到新中国成立100年时建成富强民主文明和谐美丽的社会主义现代化强国。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816214825.png" alt="image-20200816214825887"></p>
<h2 id="17-社会主义的本质是什么？中国特色社会主义最本质的特征是？"><a href="#17-社会主义的本质是什么？中国特色社会主义最本质的特征是？" class="headerlink" title="17.社会主义的本质是什么？中国特色社会主义最本质的特征是？"></a>17.社会主义的本质是什么？中国特色社会主义最本质的特征是？</h2><p>本质：解放生产力、发展生产力。消灭剥削、消除两极分化、最终达到共同富裕。</p>
<p> 特征：中国共产党的领导。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816215751.png" alt="image-20200816215751692"></p>
<h2 id="19-中国特色社会主义建设的总体布局是什么？"><a href="#19-中国特色社会主义建设的总体布局是什么？" class="headerlink" title="19.中国特色社会主义建设的总体布局是什么？"></a>19.中国特色社会主义建设的总体布局是什么？</h2><p>经济建设、政治建设、文化建设、社会建设、生态文明建设“五位一体”。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222229.png" alt="image-20200816222229387"></p>
<h2 id="20-四个全面战略布局是什么？"><a href="#20-四个全面战略布局是什么？" class="headerlink" title="20.四个全面战略布局是什么？"></a>20.四个全面战略布局是什么？</h2><p>全面建成小康社会、全面深化改革、全面依法治国、全面从严治党。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222312.png" alt="image-20200816222312883"></p>
<h2 id="21-新民主主义革命理论的核心问题是？"><a href="#21-新民主主义革命理论的核心问题是？" class="headerlink" title="21.新民主主义革命理论的核心问题是？"></a>21.新民主主义革命理论的核心问题是？</h2><p>无产阶级的领导权。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222423.png" alt="image-20200816222423761"></p>
<h2 id="22-毛泽东在《论十大关系》中论述的第一大关系是？"><a href="#22-毛泽东在《论十大关系》中论述的第一大关系是？" class="headerlink" title="22.毛泽东在《论十大关系》中论述的第一大关系是？"></a>22.毛泽东在《论十大关系》中论述的第一大关系是？</h2><p>重工业和轻工业、农业的关系。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222436.png" alt="image-20200816222436618"></p>
<h2 id="24-邓小平指出：“贫穷不是社会主义，社会主义要消灭贫穷。”这个判断明确了？"><a href="#24-邓小平指出：“贫穷不是社会主义，社会主义要消灭贫穷。”这个判断明确了？" class="headerlink" title="24.邓小平指出：“贫穷不是社会主义，社会主义要消灭贫穷。”这个判断明确了？"></a>24.邓小平指出：“贫穷不是社会主义，社会主义要消灭贫穷。”这个判断明确了？</h2><p>社会主义本质的要求。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222515.png" alt="image-20200816222515786"></p>
<h2 id="25-加强党的建设应该放在首位的是？"><a href="#25-加强党的建设应该放在首位的是？" class="headerlink" title="25.加强党的建设应该放在首位的是？"></a>25.加强党的建设应该放在首位的是？</h2><p>思想建设。<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222533.png" alt="image-20200816222533107"></p>
<h2 id="26-我国对外开放的基本立足点是？"><a href="#26-我国对外开放的基本立足点是？" class="headerlink" title="26.我国对外开放的基本立足点是？"></a>26.我国对外开放的基本立足点是？</h2><p>独立自主、自力更生。<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222552.png" alt="image-20200816222552404"></p>
<h2 id="27-当前我国经济已经由高速增长阶段转向怎样的增长阶段？"><a href="#27-当前我国经济已经由高速增长阶段转向怎样的增长阶段？" class="headerlink" title="27.当前我国经济已经由高速增长阶段转向怎样的增长阶段？"></a>27.当前我国经济已经由高速增长阶段转向怎样的增长阶段？</h2><p>高质量发展。<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222614.png" alt="image-20200816222614260"></p>
<h2 id="28-当今时代的主题是？"><a href="#28-当今时代的主题是？" class="headerlink" title="28.当今时代的主题是？"></a>28.当今时代的主题是？</h2><p>和平与发展。</p>
<h2 id="29-引领发展的第一动力，建设现代化经济体系的战略支撑是？"><a href="#29-引领发展的第一动力，建设现代化经济体系的战略支撑是？" class="headerlink" title="29.引领发展的第一动力，建设现代化经济体系的战略支撑是？"></a>29.引领发展的第一动力，建设现代化经济体系的战略支撑是？</h2><p>创新。<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222629.png" alt="image-20200816222629450"></p>
<h2 id="30-一个国家、一个民族发展中更基本、更深沉、更持久的力量是？"><a href="#30-一个国家、一个民族发展中更基本、更深沉、更持久的力量是？" class="headerlink" title="30.一个国家、一个民族发展中更基本、更深沉、更持久的力量是？"></a>30.一个国家、一个民族发展中更基本、更深沉、更持久的力量是？</h2><p>文化自信。<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222644.png" alt="image-20200816222644130"></p>
<h2 id="34-社会主义核心价值观中，国家层面的价值追求是？"><a href="#34-社会主义核心价值观中，国家层面的价值追求是？" class="headerlink" title="34.社会主义核心价值观中，国家层面的价值追求是？"></a>34.社会主义核心价值观中，国家层面的价值追求是？</h2><p>富强、民主、文明、和谐。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222736.png" alt="image-20200816222736019"></p>
<h2 id="38-近代中国革命的首要对象是？"><a href="#38-近代中国革命的首要对象是？" class="headerlink" title="38.近代中国革命的首要对象是？"></a>38.近代中国革命的首要对象是？</h2><p>帝国主义。<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222902.png" alt="image-20200816222902570"></p>
<h2 id="39-标志着党探索中国社会主义建设道路的良好开端是？"><a href="#39-标志着党探索中国社会主义建设道路的良好开端是？" class="headerlink" title="39.标志着党探索中国社会主义建设道路的良好开端是？"></a>39.标志着党探索中国社会主义建设道路的良好开端是？</h2><p>《论十大关系》<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222917.png" alt="image-20200816222917052"></p>
<h2 id="41-生态文明的核心是？"><a href="#41-生态文明的核心是？" class="headerlink" title="41.生态文明的核心是？"></a>41.生态文明的核心是？</h2><p>统筹人与自然的和谐发展建设生态文明要遵循可持续发展的原则</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817155637.png" alt="image-20200817155425340"></p>
<h2 id="42-中国特色社会主义理论体系的开篇之作是？"><a href="#42-中国特色社会主义理论体系的开篇之作是？" class="headerlink" title="42.中国特色社会主义理论体系的开篇之作是？"></a>42.中国特色社会主义理论体系的开篇之作是？</h2><p>邓小平理论。<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817160026.png" alt="image-20200817160026311"></p>
<h2 id="44-科学发展观的科学内涵是什么？第一要义是？"><a href="#44-科学发展观的科学内涵是什么？第一要义是？" class="headerlink" title="44.科学发展观的科学内涵是什么？第一要义是？"></a>44.科学发展观的科学内涵是什么？第一要义是？</h2><p>内涵：科学发展观。 第一要义：发展。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817155838.png" alt="image-20200817155838712"></p>
<h2 id="55-社会主义核心价值观中，社会层面的价值追求是指？"><a href="#55-社会主义核心价值观中，社会层面的价值追求是指？" class="headerlink" title="55.社会主义核心价值观中，社会层面的价值追求是指？"></a><strong>55.社会主义核心价值观中，社会层面的价值追求是指？</strong></h2><p>自由、平等、公正、法制</p>
<h2 id="46-人民军队完全区别于一切旧军队的政治特质和根本优势是？"><a href="#46-人民军队完全区别于一切旧军队的政治特质和根本优势是？" class="headerlink" title="46.人民军队完全区别于一切旧军队的政治特质和根本优势是？"></a>46.人民军队完全区别于一切旧军队的政治特质和根本优势是？</h2><p>党对军队绝对领导的根本原则和制度，发端于南昌起义，奠基于三湾改编，定型于古田会议，是人民军队完全区别于一切旧军队的政治特质和根本优势。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817155707.png" alt="image-20200817155707767"></p>
<h2 id="49-全面建成小康社会的决胜期是？"><a href="#49-全面建成小康社会的决胜期是？" class="headerlink" title="49.全面建成小康社会的决胜期是？"></a>49.全面建成小康社会的决胜期是？</h2><p>2020年<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817155654.png" alt="image-20200817155654441"></p>
<h2 id="50-社会主义基本制度在中国初步确立的标志是？"><a href="#50-社会主义基本制度在中国初步确立的标志是？" class="headerlink" title="50.社会主义基本制度在中国初步确立的标志是？"></a>50.社会主义基本制度在中国初步确立的标志是？</h2><p>1956年完成对农业、手工业和资本主义商业的社会主义改造</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817155902.png" alt="image-20200817155902103"></p>
<h2 id="51-邓小平理论回答的首要的基本的理论问题是？"><a href="#51-邓小平理论回答的首要的基本的理论问题是？" class="headerlink" title="51.邓小平理论回答的首要的基本的理论问题是？"></a>51.邓小平理论回答的首要的基本的理论问题是？</h2><p>什么是社会主义，怎样建设社会主义？</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161120.png" alt="image-20200817161120886"></p>
<h2 id="52-党的十八大提出，我国将在哪一年实现全面建成小康社会的奋斗目标？"><a href="#52-党的十八大提出，我国将在哪一年实现全面建成小康社会的奋斗目标？" class="headerlink" title="52.党的十八大提出，我国将在哪一年实现全面建成小康社会的奋斗目标？"></a>52.党的十八大提出，我国将在哪一年实现全面建成小康社会的奋斗目标？</h2><p>2020年 </p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161145.png" alt="image-20200817161145351"></p>
<h2 id="53-2018版的新教材充分反映马克思主义中国化各个理论成果的主要内容，突出了什么样的理论逻辑和历史逻辑？"><a href="#53-2018版的新教材充分反映马克思主义中国化各个理论成果的主要内容，突出了什么样的理论逻辑和历史逻辑？" class="headerlink" title="53.2018版的新教材充分反映马克思主义中国化各个理论成果的主要内容，突出了什么样的理论逻辑和历史逻辑？"></a><strong>53.2018版的新教材充分反映马克思主义中国化各个理论成果的主要内容，突出了什么样的理论逻辑和历史逻辑？</strong></h2><p> <img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161830.png" alt="image-20200817161829979"></p>
<h2 id="57-中国新时期的强军目标是建设一支什么样的人民军队？"><a href="#57-中国新时期的强军目标是建设一支什么样的人民军队？" class="headerlink" title="57.中国新时期的强军目标是建设一支什么样的人民军队？"></a><strong>57.中国新时期的强军目标是建设一支什么样的人民军队？</strong></h2><p>听党指挥、能打胜仗、作风优良的人民军队</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161558.png" alt="image-20200817161558166"></p>
<h2 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h2><h2 id="2-马克思主义中国化形成的两大理论成果是？"><a href="#2-马克思主义中国化形成的两大理论成果是？" class="headerlink" title="2.马克思主义中国化形成的两大理论成果是？"></a>2.马克思主义中国化形成的两大理论成果是？</h2><p>毛泽东思想和中国特色社会主义理论体系。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213507.jpg" alt="img"></p>
<h2 id="7-新民主主义革命的三大法宝是？新民主主义革命的动力包括？"><a href="#7-新民主主义革命的三大法宝是？新民主主义革命的动力包括？" class="headerlink" title="7.新民主主义革命的三大法宝是？新民主主义革命的动力包括？"></a>7.新民主主义革命的三大法宝是？新民主主义革命的动力包括？</h2><h3 id="90-多选题"><a href="#90-多选题" class="headerlink" title="90%多选题"></a>90%多选题</h3><p>统一战线，武装斗争，党的建设</p>
<p>工人阶级、农民阶级、城市小资产阶级和民族资产阶级。</p>
<h2 id="14-什么是四个自信？"><a href="#14-什么是四个自信？" class="headerlink" title="14.什么是四个自信？"></a>14.什么是四个自信？</h2><p>道路自信、理论自信、制度自信、文化自信</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816215550.png" alt="image-20200816215550846"></p>
<h2 id="15-什么是和平赎买？"><a href="#15-什么是和平赎买？" class="headerlink" title="15.什么是和平赎买？"></a>15.什么是和平赎买？</h2><p>对资产阶级的生产资料通过和平方式并采取有偿办法实行国有化，在一定年限内让资本家从企业经营所得中获得一部分利润的政策。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816215700.png" alt="image-20200816215700425"></p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816215715.png" alt="image-20200816215715509"></p>
<h2 id="16-什么是一国两制"><a href="#16-什么是一国两制" class="headerlink" title="16.什么是一国两制?"></a>16.什么是一国两制?</h2><p>指在一个中国的前提下，国家的主体坚持社会主义制度，香港、澳门、台湾保持原有的资本主义制度长期不变。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816215731.png" alt="image-20200816215731485"></p>
<h2 id="31-什么是四项基本原则？"><a href="#31-什么是四项基本原则？" class="headerlink" title="31.什么是四项基本原则？"></a>31.什么是四项基本原则？</h2><p>即坚持社会主义道路，坚持无产阶级专政（人民民主专政），坚持共产党的领导，坚持马列主义、毛泽东思想。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817162401.png" alt="image-20200817162401870"></p>
<h2 id="32-过渡时期的“一体两翼”是指？"><a href="#32-过渡时期的“一体两翼”是指？" class="headerlink" title="32.过渡时期的“一体两翼”是指？"></a>32.过渡时期的“一体两翼”是指？</h2><p>“一化”即逐步实现国家社会主义工业化,就是要进行社会主义改造,这是主体;</p>
<p>“三改”即逐步实现国家对农业、手工业和资本主义工商业的社会主义改造,这是“两翼”</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222703.png" alt="image-20200816222703538"></p>
<h2 id="33-习近平总书记指出，实现中国梦，必须走什么路？弘扬和凝聚？"><a href="#33-习近平总书记指出，实现中国梦，必须走什么路？弘扬和凝聚？" class="headerlink" title="33.习近平总书记指出，实现中国梦，必须走什么路？弘扬和凝聚？"></a>33.习近平总书记指出，实现中国梦，必须走什么路？弘扬和凝聚？</h2><p>走中国道路，弘扬中国精神，凝聚中国力量。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222724.png" alt="image-20200816222724130"></p>
<h2 id="35-党的十九大提出，要以“一带一路”建设为重点，坚持引进来和走出去并重，遵循的原则是？"><a href="#35-党的十九大提出，要以“一带一路”建设为重点，坚持引进来和走出去并重，遵循的原则是？" class="headerlink" title="35.党的十九大提出，要以“一带一路”建设为重点，坚持引进来和走出去并重，遵循的原则是？"></a>35.党的十九大提出，要以“一带一路”建设为重点，坚持引进来和走出去并重，遵循的原则是？</h2><p>共商共建共享。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222751.png" alt="image-20200816222751329"></p>
<h2 id="37-巩固和发展爱国统一战线，中国共产党同各民主党派进行合作的方针是？"><a href="#37-巩固和发展爱国统一战线，中国共产党同各民主党派进行合作的方针是？" class="headerlink" title="37.巩固和发展爱国统一战线，中国共产党同各民主党派进行合作的方针是？"></a>37.巩固和发展爱国统一战线，中国共产党同各民主党派进行合作的方针是？</h2><p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222834.png" alt="image-20200816222834323"></p>
<p>长期共存、互相监督、肝胆相照、荣辱与共。</p>
<h2 id="40-在各个领域和方面都要突出总揽全局、协调各方的领导核心地位的是？"><a href="#40-在各个领域和方面都要突出总揽全局、协调各方的领导核心地位的是？" class="headerlink" title="40.在各个领域和方面都要突出总揽全局、协调各方的领导核心地位的是？"></a>40.在各个领域和方面都要突出总揽全局、协调各方的领导核心地位的是？</h2><p>党的领导<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222957.png" alt="image-20200816222957452"></p>
<h2 id="47-我国社会主义初级阶段的主要矛盾是生产力和生产关系的矛盾？"><a href="#47-我国社会主义初级阶段的主要矛盾是生产力和生产关系的矛盾？" class="headerlink" title="47.我国社会主义初级阶段的主要矛盾是生产力和生产关系的矛盾？"></a>47.我国社会主义初级阶段的主要矛盾是生产力和生产关系的矛盾？</h2><p>不是。是人民日益增长的物质文化需要同落后的社会生产之间的矛盾</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817155728.png" alt="image-20200817155728227"></p>
<h2 id="48-从1949年建国到今天，我国不同时期的主要矛盾及根本任务是什么？"><a href="#48-从1949年建国到今天，我国不同时期的主要矛盾及根本任务是什么？" class="headerlink" title="48.从1949年建国到今天，我国不同时期的主要矛盾及根本任务是什么？"></a>48.从1949年建国到今天，我国不同时期的主要矛盾及根本任务是什么？</h2><p>社会主义初级阶段：主要矛盾是人民日益增长的物质文化需要同落后的社会生产之间的矛盾。根本任务：集中力量发展生产力。<br>中国新时代阶段：人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾。 根本任务：调整经济结构。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817155801.png" alt="image-20200817155801424"></p>
<h2 id="58-走中国特色社会主义政治发展道路，必须坚持哪三者有机统一？"><a href="#58-走中国特色社会主义政治发展道路，必须坚持哪三者有机统一？" class="headerlink" title="58.走中国特色社会主义政治发展道路，必须坚持哪三者有机统一？"></a><strong>58.走中国特色社会主义政治发展道路，必须坚持哪三者有机统一？</strong></h2><p>党的领导、人民当家作主、依法治国</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161718.png" alt="image-20200817161718061"></p>
<h2 id="59-构建人类命运共同体思想的核心是建设什么样的世界？"><a href="#59-构建人类命运共同体思想的核心是建设什么样的世界？" class="headerlink" title="59.构建人类命运共同体思想的核心是建设什么样的世界？"></a>59.构建人类命运共同体思想的核心是建设什么样的世界？</h2><p>持久和平、普遍安全、共同繁荣、开放包容、清洁美丽</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161651.png" alt="image-20200817161651142"></p>
<h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><h2 id="简答大题：3-毛泽东思想形成和发展的社会历史条件是什么？"><a href="#简答大题：3-毛泽东思想形成和发展的社会历史条件是什么？" class="headerlink" title="简答大题：3.毛泽东思想形成和发展的社会历史条件是什么？"></a>简答大题：3.毛泽东思想形成和发展的社会历史条件是什么？</h2><p>第一，20世纪前中期世界和中国政局的变动，是毛泽东思想产生和形成的时代背景。</p>
<p>第二，近现代中国社会和革命运动的发展，是毛泽东思想产生和形成的客观需要。</p>
<p>第三，新的社会生产力的增长和工人运动的发展，是毛泽东思想产生和形成的物质基础。</p>
<p>第四，新文化运动的兴起和马克思列宁主义的传入与传播，是毛泽东思想产生和形成的思想理论条件。</p>
<p>第五，中国共产党领导的人民革命，是毛泽东思想产生和形成的实践基础</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213514.jpg" alt="img"></p>
<h2 id="大题：4-毛泽东思想的主要内容包括-毛泽东思想活的灵魂是？"><a href="#大题：4-毛泽东思想的主要内容包括-毛泽东思想活的灵魂是？" class="headerlink" title="大题：4.毛泽东思想的主要内容包括?毛泽东思想活的灵魂是？"></a>大题：4.毛泽东思想的主要内容包括?毛泽东思想活的灵魂是？</h2><p><strong>主要内容</strong>：</p>
<p>（1） 新民主主义革命理论。是反映新民主主义革命客观规律的完备的理论形态。</p>
<p>（2） 社会主义革命和社会主义建设理论。毛泽东在新民主主义革命胜利和社会主义制度建立后，分别提出了诸多正确的思想主张，对中国特色社会主义建设道理的探索具有重要的指导意义。</p>
<p>（3） 革命军队建设和军事战略的理论。系统地解决了如何把以农民为主要成分的革命军队建设成一支无产阶级性质的、具有严格纪律的、同人民群众保持亲密联系的新型人民军队的问题。</p>
<p>（4） 政策和策略的理论。毛泽东精辟地论证了革命斗争中政策和策略问题的极端重要性，指出政策和策略是党的生命，必须根据政治形势、阶级关系和实际情况及其变化制定党的政策，把原则性和灵活性结合起来。</p>
<p>（5） 思想政治工作和文化工作的理论。毛泽东根据“一定的文化是一定社会的政治和经济的反映，又给予伟大影响和作用于一定社会的政治和经济，而经济是基础，政治则是经济的集中的表现”这个基本观点，提出了许多具有长远意义的重要思想。</p>
<p>（6） 党的建设理论。党的三大优良作风是：理论与实践相结合的作风，和人民群众紧密地联系在一起的作风，自我批评的作风。两个务必是：务必继续保持谦虚、谨慎、不骄、不躁的作风，务必继续保持艰苦奋斗的作风。</p>
<p><strong>活的灵魂：</strong></p>
<p>（1） 实事求是。就是一切从实际出发，理论联系实际，坚持在实践中检验真理和发展真理。这是毛泽东思想的<strong>精髓。</strong></p>
<p>（2） 群众路线。就是一切为了群众，一切依靠群众，从群众中来，到群众中去，把党的正确主张变为群众的自觉行动。这是中国共产党的<strong>根本路线</strong>。</p>
<p>（3） 独立自主。就是坚持独立思考，走自己的路，坚定不移地维护民族独立，捍卫国家主权，把立足点放在依靠自己的力量的基础上，同时积极争取外援，开展国际经济文化交流，学习外国一切对我们有益的先进事物。这是中国共产党进行革命与建设的<strong>基本立足点</strong>。</p>
<p>90%大题</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816213519.jpg" alt="img"></p>
<h2 id="18-三个代表”重要思想的核心观点是什么？"><a href="#18-三个代表”重要思想的核心观点是什么？" class="headerlink" title="18.三个代表”重要思想的核心观点是什么？"></a>18.三个代表”重要思想的核心观点是什么？</h2><p>中国共产党必须始终代表中国先进生产力的发展要求</p>
<p>中国共产党必须始终代表中国先进文化的前进方向</p>
<p>中国共产党必须始终代表中国最广大人民的根本利益</p>
<p>（1）始终代表中国先进生产力的发展要求。</p>
<p>A. 社会主义的根本任务是发展社会生产力，马克思主义执政党必须高度重视解放和发展生产力。始终代表中国先进生产力的发展要求，大力促进先进生产力的发展，是我们党站在时代前列，保持先进性的根本体现和根本要求。</p>
<p>B.广大工人、农民和知识分子始终是推动我国先进生产力发展和社会全面进步的根本力量。</p>
<p>C.人是生产力中最活跃的因素。</p>
<p>D.科学技术是第一生产力，是先进生产力的集中体现和主要标志。科技进步和创新式发展生产力的决定因素。</p>
<p>E.科学的本质是创新，只有大力推进知识创新、科技创新、才能实现技术的跨越式发展。</p>
<p>（2）始终代表中国先进文化的前进方向。</p>
<p>A.发展社会主义先进文化，就是建设社会主义精神文明。</p>
<p>B.发展社会主义先进文化，就是发展面向现代化、面向世界、面向未来的、民族的科学的大众的社会主义文化。</p>
<p>C.发展社会主义先进文化，必须弘扬民族精神。</p>
<p>D,发展社会主义先进文化，必须加强社会主义思想道德建设，这是发展先进文化的重要内容和中心环节。</p>
<p>E.发展社会主义先进文化，必须做好思想政治工作。思想政治工作是经济工作和其他一切工作的生命线。</p>
<p>（3）始终代表中国最广大人民的根本利益。</p>
<p>人民是我们国家的主人，是决定我国前途和命运的根本力量，是历史的真正创造者。我们全部工作的出发点和落脚点，就是不断实现好维护好发展好最广大人民的根本利益。</p>
<p>A. 我们党来自于人民，植根于人民。服务于人民。党的全部任务和责任，就是为实现人民群众的根本利益而奋斗。</p>
<p>B. 我们党始终坚持人民的利益高于一切。党的一切工作，必须以最广大人民的根本利益为最高标准。</p>
<p>10%选择题： <img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816220810.png" alt="image-20200816220810901">90%大题</p>
<h2 id="36-如何建设“一带一路”？"><a href="#36-如何建设“一带一路”？" class="headerlink" title="36.如何建设“一带一路”？"></a>36.如何建设“一带一路”？</h2><p>政策沟通：沿线各国可以就经济发展战略和对策进行充分交流对接，共同制定推进区域合作的规划和措施。</p>
<p>资金融通：扩大沿线国家双边本币互换、结算的范围和规模；共同推进亚洲基础设施投资银行、金砖国家开发银行筹建，有关各方就建立上海合作组织融资机构开展磋商。</p>
<p>设施联通：交通方面，优先打通缺失路段，畅通瓶颈路段，提升道路通达水平；能源方面，推进跨境电力与输电通道建设，积极开展区域电网升级改造合作。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222816.png" alt="image-20200816222816475"></p>
<h2 id="23-十九大的主题是？"><a href="#23-十九大的主题是？" class="headerlink" title="23.十九大的主题是？"></a>23.十九大的主题是？</h2><p>不忘初心，牢记使命，高举中国特色社会主义伟大旗帜，决胜全面建成小康社会，夺取新时代中国特色社会主义伟大胜利，为实现中华民族伟大复兴的中国梦不懈奋斗。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200816222459.png" alt="image-20200816222459474"></p>
<h2 id="43-新民主主义社会是一个独立的社会形态吗？"><a href="#43-新民主主义社会是一个独立的社会形态吗？" class="headerlink" title="43.新民主主义社会是一个独立的社会形态吗？"></a>43.新民主主义社会是一个独立的社会形态吗？</h2><p>不是<img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817155930.png" alt="image-20200817155930305"></p>
<h2 id="45-如何理解习近平强军思想的主要内容？"><a href="#45-如何理解习近平强军思想的主要内容？" class="headerlink" title="45.如何理解习近平强军思想的主要内容？"></a>45.如何理解习近平强军思想的主要内容？</h2><p>习近平的强军思想作为一个科学的理论体系，它实际上是深刻回答了在我们国家由大向强、逐步走向世界舞台中央这样一个时代进程中，我们人民军队听谁指挥、怎样筑牢军魂、为什么要强军、怎么强军、打什么仗、怎样打胜仗这样一些基本问题重大问题，它丰富和发展了我们党建军、治军的一些指导思想、方针原则，也就是它引领着我们人民军队走上了强军的新征程。</p>
<p>一是强国必须强军,巩固国防和强大人民军队是新时代坚持和发展中国特色社会主义,实现“两个一百年”奋斗目标、实现中华民族伟大复兴的战略支撑,必须努力建设与我国国际地位相称、与国家安全和发展利益相适应的巩固国防和强大军队。二是党在新时代的强军目标是建设一支听党指挥、能打胜仗、作风优良的人民军队,必须同国家现代化进程相一致,全面建设世界一流军队。三是党对军队的绝对领导是人民军队建军之本、强军之魂,必须全面贯彻党领导军队的一系列根本原则和制度,确保部队绝对忠诚、绝对纯洁、绝对可靠。四是军队是要准备打仗的,必须聚焦能打仗、打胜仗,创新发展军事战略指导,构建中国特色现代作战体系,全面提高新时代备战打仗能力,有效塑造态势、管控危机、遏制战争、打赢战争。五是作风优良是我军鲜明特色和政治优势,必须加强作风建设、纪律建设,坚定不移正风肃纪、反腐惩恶,大力弘扬我党我军光荣传统和优良作风,永葆人民军队性质、宗旨、本色。六是推进强军事业必须坚持政治建军、改革强军、科技兴军、依法治军,更加注重聚焦实战、更加注重创新驱动、更加注重体系建设、更加注重集约高效、更加注重军民融合,全面提高革命化现代化正规化水平。七是改革是强军的必由之路,必须推进军队组织形态现代化,构建中国特色现代军事力量体系,完善中国特色社会主义军事制度。八是创新是引领发展的第一动力,必须坚持向科技创新要战斗力,统筹推进军事理论、技术、组织、管理、文化等各方面创新,建设创新型人民军队。九是现代化军队必须构建中国特色军事法治体系,推进治军方式根本性变革,提高国防和军队建设法治化水平。十是军民融合发展是兴国之举、强军之策,必须坚持发展和安全兼顾、富国和强军统一,形成全要素、多领域、高效益军民融合深度发展格局,构建一体化的国家战略体系和能力。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817155628.png" alt="image-20200817155442914"></p>
<h2 id="54-在1992年南方谈话中，邓小平明确地提出了“三个有利于”标准，它的具体内容是？"><a href="#54-在1992年南方谈话中，邓小平明确地提出了“三个有利于”标准，它的具体内容是？" class="headerlink" title="54.在1992年南方谈话中，邓小平明确地提出了“三个有利于”标准，它的具体内容是？"></a><strong>54.在1992年南方谈话中，邓小平明确地提出了“三个有利于”标准，它的具体内容是？</strong></h2><p>是否有利于发展社会主义社会的生产力、是否有利于增强社会主义国家的综合国力、是否有利于提高人民的生活水平。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161208.png" alt="image-20200817161208256"></p>
<h2 id="56-当前中国讲文化自信，其含义是？"><a href="#56-当前中国讲文化自信，其含义是？" class="headerlink" title="56.当前中国讲文化自信，其含义是？"></a><strong>56.当前中国讲文化自信，其含义是？</strong></h2><p>一是对马克思主义文化的自信，二是对中国优秀传统文化的自信。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161453.png" alt="image-20200817161453522"></p>
<h2 id="60-新民主主义基本纲领的主要内容是什么？"><a href="#60-新民主主义基本纲领的主要内容是什么？" class="headerlink" title="60.新民主主义基本纲领的主要内容是什么？"></a><strong>60.新民主主义基本纲领的主要内容是什么？</strong></h2><p>包括新民主主义的政治纲领、新民主主义的经济纲领和新民主主义的文化纲领。新民主主义的政治纲领：推翻帝国主义和封建主义的统治，建立一个无产阶级领导的、以工农联盟为基础的、各革命阶级联合专政的新民主主义的共和国。新民主主义的经济纲领：没收封建地主阶级的土地归农民所有，没收官僚资产阶级的垄断资本归新民主主义的国家所有，保护民族工商业。新民主主义的文化纲领：无产阶级领导的人民大众的反帝反封建的文化，即民族的科学的大众的文化。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161617.png" alt="image-20200817161617254"></p>
<h2 id="61-中国确立社会主义基本制度的重大意义是什么？"><a href="#61-中国确立社会主义基本制度的重大意义是什么？" class="headerlink" title="61.中国确立社会主义基本制度的重大意义是什么？"></a><strong>61.中国确立社会主义基本制度的重大意义是什么？</strong></h2><p>社会主义基本制度的确立是中国历史上最深刻最伟大的社会变革，为当代中国一切发展进步奠定了制度基础，也为中国特色社会主义制度的创新和发展提供了重要前提。</p>
<p>（1） 社会主义基本制度的确立，极大地提高了工人阶级和广大劳动人民的积极性、创造性，极大地促进了我国社会生产力的发展。</p>
<p>（2） 社会主义基本制度的确立，使广大劳动人民真正成为国家的主人。极大地巩固和扩大了工人阶级领导的、以工农联盟为基础的人民民主专政国家政权的阶级基础和经济基础。</p>
<p>（3） 社会主义基本制度的确立，使中国进入了社会主义社会，是世界社会主义发展史上又一个历史性的伟大胜利。它进一步改变了世界政治经济格局，增强了社会主义力量，对维护世界和平产生了积极影响。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817160836.png" alt="image-20200817160836481"></p>
<h2 id="62-如何认识邓小平理论形成的社会历史条件？"><a href="#62-如何认识邓小平理论形成的社会历史条件？" class="headerlink" title="62.如何认识邓小平理论形成的社会历史条件？"></a><strong>62.如何认识邓小平理论形成的社会历史条件？</strong></h2><p>（1）和平与发展成为时代主题是邓小平理论形成的时代背景。20世纪70年代，西方资本主义遭遇严重的经济危机，战后美苏两极对抗的冷战格局出现重大变化，长期被冷战阴云笼罩的世界各国人民对和平的渴望更加强烈，求和平谋发展逐渐成为世界各国人民的普遍愿望。邓小平敏锐地把握了国际形势的重大变化，对时代主题的转换做出了科学判断。</p>
<p>（2）社会主义建设的经验教训是邓小平理论形成的历史根据。新中国成立后，我们顺利地恢复了国民经济，走出了一条具有鲜明中国特色的社会主义改造道路，但也犯了不少错误。十一届三中全会以后，以邓小平为主要代表的中国共产党人，领导全党和全国人民，果断地纠正了这些错误，深刻地分析了它出现的原因，同时又坚决地维护和继承了过去在理论上和实践上所取得的一切积极成果。</p>
<p>（3）改革开放和现代化建设的实践是邓小平理论形成的现实依据。我国改革开放和社会主义现代化建设的崭新实践，是人民群众生机勃勃的伟大创造，是理论发展的源泉。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817160852.png" alt="image-20200817160852840"></p>
<h2 id="63-如何认识中国特色社会主义进入新时代？"><a href="#63-如何认识中国特色社会主义进入新时代？" class="headerlink" title="63.如何认识中国特色社会主义进入新时代？"></a><strong>63.如何认识中国特色社会主义进入新时代？</strong></h2><p>（1）从中华民族复兴的进程来看，意味着历经磨难的中华民族实现了从站起来，富起来到强起来的伟大飞跃，迎来了中华民族伟大复兴的前景。</p>
<p>（2）从科学社会主义发展进程来看，意味着科学社会主义在21世纪的中国焕发了强大的生命活力，在世界上高高举起了中国特色社会主义的伟大旗帜。</p>
<p>（3）从人类文明进程来看，意味着中国特色社会主义道路、制度、理论、文化不断发展，拓宽了发展中国家进入社会主义新时代途径。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817160918.png" alt="image-20200817160917864"></p>
<h2 id="64-如何把握新时代中国特色社会主义发展的战略安排？"><a href="#64-如何把握新时代中国特色社会主义发展的战略安排？" class="headerlink" title="64.如何把握新时代中国特色社会主义发展的战略安排？"></a><strong>64.如何把握新时代中国特色社会主义发展的战略安排？</strong></h2><p><strong>新时代中国特色社会主义发展的战略安排，顺应了我国社会生产力的发展趋势和要求；把握了我国社会主要矛盾的变化；提升了我国参与国际竞争的能力和信心。</strong></p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817160942.png" alt="image-20200817160942575"></p>
<h2 id="65-如何正确理解坚持党的领导、人民当家作主和依法治国的有机统一？"><a href="#65-如何正确理解坚持党的领导、人民当家作主和依法治国的有机统一？" class="headerlink" title="65.如何正确理解坚持党的领导、人民当家作主和依法治国的有机统一？"></a><strong>65.如何正确理解坚持党的领导、人民当家作主和依法治国的有机统一？</strong></h2><p>1.中国共产党的领导是人民当家作主和依法治国的根本保证。在我国这样一个发展中大国,离开了共产党的领导,就不可能把全国人民的力量和意志凝聚起来,发展社会主义民主也就无从谈起。</p>
<p>2.人民当家作主是社会主义民主政治的本质要求,是社会主义政治文明建设的根本出发点和归宿。社会主义民主政治的本质是人民当家作主。</p>
<p>3.依法治国是党领导人民治理国家的基本方略。依法治国与人民民主、党的领导是紧密联系、相辅相成。依法治国不仅从制度上、法律上保证人民当家作主，而且也从制度上、法律上保证党的执政地位。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817160956.png" alt="image-20200817160956070"></p>
<h2 id="66-决胜全面建成小康社会提出来哪些新要求？"><a href="#66-决胜全面建成小康社会提出来哪些新要求？" class="headerlink" title="66.决胜全面建成小康社会提出来哪些新要求？"></a>66.决胜全面建成小康社会提出来哪些新要求？</h2><p>经济保持中高速增长、创新驱动成效显著、发展协调性明显增强、人民生活水平和质量普遍提高、国民素质和社会文明程度显著提高、生态环境质量总体改善、各方面制度更加成熟更加定型。</p>
<p><img src="https://gitee.com/studentliuchang/biogImg/raw/master/img/20200817161053.png" alt="image-20200817161053415"></p>
<h2 id="67。当前，我国生态文明建设面临哪些严峻形势？请你结合自身实际，论述当代大学生应当如何树立生态文明理念？"><a href="#67。当前，我国生态文明建设面临哪些严峻形势？请你结合自身实际，论述当代大学生应当如何树立生态文明理念？" class="headerlink" title="67。当前，我国生态文明建设面临哪些严峻形势？请你结合自身实际，论述当代大学生应当如何树立生态文明理念？"></a>67。当前，我国生态文明建设面临哪些严峻形势？请你结合自身实际，论述当代大学生应当如何树立生态文明理念？</h2><p><strong>严峻形势：资源约束趋紧、环境污染严重、生态系统退化等</strong></p>
<p><strong>一是要全面促进资源节约。要节约集约利用资源，推动资源利用方式根本转变，加强全过程节约管理，大幅降低能源、水、土地消耗强度，提高利用效率和效益。</strong></p>
<p><strong>二是要树立尊重自然、顺应自然、保护自然的生态文明理念，这是推进生态文明建设的重要思想基础，体现了新的价值取向和生态伦理。</strong></p>
<p><strong>三是要加大自然生态系统和环境保护力度，以解决损害群众健康最突出的环境问题为重点，强化污染防治力度，实施重大生态修复工程，增强生态产品生产能力。</strong></p>
<p><strong>四是要着力推进绿色发展、循环发展、低碳发展。</strong></p>
<p><strong>五是要应转变生活方式和消费方式，改变一些传统的不合理的生活方式，改变奢侈消费、劣质消费等习惯。</strong></p>
<h2 id="68-党的十八大以来，我们党明确提出了总体国家安全观。结合当前形势和个人理解，请问你认为应该如何全面贯彻落实总体国家安全观？"><a href="#68-党的十八大以来，我们党明确提出了总体国家安全观。结合当前形势和个人理解，请问你认为应该如何全面贯彻落实总体国家安全观？" class="headerlink" title="68.党的十八大以来，我们党明确提出了总体国家安全观。结合当前形势和个人理解，请问你认为应该如何全面贯彻落实总体国家安全观？"></a>68.党的十八大以来，我们党明确提出了总体国家安全观。结合当前形势和个人理解，请问你认为应该如何全面贯彻落实总体国家安全观？</h2><p>1.全面贯彻落实总体国家安全观，必须坚持统筹发展和安全两件大事，既要善于运用发展成果夯实国家安全的实力基础，又要善于塑造有利于经济社会发展的安全环境;必须坚持人民安全、政治安全、国家利益至上的有机统一。习近平总书记指出，人民安全是国家安全的宗旨，政治安全是国家安全的根本，国家利益至上是国家安全的准则。</p>
<p>2.全面贯彻落实总体国家安全观，就要坚持立足于防，又有效处置风险。凡事预则立，不预则废。“立足于防”是富有中国特色的国家安全智慧，要有效处置风险，就必须具有维护国家安全的能力和效率。</p>
<p>3.全面贯彻落实总体国家安全观，还必须坚持维护和塑造国家安全。塑造是更高层次更具前瞻性的维护，要发挥负责任大国作用，同世界各国一起，推动构建人类命运共同体。</p>
<p>4.全面贯彻落实总体国家安全观，更需要坚持科学统筹，始终把国家安全置于中国特色社会主义事业全局中来把握，充分调动各方面积极性，形成维护国家安全合力。</p>
<h2 id="69-作为一名新时代大学生，你如何理解“不忘初心、牢记使命”主题教育的重大意义？你自己又将如何做好不忘求学初心、勇担家国责任？。"><a href="#69-作为一名新时代大学生，你如何理解“不忘初心、牢记使命”主题教育的重大意义？你自己又将如何做好不忘求学初心、勇担家国责任？。" class="headerlink" title="69.作为一名新时代大学生，你如何理解“不忘初心、牢记使命”主题教育的重大意义？你自己又将如何做好不忘求学初心、勇担家国责任？。"></a>69.作为一名新时代大学生，你如何理解“不忘初心、牢记使命”主题教育的重大意义？你自己又将如何做好不忘求学初心、勇担家国责任？。</h2><p><strong>意义</strong></p>
<p><strong>1、</strong>用习近平新时代中国特色社会主义思想武装全党的迫切需要</p>
<p><strong>2</strong>、推进新时代党的建设的迫切需要</p>
<p><strong>3</strong>、是保持党同人民群众血肉联系的迫切需要</p>
<p><strong>4</strong>、是实现党的十九大确定的目标任务的迫切需要</p>
<p><strong>第二问：</strong></p>
<p>1、我们应该坚持用习近平新时代中国特色社会主义思想武装头脑、指导行动。</p>
<p>2、我们是新时代的建设者和生力军，要树立强烈的新时代主人翁意识和责任感，</p>
<p>3、理应紧跟党走在最前列，在应对各种重大和矛盾中发挥积极作用，勇敢担负起捍卫、开拓新时代的重任。</p>
<h2 id="70-谈谈你对社会主义核心价值观内容的理解，并结合实际谈谈作为当代大学生"><a href="#70-谈谈你对社会主义核心价值观内容的理解，并结合实际谈谈作为当代大学生" class="headerlink" title="70.谈谈你对社会主义核心价值观内容的理解，并结合实际谈谈作为当代大学生"></a>70.谈谈你对社会主义核心价值观内容的理解，并结合实际谈谈作为当代大学生</h2><p>一是坚持马克思主义的指导思想。我们要用马克思主义中国化的最新理论成果武装自己。</p>
<p>二是我们要树立中国特色社会主义共同理想,坚定中国特色社会主义理想信念。</p>
<p>三是我们要学习和弘扬以爱国主义为核心的民族精神和以改革创新为核心的时代精神。</p>
<p>四是要以“八荣八耻”为主要内容的社会主义荣辱观作为我们道德实践的评判标准,引导我们明是非,知荣辱,辨善恶,分美丑。                                                                                                                        </p>
<p> <strong>—-转载自<a href="https://studentliuchang.gitee.io/">Student-Chang</a></strong></p>
]]></content>
      <tags>
        <tag>毛概复习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python简单入门到精通</title>
    <url>/post/88959ab1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python简单入门到精通"><a href="#Python简单入门到精通" class="headerlink" title="Python简单入门到精通"></a>Python简单入门到精通</h1><a id="more"></a>

<p><a href="https://www.educoder.net/paths/85">朋友推荐，可以自己去动动手</a></p>
<p><a href="https://www.zhihu.com/question/28479292/answer/608582285">这里我也查了一些资料，整理了一下，感兴趣或者没目标可以看看</a></p>
<p>其余的都是bilibili上面的可以查到的，手动bilibili-Python</p>
<h2 id="Python基础篇——初体验"><a href="#Python基础篇——初体验" class="headerlink" title="Python基础篇——初体验"></a>Python基础篇——初体验</h2><h3 id="Python初体验——Hello-World"><a href="#Python初体验——Hello-World" class="headerlink" title="Python初体验——Hello World"></a>Python初体验——Hello World</h3><h4 id="输出Hello-Python"><a href="#输出Hello-Python" class="headerlink" title="输出Hello Python"></a>输出Hello Python</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">#请在此处添加代码完成输出“Hello Python”,注意要区分大小写！</span><br><span class="line">###### Begin ######</span><br><span class="line">print(&quot;Hello Python&quot;)</span><br><span class="line">###### End ######</span><br></pre></td></tr></table></figure>

<h4 id="我想看世界"><a href="#我想看世界" class="headerlink" title="我想看世界"></a>我想看世界</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">#请在此处补充代码，按要求完成输出</span><br><span class="line">###### Begin ######</span><br><span class="line">name&#x3D;input(&quot;请输入一个人的名字：&quot;)</span><br><span class="line">country&#x3D;input(&quot;请输入一个国家的名字：&quot;)</span><br><span class="line">print(&quot;世界那么大，&#123;&#125;想去&#123;&#125;看看。&quot;.format(name,country))</span><br><span class="line">###### End ######</span><br></pre></td></tr></table></figure>

<h4 id="学好Python"><a href="#学好Python" class="headerlink" title="学好Python"></a>学好Python</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">#请在此处补充代码，按要求完成输出</span><br><span class="line">###### Begin ######</span><br><span class="line">name&#x3D;input(&quot;输入姓名：&quot;)</span><br><span class="line">print(&quot;&#123;&#125;同学，学好Python，前途无量！&quot;.format(name ))     #请将命令行补充完整</span><br><span class="line">print(&quot;&#123;&#125;大侠，学好Python，大展拳脚！&quot;.format(name[0]) )  #请将命令行补充完整</span><br><span class="line">print(&quot;&#123;&#125;哥哥，学好Python，人见人爱！&quot;.format(name[1:]) ) #请将命令行补充完整</span><br><span class="line">###### End ######</span><br></pre></td></tr></table></figure>

<h3 id="Python入门之基础语法"><a href="#Python入门之基础语法" class="headerlink" title="Python入门之基础语法"></a>Python入门之基础语法</h3><h4 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#有错误的函数1</span><br><span class="line">#Python 的代码一般是一行一条语句，语句之后的分号 ; 可加可不加。但如果要在一行中写多条语句，则需要用分号 ; 隔开每条语句。</span><br><span class="line">def wrong1():</span><br><span class="line">   print(&quot;wrong1&quot;)</span><br><span class="line">    #print(&quot;这里有一个错误缩进&quot;)这个程序的 if 部分缩进不相同，所以是错误的程序。</span><br><span class="line">   print(&quot;这里有一个错误缩进&quot;)</span><br><span class="line">    </span><br><span class="line">#有错误的函数2</span><br><span class="line">def wrong2():</span><br><span class="line">    print(&quot;wrong2&quot;)</span><br><span class="line">    if False:</span><br><span class="line">        print(&quot;这个不应该输出&quot;)</span><br><span class="line">        print(&quot;这个也不应该输出&quot;)</span><br><span class="line"></span><br><span class="line">#有错误的函数3</span><br><span class="line">#Python 的代码一般是一行一条语句，语句之后的分号 ; 可加可不加。但如果要在一行中写多条语句，则需要用分号 ; 隔开每条语句。</span><br><span class="line">def wrong3():</span><br><span class="line">    print(&quot;wrong3&quot;); print(&quot;hello world&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#这里是调用三个函数的代码</span><br><span class="line">#不要修改</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line"></span><br><span class="line">    wrong1()</span><br><span class="line">    wrong2()</span><br><span class="line">    wrong3()</span><br></pre></td></tr></table></figure>

<h4 id="标识符与保留字"><a href="#标识符与保留字" class="headerlink" title="标识符与保留字"></a>标识符与保留字</h4><ul>
<li><h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个字符必须是字母表中的字母或下划线 _ ；</span><br><span class="line">标识符的其他的部分，由字母、数字和下划线组成；</span><br><span class="line">标识符对大小写敏感；</span><br><span class="line">标识符不能与保留字相同。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num1 &#x3D; 1</span><br><span class="line">float1 &#x3D; 0.5</span><br><span class="line">true &#x3D; True #这个 true 虽然字面上的意思与值“True”相同，但 python 对大小写敏感，所以也是正确的</span><br><span class="line">str1 &#x3D; &quot;hello&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num1 &#x3D; 1</span><br><span class="line">float1 &#x3D; 0.5</span><br><span class="line">true &#x3D; True #这个 true 虽然字面上的意思与值“True”相同，但 python 对大小写敏感，所以也是正确的</span><br><span class="line">str1 &#x3D; &quot;hello&quot;</span><br></pre></td></tr></table></figure>

<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import keyword</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    #错误1</span><br><span class="line">    str1 &#x3D; &quot;string&quot;</span><br><span class="line">    print(str1)</span><br><span class="line"></span><br><span class="line">    #错误2</span><br><span class="line">    num &#x3D; 1024</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">    #错误3</span><br><span class="line">    float_1 &#x3D; 1.024</span><br><span class="line">    print(float_1)</span><br><span class="line"></span><br><span class="line">    #错误3</span><br><span class="line">    false &#x3D; False</span><br><span class="line">    print(False)</span><br><span class="line"></span><br><span class="line">    #在此处输出保留关键字</span><br><span class="line">    print(keyword.kwlist)</span><br><span class="line">    print(&quot;end&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul>
<li>注释</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#使用多个#</span><br><span class="line">#作注释</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">用三个单引号</span><br><span class="line">作注释</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">用三个双引号</span><br><span class="line">作注释</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #以下是要修改的代码</span><br><span class="line"></span><br><span class="line">    print(1)</span><br><span class="line">    #print(2)</span><br><span class="line">    print(3)</span><br><span class="line">    #print(4)</span><br><span class="line">    print(5)</span><br><span class="line">    #print(6)</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    print(&quot;hello world&quot;)</span><br><span class="line">    print(&quot;这个不应该输出&quot;)</span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">    print(&quot;hello world&quot;)</span><br><span class="line"></span><br><span class="line">    #print(1)</span><br><span class="line">    #print(2)</span><br><span class="line">    print(3)</span><br><span class="line">    print(4)</span><br></pre></td></tr></table></figure>

<h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><ul>
<li>格式字符串中，不同<strong>占位符</strong>的含义：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%s：      作为字符串</span><br><span class="line">%d：     作为有符号十进制整数</span><br><span class="line">%u：     作为无符号十进制整数</span><br><span class="line">%o：     作为无符号八进制整数</span><br><span class="line">%x：     作为无符号十六进制整数，a～f采用小写形式</span><br><span class="line">%X：     作为无符号十六进制整数，A～F采用大写形式</span><br><span class="line">%f：     作为浮点数</span><br><span class="line">%e，%E： 作为浮点数，使用科学计数法</span><br><span class="line">%g，%G： 作为浮点数，使用最低有效数位</span><br></pre></td></tr></table></figure>

<p>如果不想换行，需要指定<code>end=&quot;&quot;</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;hello&quot; , end&#x3D;&quot;&quot;)</span><br><span class="line">print(&quot;world&quot; , end&#x3D;&quot;&quot;)</span><br><span class="line"># 输出结果：helloworld</span><br></pre></td></tr></table></figure>

<h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    a &#x3D; int(input())</span><br><span class="line">    b &#x3D; int(input())</span><br><span class="line"># ********** Begin ********** #</span><br><span class="line">    print(&quot;%d + %d &#x3D; %d&quot; %(a,b,a + b))</span><br><span class="line">    print(&quot;%d - %d &#x3D; %d&quot; %(a,b,a - b))</span><br><span class="line">    print(&quot;%d * %d &#x3D; %d&quot; %(a,b,a * b))</span><br><span class="line">    print(&quot;%d &#x2F; %d &#x3D; %f&quot; %(a,b,a &#x2F; b))</span><br><span class="line"># ********** End ********** #</span><br></pre></td></tr></table></figure>

<h2 id="Python基础篇——基本数据类型"><a href="#Python基础篇——基本数据类型" class="headerlink" title="Python基础篇——基本数据类型"></a>Python基础篇——基本数据类型</h2><h3 id="Python-入门之字符串处理"><a href="#Python-入门之字符串处理" class="headerlink" title="Python 入门之字符串处理"></a>Python 入门之字符串处理</h3><h4 id="字符串的拼接：名字的组成"><a href="#字符串的拼接：名字的组成" class="headerlink" title="字符串的拼接：名字的组成"></a>字符串的拼接：名字的组成</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 存放姓氏和名字的变量</span><br><span class="line">first_name &#x3D; input()</span><br><span class="line">last_name &#x3D; input()</span><br><span class="line"></span><br><span class="line"># 请在下面添加字符串拼接的代码，完成相应功能</span><br><span class="line">########## Begin ##########</span><br><span class="line">result_string &#x3D; first_name + &quot; &quot; + last_name</span><br><span class="line">print(result_string)</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h4 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"># 创建一个字符串say_hello</span><br><span class="line">say_hello &#x3D; &#39;Dear my Daughter&#39;</span><br><span class="line"># 使用upper()方法对say_hello字符串进行处理</span><br><span class="line">upper_say_hello &#x3D; say_hello.upper()</span><br><span class="line"># 使用lower()方法对say_hello字符串进行处理</span><br><span class="line">lower_say_hello &#x3D; say_hello.lower()</span><br><span class="line"># 使用title()方法对say_hello字符串进行处理</span><br><span class="line">title_say_hello &#x3D; say_hello.title()</span><br><span class="line"># 打印输出四个字符串</span><br><span class="line">print (say_hello+&quot;\n&quot;)#Dear my Daughter</span><br><span class="line">print (upper_say_hello+&quot;\n&quot;)#DEAR MY DAUGHTER</span><br><span class="line">print (lower_say_hello+&quot;\n&quot;)#dear my daughter</span><br><span class="line">print (title_say_hello+&quot;\n&quot;)#Dear My Daughter</span><br></pre></td></tr></table></figure>

<h5 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 获取待处理的源字符串</span><br><span class="line">source_string &#x3D; input()</span><br><span class="line"></span><br><span class="line"># 请在下面添加字符串转换的代码</span><br><span class="line">########## Begin ##########</span><br><span class="line">blank &#x3D; source_string.strip()</span><br><span class="line">blank_title &#x3D; blank.title()</span><br><span class="line">print(blank_title)</span><br><span class="line">print(len(blank_title))</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h4 id="字符串查找与替换"><a href="#字符串查找与替换" class="headerlink" title="字符串查找与替换"></a>字符串查找与替换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding &#x3D; utf-8</span><br><span class="line">source_string &#x3D; input()</span><br><span class="line"></span><br><span class="line"># 请在下面添加代码</span><br><span class="line">########## Begin ##########</span><br><span class="line">print(source_string.find(&#39;day&#39;))</span><br><span class="line">print(source_string.replace(&#39;day&#39;,&#39;time&#39;))</span><br><span class="line">print(source_string.replace(&#39;day&#39;,&#39;time&#39;).split(&#39; &#39;))</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h2 id="Python-入门之玩转列表"><a href="#Python-入门之玩转列表" class="headerlink" title="Python 入门之玩转列表"></a>Python 入门之玩转列表</h2><h3 id="客人名单的变化"><a href="#客人名单的变化" class="headerlink" title="客人名单的变化"></a>客人名单的变化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在列表尾部添加元素：append()</span><br><span class="line">在列表指定位置添加元素：insert()</span><br><span class="line">修改列表元素：source_list[index] &#x3D; obj</span><br><span class="line">删除列表元素：</span><br><span class="line">1.del方法 del source_list[index]</span><br><span class="line">2.pop方法 deleted_obj &#x3D; source_list.pop(index)</span><br><span class="line">删除指定值对应的元素：remove()</span><br></pre></td></tr></table></figure>

<h4 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 创建并初始化Guests列表</span><br><span class="line">guests &#x3D; []</span><br><span class="line">while True:</span><br><span class="line">	try:</span><br><span class="line">		guest &#x3D; input()</span><br><span class="line">		guests.append(guest)</span><br><span class="line">	except:</span><br><span class="line">		break</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"># 请在此添加代码，对guests列表进行插入、删除等操作</span><br><span class="line">########## Begin ##########</span><br><span class="line">guest &#x3D; guests.pop(4)</span><br><span class="line">print(guest)</span><br><span class="line">guests.insert(1,&#39;hu ba&#39;)</span><br><span class="line">del guests[2]</span><br><span class="line">print(guests)</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h3 id="给客人排序"><a href="#给客人排序" class="headerlink" title="给客人排序"></a>给客人排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">排序 sort() source_list.sort(reverse&#x3D;True)</span><br><span class="line">#reverse：sort函数的可选参数。如果设置其值为True，则进行反向从大到小排序，如果设置为False或者不填写该参数，则默认进行正向从小到大排序。</span><br></pre></td></tr></table></figure>

<h4 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 创建并初始化&#96;source_list&#96;列表</span><br><span class="line">source_list &#x3D; []</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        list_element &#x3D; input()</span><br><span class="line">        source_list.append(list_element)</span><br><span class="line">    except:</span><br><span class="line">        break</span><br><span class="line">    </span><br><span class="line"># 请在此添加代码，对source_list列表进行排序等操作并打印输出排序后的列表</span><br><span class="line">########## Begin ##########</span><br><span class="line">source_list.sort()</span><br><span class="line">print(source_list)</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h3 id="用数字说话"><a href="#用数字说话" class="headerlink" title="用数字说话"></a>用数字说话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">range()函数：range(lower_limit,upper_limit,step)</span><br><span class="line">lower_limit: 生成系列整数的下限整数，不填该参数则默认为从0开始，生成的整数从此数开始，包括该数；</span><br><span class="line"></span><br><span class="line">upper_limit：生成系列整数的上限整数，必填参数，生成的整数要小于该上限；</span><br><span class="line"></span><br><span class="line">step：在下限和上限之间生成系列整数之间的间隔步长，不填该参数则默认步长为1。</span><br><span class="line"></span><br><span class="line">注意：range()函数的三个参数都只能为整数。如果range()函数中仅一个参数，则该参数表示upper_limit，如果仅</span><br><span class="line">两个参数，则分别表示lower_limit和upper_limit。</span><br><span class="line"></span><br><span class="line">使用list()函数和range()函数创建数字列表</span><br><span class="line">data_list &#x3D; list(range(lower_limit,upper_limit,step))</span><br></pre></td></tr></table></figure>

<h4 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 创建并读入range函数的相应参数</span><br><span class="line">lower &#x3D; int(input())</span><br><span class="line">upper &#x3D; int(input())</span><br><span class="line">step &#x3D; int(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，实现编程要求</span><br><span class="line">########## Begin ##########</span><br><span class="line">source_list &#x3D; list(range(lower,upper,step))</span><br><span class="line">length &#x3D; len(source_list)</span><br><span class="line">print(length)</span><br><span class="line">max_list &#x3D; max(source_list)</span><br><span class="line">min_list &#x3D; min(source_list)</span><br><span class="line">print(max_list-min_list)</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h3 id="你的菜单和我的菜单"><a href="#你的菜单和我的菜单" class="headerlink" title="你的菜单和我的菜单"></a>你的菜单和我的菜单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">切片 list_slice &#x3D; source_list[start:end:step]</span><br><span class="line">负数索引返回的是离列表末尾相应间隔的元素，列表末尾元素的索引是从-1开始的。</span><br></pre></td></tr></table></figure>

<h4 id="测试-7"><a href="#测试-7" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 创建并初始化my_menu列表</span><br><span class="line">my_menu &#x3D; []</span><br><span class="line">while True:</span><br><span class="line">	try:</span><br><span class="line">		food &#x3D; input()</span><br><span class="line">		my_menu.append(food)</span><br><span class="line">	except:</span><br><span class="line">		break</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，对my_menu列表进行切片操作</span><br><span class="line">########## Begin ##########</span><br><span class="line">print(my_menu[0:5:3])</span><br><span class="line">print(my_menu[-3:])</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h3 id="Python-入门之元组与字典"><a href="#Python-入门之元组与字典" class="headerlink" title="Python 入门之元组与字典"></a>Python 入门之元组与字典</h3><h3 id="这份菜单能修改吗？"><a href="#这份菜单能修改吗？" class="headerlink" title="这份菜单能修改吗？"></a>这份菜单能修改吗？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元组与列表很相似，两者之间的差别在于：</span><br><span class="line"></span><br><span class="line">▶列表在初始化后其中的元素还可以进行增删改等操作，但是元组在初始化后其中的元素不能进行更改；</span><br><span class="line">▶列表在赋值时使用方括号[]，而元组在赋值时使用小括号()。</span><br><span class="line">因为元组具有不可变的特性，所以在能用元组替代列表的地方最好都使用元组，这样代码更安全。</span><br><span class="line">元组和列表一样，都有一些内置函数方便编程。例如：</span><br><span class="line"></span><br><span class="line">len(tuple)：计算元组中元素个数；</span><br><span class="line"></span><br><span class="line">max(tuple)：返回元组中元素的最大值；</span><br><span class="line"></span><br><span class="line">min(tuple)：返回元组中元素的最小值；</span><br><span class="line"></span><br><span class="line">tuple(seq)：将列表转换为元组。</span><br></pre></td></tr></table></figure>

<h4 id="测试-8"><a href="#测试-8" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 创建并初始化menu_list列表</span><br><span class="line">menu_list &#x3D; []</span><br><span class="line">while True:</span><br><span class="line">	try:</span><br><span class="line">		food &#x3D; input()</span><br><span class="line">		menu_list.append(food)</span><br><span class="line">	except:</span><br><span class="line">		break</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，对menu_list进行元组转换以及元组计算等操作，并打印输出元组及元组最大的元素</span><br><span class="line">###### Begin ######</span><br><span class="line">print(tuple(menu_list))</span><br><span class="line">print(max(tuple(menu_list)))</span><br><span class="line">#######  End #######</span><br></pre></td></tr></table></figure>

<h3 id="这份菜单可以修改"><a href="#这份菜单可以修改" class="headerlink" title="这份菜单可以修改"></a>这份菜单可以修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 创建并初始化menu_dict字典</span><br><span class="line">menu_dict &#x3D; &#123;&#125;</span><br><span class="line">while True:</span><br><span class="line">	try:</span><br><span class="line">		food &#x3D; input()</span><br><span class="line">		price &#x3D; int(input())</span><br><span class="line">		menu_dict[food]&#x3D; price</span><br><span class="line">	except:</span><br><span class="line">		break</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，实现对menu_dict的添加、查找、修改等操作，并打印输出相应的值</span><br><span class="line">########## Begin ##########</span><br><span class="line">print(menu_dict[&#39;fish&#39;])</span><br><span class="line">menu_dict[&#39;fish&#39;] &#x3D; 100</span><br><span class="line">del menu_dict[&#39;noodles&#39;]</span><br><span class="line">menu_dict[&#39;lamb&#39;] &#x3D; 50</span><br><span class="line">print(menu_dict)</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h3 id="菜名和价格的展示"><a href="#菜名和价格的展示" class="headerlink" title="菜名和价格的展示"></a>菜名和价格的展示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">遍历字典中的键-值对</span><br><span class="line">Python 为字典类型提供了items()方法，items()方法会将字典里的所有的键与值一起返回。</span><br><span class="line"></span><br><span class="line"># coding &#x3D; utf-8</span><br><span class="line"># 创建并初始化menu菜单字典</span><br><span class="line">menu&#x3D;&#123;&#39;fish&#39;:&#39;40&#39;,&#39;pork&#39;:&#39;30&#39;,&#39;potato&#39;:&#39;20&#39;,&#39;lamb&#39;:&#39;50&#39;&#125;</span><br><span class="line"># 利用items()方法遍历输出键和值</span><br><span class="line">for key,value in menu.items():</span><br><span class="line">    print(&#39;\nkey:&#39;+key)</span><br><span class="line">    print(&#39;value:&#39;+value)</span><br></pre></td></tr></table></figure>

<h4 id="测试-9"><a href="#测试-9" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 创建并初始化menu_dict字典</span><br><span class="line">menu_dict &#x3D; &#123;&#125;</span><br><span class="line">while True:</span><br><span class="line">	try:</span><br><span class="line">		food &#x3D; input()</span><br><span class="line">		price &#x3D; int(input())</span><br><span class="line">		menu_dict[food]&#x3D; price</span><br><span class="line">	except:</span><br><span class="line">		break</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，实现对menu_dict的遍历操作并打印输出键与值</span><br><span class="line">########## Begin ##########</span><br><span class="line">for key in menu_dict.keys():</span><br><span class="line">    print(key)</span><br><span class="line">for value in menu_dict.values():</span><br><span class="line">    print(value)</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h3 id="嵌套-菜单的信息量好大"><a href="#嵌套-菜单的信息量好大" class="headerlink" title="嵌套 - 菜单的信息量好大"></a>嵌套 - 菜单的信息量好大</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 初始化menu1字典，输入两道菜的价格</span><br><span class="line">menu1 &#x3D; &#123;&#125;</span><br><span class="line">menu1[&#39;fish&#39;]&#x3D;int(input())</span><br><span class="line">menu1[&#39;pork&#39;]&#x3D;int(input())</span><br><span class="line"></span><br><span class="line"># menu_total列表现在只包含menu1字典</span><br><span class="line">menu_total &#x3D; [menu1]</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，实现编程要求</span><br><span class="line">########## Begin ##########</span><br><span class="line">menu2 &#x3D; menu1.copy()</span><br><span class="line">for key in menu2.keys():</span><br><span class="line">    menu2[key] &#x3D; menu2[key] * 2</span><br><span class="line">menu_total.append(menu2)</span><br><span class="line">########## End ##########</span><br><span class="line"></span><br><span class="line"># 输出menu_total列表</span><br><span class="line">print(menu_total)</span><br></pre></td></tr></table></figure>

<h3 id="Python入门之collections模块"><a href="#Python入门之collections模块" class="headerlink" title="Python入门之collections模块"></a>Python入门之collections模块</h3><h3 id="命名元组-namedtuple"><a href="#命名元组-namedtuple" class="headerlink" title="命名元组 (namedtuple)"></a>命名元组 (namedtuple)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建命名元组</span><br><span class="line">命名元组的构造函数接受两个参数typename，field_names：</span><br><span class="line"></span><br><span class="line">typename：元组的名字；</span><br><span class="line">field_names：元组各个元素的名称，也就是属性名称。</span><br><span class="line">collections.namedtuple(&quot;Point&quot;,[&quot;x&quot;,&quot;y&quot;])</span><br></pre></td></tr></table></figure>

<h4 id="测试-10"><a href="#测试-10" class="headerlink" title="测试"></a>测试</h4><ul>
<li>注意缩进</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import collections</span><br><span class="line"></span><br><span class="line">def CreatePoint():</span><br><span class="line">    # ********** Begin ********** #</span><br><span class="line"> p&#x3D;collections.namedtuple(&quot;p&quot;,&quot;x,y&quot;)</span><br><span class="line"> p&#x3D;p(x&#x3D;0,y&#x3D;0)</span><br><span class="line"> return p</span><br><span class="line">	# ********** End ********** #</span><br><span class="line"></span><br><span class="line">def IncX(p):</span><br><span class="line">    # ********** Begin ********** #</span><br><span class="line"> p&#x3D;p._replace(x&#x3D;1)</span><br><span class="line"> return p</span><br><span class="line">	# ********** End ********** #</span><br><span class="line"></span><br><span class="line">def IncY(p):</span><br><span class="line">    # ********** Begin ********** #</span><br><span class="line"> p&#x3D;p._replace(y&#x3D;1)</span><br><span class="line"> return p</span><br><span class="line">	# ********** End ********** #</span><br><span class="line"></span><br><span class="line">def PrintPoint(p):</span><br><span class="line">    print(&quot;当前位置:x &#x3D; %d,y &#x3D; %d&quot; % p)</span><br></pre></td></tr></table></figure>

<h3 id="计数器-Counter"><a href="#计数器-Counter" class="headerlink" title="计数器 (Counter)"></a>计数器 (Counter)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import collections</span><br><span class="line">def Func():</span><br><span class="line">    c &#x3D; collections.Counter()</span><br><span class="line">    for i in range(6):</span><br><span class="line">        data &#x3D; input()</span><br><span class="line">        # ********** Begin ********** #</span><br><span class="line">        if(i%2&#x3D;&#x3D;0):</span><br><span class="line">            c.update(data)</span><br><span class="line">        else:</span><br><span class="line">            c.subtract(data)</span><br><span class="line">        # ********** End ********** #</span><br><span class="line">    print(c.most_common())</span><br></pre></td></tr></table></figure>

<h3 id="双向队列-deque"><a href="#双向队列-deque" class="headerlink" title="双向队列 (deque)"></a>双向队列 (deque)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import collections</span><br><span class="line">def Func():</span><br><span class="line">    d &#x3D; collections.deque()</span><br><span class="line">    n &#x3D; int(input())</span><br><span class="line">    # ********** Begin ********** #</span><br><span class="line">    for i in range(n):</span><br><span class="line">        if(i%2!&#x3D;0):</span><br><span class="line">            d.appendleft(i)</span><br><span class="line">        else:</span><br><span class="line">            d.append(i)</span><br><span class="line">    # ********** End ********** #</span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure>

<h3 id="有序字典-OrderedDict"><a href="#有序字典-OrderedDict" class="headerlink" title="有序字典 (OrderedDict)"></a>有序字典 (OrderedDict)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import collections</span><br><span class="line">def Func():</span><br><span class="line">    pairs &#x3D; []</span><br><span class="line">    n &#x3D; int(input())</span><br><span class="line">    for s in range(n):</span><br><span class="line">        k &#x3D; input()</span><br><span class="line">    # ********** Begin ********** #</span><br><span class="line">        pairs.append((k,s))</span><br><span class="line">    od &#x3D; collections.OrderedDict(sorted(pairs,key&#x3D;lambda s:s[0]))</span><br><span class="line">    # ********** End ********** #</span><br><span class="line">    print(od)</span><br></pre></td></tr></table></figure>

<h3 id="默认字典-defaultdict"><a href="#默认字典-defaultdict" class="headerlink" title="默认字典 (defaultdict)"></a>默认字典 (defaultdict)</h3><ul>
<li>有些难度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import collections</span><br><span class="line"></span><br><span class="line">def GetIntDefaultDict():</span><br><span class="line">    #返回一个空的int类型的默认字典</span><br><span class="line">    # ********** Begin ********** #</span><br><span class="line">    dd &#x3D; collections.defaultdict(int)</span><br><span class="line">    return dd</span><br><span class="line">    print(&quot;int默认字典的默认值：&quot;,dd[&#39;a&#39;])</span><br><span class="line">    # ********** End ********** #</span><br><span class="line"></span><br><span class="line">def GetListDefaultDict():</span><br><span class="line">    #返回一个空的list类型的默认字典</span><br><span class="line">    # ********** Begin ********** #</span><br><span class="line">    dd &#x3D; collections.defaultdict(list)</span><br><span class="line">    return dd</span><br><span class="line">    print(&quot;list默认字典的默认值：&quot;,dd[&#39;a&#39;])</span><br><span class="line">    # ********** End ********** #</span><br><span class="line"></span><br><span class="line">def GetTupleDefaultDict():</span><br><span class="line">    #返回一个空的tuple类型的默认字典</span><br><span class="line">    # ********** Begin ********** #</span><br><span class="line">    dd &#x3D; collections.defaultdict(tuple)</span><br><span class="line">    return dd</span><br><span class="line">    print(&quot;tuple默认字典的默认值：&quot;,dd[&#39;a&#39;])</span><br><span class="line">    # ********** End ********** #</span><br><span class="line"></span><br><span class="line">def GetStrDefaultDict(): </span><br><span class="line">    #返回一个空的str类型的默认字典</span><br><span class="line">    # ********** Begin ********** #</span><br><span class="line">    dd &#x3D; collections.defaultdict(str)</span><br><span class="line">    return dd</span><br><span class="line">    print(&quot;str默认字典的默认值：&quot;,dd[&#39;a&#39;])</span><br><span class="line">    # ********** End ********** #</span><br><span class="line">GetIntDefaultDict()</span><br><span class="line">GetListDefaultDict()</span><br><span class="line">GetTupleDefaultDict()</span><br><span class="line">GetStrDefaultDict()</span><br></pre></td></tr></table></figure>

<h2 id="Python零基础到精通之：Python基础篇"><a href="#Python零基础到精通之：Python基础篇" class="headerlink" title="Python零基础到精通之：Python基础篇"></a>Python零基础到精通之：Python基础篇</h2><h3 id="Python-入门之函数结构"><a href="#Python-入门之函数结构" class="headerlink" title="Python 入门之函数结构"></a>Python 入门之函数结构</h3><h4 id="函数的参数-搭建函数房子的砖"><a href="#函数的参数-搭建函数房子的砖" class="headerlink" title="函数的参数 - 搭建函数房子的砖"></a>函数的参数 - 搭建函数房子的砖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数的基本定义：</span><br><span class="line">def functionname( parameters ):</span><br><span class="line">   &quot;函数_文档字符串&quot;</span><br><span class="line">   function_suite</span><br><span class="line">   return [expression]</span><br><span class="line">定义函数以def关键词开头，后面跟着函数名、圆括号()、括号中的参数、冒号；</span><br><span class="line">接着，在缩进块中编写函数体，函数的第一行语句一般是写文档字符串，用于存放函数说明，也可以选择不写；</span><br><span class="line">Return[expression]表示结束函数，并返回值。而不带表达式的return相当于返回空值。</span><br><span class="line"></span><br><span class="line">Python 的函数参数主要包含以下几种：</span><br><span class="line">必选参数；</span><br><span class="line">默认参数；</span><br><span class="line">可变参数；</span><br><span class="line">关键字参数。</span><br></pre></td></tr></table></figure>

<h4 id="测试-11"><a href="#测试-11" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 创建一个空列表numbers</span><br><span class="line">numbers &#x3D; []</span><br><span class="line"></span><br><span class="line"># str用来存储输入的数字字符串，lst1是将输入的字符串用空格分割，存储为列表</span><br><span class="line">str &#x3D; input()</span><br><span class="line">lst1 &#x3D; str.split(&#39; &#39;)</span><br><span class="line"></span><br><span class="line"># 将输入的数字字符串转换为整型并赋值给numbers列表</span><br><span class="line">for i in range(len(lst1)):</span><br><span class="line">   numbers.append(int(lst1.pop()))</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，对输入的列表中的数值元素进行累加求和</span><br><span class="line">########## Begin ##########</span><br><span class="line">def plus(numbers):</span><br><span class="line">    add &#x3D; 0</span><br><span class="line">    for i in numbers:</span><br><span class="line">        add +&#x3D; i</span><br><span class="line">    return(add)</span><br><span class="line">d &#x3D; plus(numbers)</span><br><span class="line">########## End ##########</span><br><span class="line"></span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>

<h4 id="函数的返回值-可有可无的-return"><a href="#函数的返回值-可有可无的-return" class="headerlink" title="函数的返回值 - 可有可无的 return"></a>函数的返回值 - 可有可无的 return</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 输入两个正整数a,b</span><br><span class="line">a &#x3D; int(input())</span><br><span class="line">b &#x3D; int(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，求两个正整数的最大公约数</span><br><span class="line">########## Begin ##########</span><br><span class="line">def gcd(a,b):</span><br><span class="line">    if a&lt;b:</span><br><span class="line">        x&#x3D;a</span><br><span class="line">    else:</span><br><span class="line">        x&#x3D;b </span><br><span class="line">    for i in range(1,x+1):</span><br><span class="line">        if a%i&#x3D;&#x3D;0 and b%i&#x3D;&#x3D;0:</span><br><span class="line">            res&#x3D;i</span><br><span class="line">    return res</span><br><span class="line">########## End ##########</span><br><span class="line"></span><br><span class="line"># 调用函数，并输出最大公约数</span><br><span class="line">print(gcd(a,b))</span><br></pre></td></tr></table></figure>

<h4 id="函数的使用范围：Python-作用域"><a href="#函数的使用范围：Python-作用域" class="headerlink" title="函数的使用范围：Python 作用域"></a>函数的使用范围：Python 作用域</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 输入两个正整数a,b</span><br><span class="line">a &#x3D; int(input())</span><br><span class="line">b &#x3D; int(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，求两个正整数的最小公倍数</span><br><span class="line">########## Begin ##########</span><br><span class="line">def lcm(a,b):</span><br><span class="line">    if(a &gt; b):</span><br><span class="line">        greater &#x3D; a</span><br><span class="line">    else:</span><br><span class="line">        greater &#x3D; b</span><br><span class="line"></span><br><span class="line">    while(True):</span><br><span class="line">        if((greater % a &#x3D;&#x3D; 0) and (greater % b &#x3D;&#x3D; 0)):</span><br><span class="line">            lcm &#x3D; greater</span><br><span class="line">            break</span><br><span class="line">        greater &#x3D;greater + 1</span><br><span class="line">    return lcm</span><br><span class="line">########## End ##########</span><br><span class="line"></span><br><span class="line"># 调用函数，并输出a,b的最小公倍数</span><br><span class="line">print(lcm(a,b))</span><br></pre></td></tr></table></figure>

<h3 id="Python-入门之控制结构-循环结构"><a href="#Python-入门之控制结构-循环结构" class="headerlink" title="Python 入门之控制结构 - 循环结构"></a>Python 入门之控制结构 - 循环结构</h3><h4 id="While-循环与-break-语句"><a href="#While-循环与-break-语句" class="headerlink" title="While 循环与 break 语句"></a>While 循环与 break 语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">partcount &#x3D; int(input())</span><br><span class="line">electric &#x3D; int(input())</span><br><span class="line">count &#x3D; 0</span><br><span class="line">#请在此添加代码，当count &lt; partcount时的while循环判断语句</span><br><span class="line">#********** Begin *********#</span><br><span class="line">while(count&lt;partcount):</span><br><span class="line">#********** End **********#</span><br><span class="line">    count +&#x3D; 1</span><br><span class="line">    print(&quot;已加工零件个数:&quot;,count)</span><br><span class="line">    if(electric):</span><br><span class="line">        print(&quot;停电了，停止加工&quot;)</span><br><span class="line">        #请在此添加代码，填入break语句</span><br><span class="line">        #********** Begin *********#</span><br><span class="line">        break</span><br><span class="line">        #********** End **********#</span><br></pre></td></tr></table></figure>

<h4 id="for-循环与-continue-语句"><a href="#for-循环与-continue-语句" class="headerlink" title="for 循环与 continue 语句"></a>for 循环与 continue 语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">absencenum &#x3D; int(input())</span><br><span class="line">studentname &#x3D; []</span><br><span class="line">inputlist &#x3D; input()</span><br><span class="line">for i in inputlist.split(&#39;,&#39;):</span><br><span class="line">   result &#x3D; i</span><br><span class="line">   studentname.append(result)</span><br><span class="line">count &#x3D; 0</span><br><span class="line">#请在此添加代码，填入循环遍历studentname列表的代码</span><br><span class="line">#********** Begin *********#</span><br><span class="line">for student in studentname:</span><br><span class="line">#********** End **********#</span><br><span class="line">    count +&#x3D; 1</span><br><span class="line">    if(count &#x3D;&#x3D; absencenum):</span><br><span class="line">        #在下面填入continue语句</span><br><span class="line">        #********** Begin *********#</span><br><span class="line">        continue</span><br><span class="line">        #********** End **********#</span><br><span class="line">    print(student,&quot;的试卷已阅&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">studentnum &#x3D; int(input())</span><br><span class="line">#请在此添加代码，填入for循环遍历学生人数的代码</span><br><span class="line">#********** Begin *********#</span><br><span class="line">for student in range(studentnum):</span><br><span class="line">#********** End **********#</span><br><span class="line">    sum &#x3D; 0</span><br><span class="line">    subjectscore &#x3D; []</span><br><span class="line">    inputlist &#x3D; input()</span><br><span class="line">    for i in inputlist.split(&#39;,&#39;):</span><br><span class="line">        result &#x3D; i</span><br><span class="line">        subjectscore.append(result)</span><br><span class="line">    #请在此添加代码，填入for循环遍历学生分数的代码</span><br><span class="line">    #********** Begin *********#</span><br><span class="line">    for score in subjectscore:</span><br><span class="line">    #********** End **********#</span><br><span class="line">        score &#x3D; int(score)</span><br><span class="line">        sum &#x3D; sum + score</span><br><span class="line">    print(&quot;第%d位同学的总分为:%d&quot; %(student,sum))</span><br></pre></td></tr></table></figure>

<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可直接作用于for循环的数据类型如list、tuple、dict等统称为可迭代对象:Iterable。使用isinstance()可以判断一个对象是否是可迭代对象。</span><br><span class="line">from collections import Iterable</span><br><span class="line">result &#x3D; isinstance([],Iterable)</span><br><span class="line">print(result)#True</span><br><span class="line">result &#x3D; isinstance((),Iterable)</span><br><span class="line">print(result)#True</span><br><span class="line">result &#x3D; isinstance(&#39;python&#39;,Iterable)</span><br><span class="line">print(result)#True</span><br><span class="line">result &#x3D; isinstance(213,Iterable)</span><br><span class="line">print(result)#False</span><br><span class="line">可以被next()函数调用并不断返回下一个值的对象称为迭代器:Iterator。next()函数访问每一个对象，直到对象访问完毕，返回一个StopIteration异常。使用isinstance()可以判断一个对象是否是Iterator对象。</span><br><span class="line">from collections import Iterator</span><br><span class="line">result &#x3D; isinstance([],Iterator)</span><br><span class="line">print(result)#False</span><br><span class="line">result &#x3D; isinstance((),Iterator)</span><br><span class="line">print(result)#False</span><br><span class="line">result &#x3D; isinstance((x for x in range(10)),Iterator)</span><br><span class="line">print(result)#True</span><br><span class="line">当自己定义迭代器时，需要定义一个类。类里面包含一个iter()函数，这个函数能够返回一个带next()方法的对象。</span><br><span class="line">class MyIterable:</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return MyIterator()</span><br><span class="line">class MyIterator:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.num &#x3D; 0</span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.num +&#x3D; 1</span><br><span class="line">        if self.num &gt;&#x3D; 10:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        return self.num</span><br><span class="line">迭代器当一次迭代完毕后就结束了，在此调用便会引发StopIteration异常。如果想要将迭代器保存起来，可以使用复制的方法:copy.deepcopy():x &#x3D; copy.deepcopy(y)，不可使用赋值的方法，这样是不起作用的。</span><br></pre></td></tr></table></figure>

<h5 id="测试（next？）"><a href="#测试（next？）" class="headerlink" title="测试（next？）"></a>测试（next？）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List &#x3D; []</span><br><span class="line">member &#x3D; input()</span><br><span class="line">for i in member.split(&#39;,&#39;):</span><br><span class="line">    result &#x3D; i</span><br><span class="line">    List.append(result)</span><br><span class="line">#请在此添加代码，将List转换为迭代器的代码</span><br><span class="line">#********** Begin *********#</span><br><span class="line">n &#x3D; iter(List)</span><br><span class="line">#********** End **********#</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        #请在此添加代码，用next()函数遍历IterList的代码</span><br><span class="line">        #********** Begin *********#</span><br><span class="line">        num&#x3D;next(n)</span><br><span class="line">        #********** End **********#</span><br><span class="line">        result &#x3D; int(num) * 2</span><br><span class="line">        print(result)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>

<h3 id="Python-入门之控制结构-顺序与选择结构"><a href="#Python-入门之控制结构-顺序与选择结构" class="headerlink" title="Python 入门之控制结构 - 顺序与选择结构"></a>Python 入门之控制结构 - 顺序与选择结构</h3><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">changeOne &#x3D; int(input())</span><br><span class="line">changeTwo &#x3D; int(input())</span><br><span class="line">plus &#x3D; int(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，交换changeOne、changeTwo的值，然后计算changeOne、plus的和result的值</span><br><span class="line">########## Begin ##########</span><br><span class="line">changeOne &#x3D; changeTwo</span><br><span class="line">result &#x3D; plus+changeOne</span><br><span class="line">########## End ##########</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h4 id="选择结构：if-else"><a href="#选择结构：if-else" class="headerlink" title="选择结构：if-else"></a>选择结构：if-else</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">workYear &#x3D; int(input())</span><br><span class="line"># 请在下面填入如果workYear &lt; 5的判断语句</span><br><span class="line">########## Begin ##########</span><br><span class="line">if workYear &lt; 5:</span><br><span class="line">########## End ##########</span><br><span class="line">    print(&quot;工资涨幅为0&quot;)</span><br><span class="line"># 请在下面填入如果workYear &gt;&#x3D; 5 and workYear &lt; 10的判断语句</span><br><span class="line">########## Begin ##########</span><br><span class="line">elif workYear &gt;&#x3D; 5 and workYear &lt; 10:#elif或if都行</span><br><span class="line">########## End ##########</span><br><span class="line">    print(&quot;工资涨幅为5%&quot;)</span><br><span class="line"># 请在下面填入如果workYear &gt;&#x3D; 10 and workYear &lt; 15的判断语句</span><br><span class="line">########## Begin ##########</span><br><span class="line">elif workYear &gt;&#x3D; 10 and workYear &lt; 15:#elif或if都行</span><br><span class="line">########## End ##########</span><br><span class="line">    print(&quot;工资涨幅为10%&quot;)</span><br><span class="line"># 请在下面填入当上述条件判断都为假时的判断语句</span><br><span class="line">########## Begin ##########</span><br><span class="line">else:</span><br><span class="line">########## End ##########</span><br><span class="line">    print(&quot;工资涨幅为15%&quot;)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h4 id="选择结构-：-三元操作符"><a href="#选择结构-：-三元操作符" class="headerlink" title="选择结构 ： 三元操作符"></a>选择结构 ： 三元操作符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jimscore &#x3D; int(input())</span><br><span class="line">jerryscore &#x3D; int(input())</span><br><span class="line"># 请在此添加代码，判断若jim的得分jimscore更高，则赢家为jim，若jerry的得分jerryscore更高，则赢家为jerry，并输出赢家的名字</span><br><span class="line">########## Begin ##########</span><br><span class="line">winner &#x3D; &#39;jim&#39; if jerryscore &lt; jimscore else &#39;jerry&#39;</span><br><span class="line">########## End ##########</span><br><span class="line">print(winner)</span><br></pre></td></tr></table></figure>

<h3 id="Python入门之函数调用"><a href="#Python入门之函数调用" class="headerlink" title="Python入门之函数调用"></a>Python入门之函数调用</h3><h4 id="内置函数-让你偷懒的工具"><a href="#内置函数-让你偷懒的工具" class="headerlink" title="内置函数 - 让你偷懒的工具"></a>内置函数 - 让你偷懒的工具</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abs()：返回数值的绝对值</span><br><span class="line">divmod()：返回两个数值的商和余数</span><br><span class="line">max()：返回元素中的最大值</span><br><span class="line">min()：返回元素中的最小值</span><br><span class="line">sum()：返回传入元素之和</span><br><span class="line">bool()：根据传入的参数的逻辑值创建一个新的布尔值</span><br><span class="line">int()：根据传入的参数创建一个新的整数</span><br><span class="line">float()：根据传入的参数创建一个新的浮点数</span><br><span class="line">complex()：根据传入的参数创建一个新的复数</span><br><span class="line">all()：判断可迭代对象的每个元素是否都为True值</span><br><span class="line">any()：判断可迭代对象的元素是否有为True值的元素</span><br><span class="line">sorted()：对可迭代对象进行排序，返回一个新的列表</span><br><span class="line">help()：返回对象的帮助信息</span><br><span class="line">dir()：返回对象或者当前作用域内的属性列表</span><br><span class="line">print()：向标准输出对象打印输出</span><br><span class="line">input()：读取用户输入值</span><br><span class="line">open()：使用指定的模式和编码打开文件，返回文件读写对象</span><br></pre></td></tr></table></figure>

<h5 id="测试-12"><a href="#测试-12" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 输入一个整数n</span><br><span class="line">n &#x3D;  int(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，对输入的整数进行判断，如果是素数则输出为True，不是素数则输出为False</span><br><span class="line">########## Begin ##########</span><br><span class="line">def prime(n):</span><br><span class="line">    if n &lt;3 :</span><br><span class="line">        return False</span><br><span class="line">    for i in range(2,n):</span><br><span class="line">        if n%i&#x3D;&#x3D;0:</span><br><span class="line">            return False</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        return True</span><br><span class="line">########## End ##########</span><br><span class="line">print(prime(n))</span><br></pre></td></tr></table></figure>

<h4 id="函数正确调用-得到想要的结果"><a href="#函数正确调用-得到想要的结果" class="headerlink" title="函数正确调用 - 得到想要的结果"></a>函数正确调用 - 得到想要的结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 输入数字字符串，并转换为数值列表</span><br><span class="line">a &#x3D; input()</span><br><span class="line">num1 &#x3D; eval(a)</span><br><span class="line">numbers &#x3D; list(num1)</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，对数值列表numbers实现从小到大排序</span><br><span class="line">########## Begin ##########</span><br><span class="line">def num(a):</span><br><span class="line">    numbers.sort()</span><br><span class="line">    return numbers</span><br><span class="line">print(num(num1))</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h4 id="函数与函数调用-分清主次"><a href="#函数与函数调用-分清主次" class="headerlink" title="函数与函数调用 - 分清主次"></a>函数与函数调用 - 分清主次</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">from math import pi as PI</span><br><span class="line"></span><br><span class="line">n &#x3D; int(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，实现圆的面积计算，并输出面积结果</span><br><span class="line">########## Begin ##########</span><br><span class="line">def area(n):</span><br><span class="line">    return (pow(n,2)*PI)</span><br><span class="line">#print(&#39;%.2f&#39;%area(n))</span><br><span class="line">print(round(area(n),2))</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h3 id="Python入门之模块"><a href="#Python入门之模块" class="headerlink" title="Python入门之模块"></a>Python入门之模块</h3><h4 id="模块的定义"><a href="#模块的定义" class="headerlink" title="模块的定义"></a>模块的定义</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line"># 输入正整数a和b</span><br><span class="line">a &#x3D; float(input())</span><br><span class="line">b &#x3D; float(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，输入直角三角形的两个直角边的边长a和b，计算出其斜边边长</span><br><span class="line">########## Begin ##########</span><br><span class="line">c&#x3D;math.sqrt(a*a+b*b)</span><br><span class="line">print(&#39;%.3f&#39;%c)</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h4 id="内置模块中的内置函数"><a href="#内置模块中的内置函数" class="headerlink" title="内置模块中的内置函数"></a>内置模块中的内置函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> Python 中常见的内置模块如下：</span><br><span class="line"></span><br><span class="line">os模块：文件和目录，用于提供系统级别的操作；</span><br><span class="line">sys模块：用于提供对解释器相关的操作；</span><br><span class="line">json模块：处理JSON字符串；</span><br><span class="line">logging: 用于便捷记录日志且线程安全的模块；</span><br><span class="line">time&amp;datetime模块：时间相关的操作，时间有三种表示方式；</span><br><span class="line">hashlib模块：用于加密相关操作，代替了md5模块，主要是提供SHA1、SHA224、SHA256、SHA384、SHA512和MD5算法；</span><br><span class="line">random模块：提供随机数。</span><br></pre></td></tr></table></figure>

<h5 id="测试-13"><a href="#测试-13" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 导入math模块</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line"># 输入两个整数a和b</span><br><span class="line">a &#x3D; int(input())</span><br><span class="line">b &#x3D; int(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，要求判断是否存在两个整数，它们的和为a，积为b</span><br><span class="line">########## Begin ##########</span><br><span class="line">for i in range(1,abs(b)+1):</span><br><span class="line">    k&#x3D;b&#x2F;i</span><br><span class="line">    if(math.ceil(k)&#x3D;&#x3D;k and k+i&#x3D;&#x3D;a):</span><br><span class="line">        print(&#39;Yes&#39;)</span><br><span class="line">        break</span><br><span class="line">else:</span><br><span class="line">    print(&#39;No&#39;)</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h3 id="Python-入门之经典函数实例"><a href="#Python-入门之经典函数实例" class="headerlink" title="Python 入门之经典函数实例"></a>Python 入门之经典函数实例</h3><h4 id="递归函数-汉诺塔的魅力"><a href="#递归函数-汉诺塔的魅力" class="headerlink" title="递归函数 - 汉诺塔的魅力"></a>递归函数 - 汉诺塔的魅力</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 输入正整数n</span><br><span class="line">n &#x3D; int(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，对输入的正整数n进行阶乘运算，并输出计算结果。</span><br><span class="line">########## Begin ##########</span><br><span class="line">def fact(n):</span><br><span class="line">    sum &#x3D; 0</span><br><span class="line">    if(n&lt;1):</span><br><span class="line">        sum &#x3D; 1</span><br><span class="line">    else:</span><br><span class="line">        sum &#x3D; n*fact(n-1)</span><br><span class="line">    return (sum)</span><br><span class="line">print(fact(n))</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h4 id="lambda-函数-匿名函数的使用"><a href="#lambda-函数-匿名函数的使用" class="headerlink" title="lambda 函数 - 匿名函数的使用"></a>lambda 函数 - 匿名函数的使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，使用lambda来创建匿名函数，能够判断输入的两个数值的大小</span><br><span class="line">########## Begin ##########</span><br><span class="line">MAXIMUM &#x3D; lambda a,b:a if a&gt;b else b</span><br><span class="line">MINIMUM &#x3D; lambda a,b:a if a&lt;b else b</span><br><span class="line">########## End ##########</span><br><span class="line"></span><br><span class="line"># 输入两个正整数</span><br><span class="line">a &#x3D; int(input())</span><br><span class="line">b &#x3D; int(input())</span><br><span class="line"></span><br><span class="line"># 输出较大的值和较小的值</span><br><span class="line">print(&#39;较大的值是：%d&#39; % MAXIMUM(a,b))</span><br><span class="line">print(&#39;较小的值是：%d&#39; % MINIMUM(a,b))</span><br></pre></td></tr></table></figure>

<h4 id="Map-Reduce-映射与归约的思想"><a href="#Map-Reduce-映射与归约的思想" class="headerlink" title="Map-Reduce - 映射与归约的思想"></a>Map-Reduce - 映射与归约的思想</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"># 输入一个正整数</span><br><span class="line">x &#x3D; int(input())</span><br><span class="line"></span><br><span class="line"># 请在此添加代码，将输入的一个正整数分解质因数</span><br><span class="line">########## Begin ##########</span><br><span class="line">import math as mt</span><br><span class="line">result &#x3D; []</span><br><span class="line">num &#x3D; x</span><br><span class="line">def dg_num(num):</span><br><span class="line">    if num&#x3D;&#x3D;1:</span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">        for i in range(int(mt.sqrt(num))-1):</span><br><span class="line">            if num%(i+2)&#x3D;&#x3D;0:</span><br><span class="line">                result.append(i+2)</span><br><span class="line">                num &#x3D; num&#x2F;&#x2F;(i+2)</span><br><span class="line">                return dg_num(num)</span><br><span class="line">        result.append(num)</span><br><span class="line">dg_num(num)</span><br><span class="line">########## End ##########</span><br><span class="line"></span><br><span class="line"># 输出结果，利用map()函数将结果按照规定字符串格式输出</span><br><span class="line">print(x,&#39;&#x3D;&#39;,&#39;*&#39;.join(map(str,result)))</span><br></pre></td></tr></table></figure>

<h3 id="Python基础之综合练习一"><a href="#Python基础之综合练习一" class="headerlink" title="Python基础之综合练习一"></a>Python基础之综合练习一</h3><h4 id="最小公倍数算法"><a href="#最小公倍数算法" class="headerlink" title="最小公倍数算法"></a>最小公倍数算法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出指定范围内的素数"><a href="#输出指定范围内的素数" class="headerlink" title="输出指定范围内的素数"></a>输出指定范围内的素数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Python对文件的操作"><a href="#Python对文件的操作" class="headerlink" title="Python对文件的操作"></a>Python对文件的操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Python基础之综合练习二"><a href="#Python基础之综合练习二" class="headerlink" title="Python基础之综合练习二"></a>Python基础之综合练习二</h3><h4 id="素数判断"><a href="#素数判断" class="headerlink" title="素数判断"></a>素数判断</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="简单计算器"><a href="#简单计算器" class="headerlink" title="简单计算器"></a>简单计算器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Python进阶篇——面向对象"><a href="#Python进阶篇——面向对象" class="headerlink" title="Python进阶篇——面向对象"></a>Python进阶篇——面向对象</h2><h3 id="Python-入门之类的基础语法"><a href="#Python-入门之类的基础语法" class="headerlink" title="Python 入门之类的基础语法"></a>Python 入门之类的基础语法</h3><h4 id="类的声明与定义"><a href="#类的声明与定义" class="headerlink" title="类的声明与定义"></a>类的声明与定义</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 请在下面填入定义Book类的代码</span><br><span class="line">########## Begin ##########</span><br><span class="line">class Book(object):</span><br><span class="line">########## End ##########</span><br><span class="line">    &#39;书籍类&#39;</span><br><span class="line">    def __init__(self,name,author,data,version):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.author &#x3D; author</span><br><span class="line">        self.data &#x3D; data</span><br><span class="line">        self.version &#x3D; version</span><br><span class="line"></span><br><span class="line">    def sell(self,bookName,price):</span><br><span class="line">        print(&quot;%s的销售价格为%d&quot; %(bookName,price))</span><br></pre></td></tr></table></figure>

<h4 id="类的属性与实例化"><a href="#类的属性与实例化" class="headerlink" title="类的属性与实例化"></a>类的属性与实例化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类的数据属性</span><br><span class="line">类的数据属性只与类绑定，不属于任何实例。在类创建后，属性也被创建，类的数据属性也可以称为静态变量，它通常用来跟踪与类相关的值。类的数据属性使用的并不多，一般都是用实例数据属性</span><br><span class="line"></span><br><span class="line">类中还有很多特殊属性，具体如下:</span><br><span class="line"></span><br><span class="line">ClassName.__name__：类ClassName的名字；</span><br><span class="line">ClassName.__doc__：类ClassName的文档字符串；</span><br><span class="line">ClassName.__bases__：类ClassName的所有父类构成的元组；</span><br><span class="line">ClassName.__dict__：类ClassName的属性；</span><br><span class="line">ClassName.__module__：类ClassName定义所在的模块；</span><br><span class="line">Instance.__class__：实例Instance所对应的类。</span><br></pre></td></tr></table></figure>

<h5 id="测试-14"><a href="#测试-14" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class People:</span><br><span class="line">    # 请在下面填入声明两个变量名分别为name和country的字符串变量的代码</span><br><span class="line">    ########## Begin ##########</span><br><span class="line">    #不会，但是不影响运行</span><br><span class="line">    ########## End ##########</span><br><span class="line">    def introduce(self,name,country):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.country &#x3D; country</span><br><span class="line">        print(&quot;%s来自%s&quot; %(name,country))</span><br><span class="line">name &#x3D; input()</span><br><span class="line">country &#x3D; input()</span><br><span class="line"># 请在下面填入对类People进行实例化的代码，对象为p</span><br><span class="line">########## Begin ##########</span><br><span class="line">p &#x3D; People()</span><br><span class="line">########## End ##########</span><br><span class="line">p.introduce(name,country)</span><br></pre></td></tr></table></figure>

<h4 id="绑定与方法调用"><a href="#绑定与方法调用" class="headerlink" title="绑定与方法调用"></a>绑定与方法调用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import fractionSumtest</span><br><span class="line"># 请在下面填入创建fractionSum的实例fs的代码</span><br><span class="line">########## Begin ##########</span><br><span class="line">f &#x3D; fractionSumtest.fractionSum()</span><br><span class="line">########## End ##########</span><br><span class="line">n &#x3D; int(input())</span><br><span class="line">if n % 2 &#x3D;&#x3D; 0:</span><br><span class="line">    # 请在下面填入调用fractionSumtest类中dcall方法的代码，计算当n为偶数时计算的和</span><br><span class="line">    ########## Begin ##########</span><br><span class="line">    sum &#x3D; f.dcall(f.peven,n)</span><br><span class="line">    ########## End ##########</span><br><span class="line">else:</span><br><span class="line">    # 请在下面填入调用fractionSumtest类中dcall方法的代码，计算当n为奇数时计算的和</span><br><span class="line">    ########## Begin ##########</span><br><span class="line">    sum &#x3D; f.dcall(f.podd,n)</span><br><span class="line">    ########## End ##########</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure>

<h4 id="静态方法与类方法"><a href="#静态方法与类方法" class="headerlink" title="静态方法与类方法"></a>静态方法与类方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class BookSell:</span><br><span class="line">    static_var &#x3D; 100</span><br><span class="line">    def sell(self,name,author,version,price):</span><br><span class="line">        print(&quot;%s的销售价格为%d&quot; %(name,int(price)))</span><br><span class="line">    # 请在下面填入函数修饰符将printStatic()方法声明为静态方法</span><br><span class="line">    ########## Begin ##########</span><br><span class="line">    @staticmethod</span><br><span class="line">    ########## End ##########</span><br><span class="line">    def printStatic():</span><br><span class="line">        print(BookSell.static_var)</span><br><span class="line">    # 请在下面填入函数修饰符将printVersion(cls)方法声明为类方法</span><br><span class="line">    ########## Begin ##########</span><br><span class="line">    @classmethod</span><br><span class="line">    ########## End ##########</span><br><span class="line">    def printVersion(cls):</span><br><span class="line">        print(cls)</span><br></pre></td></tr></table></figure>

<h4 id="类的导入"><a href="#类的导入" class="headerlink" title="类的导入"></a>类的导入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 从 DataChangetest 模块中导入 DataChange 类，并使用该类中的 eightToten(self,p) 方法，实现将输入的八进制转换成十进制输出。</span><br><span class="line">########## Begin ##########</span><br><span class="line">from DataChangetest import DataChange</span><br><span class="line">num &#x3D; DataChange()</span><br><span class="line">p &#x3D; input()</span><br><span class="line">num.eightToten(p)</span><br><span class="line">########## End ##########</span><br></pre></td></tr></table></figure>

<h3 id="Python-入门之类的继承"><a href="#Python-入门之类的继承" class="headerlink" title="Python 入门之类的继承"></a>Python 入门之类的继承</h3><h4 id="初识继承"><a href="#初识继承" class="headerlink" title="初识继承"></a>初识继承</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import animalstest</span><br><span class="line">#from animalstest import animals #方法二</span><br><span class="line"># 请在下面填入定义fish类的代码，fish类继承自animals类</span><br><span class="line">########## Begin ###########</span><br><span class="line">class fish(animalstest.animals):#方法一</span><br><span class="line">########## End ##########</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">    def swim(self):</span><br><span class="line">        print(&quot;%s会游泳&quot; %self.name)</span><br><span class="line"></span><br><span class="line"># 请在下面填入定义leopard类的代码，leopard类继承自animals类</span><br><span class="line">########## Begin ##########</span><br><span class="line">class leopard(animalstest.animals):#方法一</span><br><span class="line">########## End ##########</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">    def climb(self):</span><br><span class="line">        print(&quot;%s会爬树&quot; %self.name)</span><br><span class="line"></span><br><span class="line">fName &#x3D; input()</span><br><span class="line">lName &#x3D; input()</span><br><span class="line">f &#x3D; fish(fName)</span><br><span class="line">f.breath()</span><br><span class="line">f.swim()</span><br><span class="line">f.foraging()</span><br><span class="line">l &#x3D; leopard(lName)</span><br><span class="line">l.breath()</span><br><span class="line">l.run()</span><br><span class="line">l.foraging()</span><br></pre></td></tr></table></figure>

<h4 id="覆盖方法"><a href="#覆盖方法" class="headerlink" title="覆盖方法"></a>覆盖方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="从标准类派生"><a href="#从标准类派生" class="headerlink" title="从标准类派生"></a>从标准类派生</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Python-入门之类的其它特性"><a href="#Python-入门之类的其它特性" class="headerlink" title="Python 入门之类的其它特性"></a>Python 入门之类的其它特性</h3><h3 id="Python面向对象编程实训"><a href="#Python面向对象编程实训" class="headerlink" title="Python面向对象编程实训"></a>Python面向对象编程实训</h3><h3 id="Python面向对象编程综合运用"><a href="#Python面向对象编程综合运用" class="headerlink" title="Python面向对象编程综合运用"></a>Python面向对象编程综合运用</h3><h2 id="Python零基础到精通之：Python进阶篇"><a href="#Python零基础到精通之：Python进阶篇" class="headerlink" title="Python零基础到精通之：Python进阶篇"></a>Python零基础到精通之：Python进阶篇</h2><h3 id="Python-正则表达式"><a href="#Python-正则表达式" class="headerlink" title="Python 正则表达式"></a>Python 正则表达式</h3><h3 id="Python-计算思维训练——文件操作与异常处理"><a href="#Python-计算思维训练——文件操作与异常处理" class="headerlink" title="Python 计算思维训练——文件操作与异常处理"></a>Python 计算思维训练——文件操作与异常处理</h3><h3 id="Python堆栈与队列"><a href="#Python堆栈与队列" class="headerlink" title="Python堆栈与队列"></a>Python堆栈与队列</h3><h3 id="Python-迭代器与生成器"><a href="#Python-迭代器与生成器" class="headerlink" title="Python 迭代器与生成器"></a>Python 迭代器与生成器</h3><h3 id="Python-数据解析：JSON与XML"><a href="#Python-数据解析：JSON与XML" class="headerlink" title="Python 数据解析：JSON与XML"></a>Python 数据解析：JSON与XML</h3><h3 id="Python–进程和线程"><a href="#Python–进程和线程" class="headerlink" title="Python–进程和线程"></a>Python–进程和线程</h3><h1 id="常用占位符含义"><a href="#常用占位符含义" class="headerlink" title="常用占位符含义"></a>常用占位符含义</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s : 获取传入对象的__str__方法的返回值，并将其格式化到指定位置</span><br><span class="line"></span><br><span class="line">r : 获取传入对象的__repr__方法的返回值，并将其格式化到指定位置</span><br><span class="line"></span><br><span class="line">c : 整数：将数字转换成其unicode对应的值，10进制范围为 0 &lt;&#x3D; i &lt;&#x3D; 1114111（py27则只支持0-255）；字符：将字符添加到指定位置</span><br><span class="line"></span><br><span class="line">o : 将整数转换成 八  进制表示，并将其格式化到指定位置</span><br><span class="line"></span><br><span class="line">x : 将整数转换成十六进制表示，并将其格式化到指定位置</span><br><span class="line"></span><br><span class="line">d : 将整数、浮点数转换成 十 进制表示，并将其格式化到指定位置</span><br><span class="line"></span><br><span class="line">e : 将整数、浮点数转换成科学计数法，并将其格式化到指定位置（小写e）</span><br><span class="line"></span><br><span class="line">E : 将整数、浮点数转换成科学计数法，并将其格式化到指定位置（大写E）</span><br><span class="line"></span><br><span class="line">f :  将整数、浮点数转换成浮点数表示，并将其格式化到指定位置（默认保留小数点后6位）</span><br><span class="line"></span><br><span class="line">F : 同上</span><br><span class="line"></span><br><span class="line">g : 自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是e；）</span><br><span class="line"></span><br><span class="line">G : 自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是E；）</span><br><span class="line"></span><br><span class="line">% : 当字符串中存在格式化标志时，需要用 %%表示一个百分号;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习</title>
    <url>/post/8df0ec14.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java学习"><a href="#Java学习" class="headerlink" title="Java学习"></a>Java学习</h1><a id="more"></a>

<h2 id="数学工具类Math"><a href="#数学工具类Math" class="headerlink" title="数学工具类Math"></a>数学工具类Math</h2><p>public static double abs(double num)；绝对值</p>
<p>public static double ceil(double num)；向上取整</p>
<p>public static double floor(double num)；向下取整</p>
<p>public static double round(double num)；四舍五入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(Math.abs(3.14));&#x2F;&#x2F;输出3.14</span><br><span class="line">System.out.println(Math.ceil(3.14));&#x2F;&#x2F;输出4.0</span><br><span class="line">System.out.println(Math.floor(3.14));&#x2F;&#x2F;输出3.0</span><br><span class="line">System.out.println(Math.round(3.14));&#x2F;&#x2F;输出3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>1.final修饰的类无法继承。</p>
<p>2.final修饰的方法无法覆盖。</p>
<p>3.final修饰的变量只能赋值一次。</p>
<p>4.final修饰的引用一旦指向某个对象， 则不能再重新指向其他对象，但该引用指向的对象内部的数据是可以修改的。</p>
<p>5.final修饰的实例变量必须手动初始化，不能采用系统默认值。</p>
<p>6.final修饰的实例变量一般和static联合使用，成为常量。</p>
<h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><p>1.抽象类定义：在class前添加abstract关键字就行。</p>
<p>2.抽象类是无法实例化的，无法创建对象的，所以抽象类是用来被子类继承的。</p>
<p>3.final和abstract不能联合使用，这两个关键字是对立的。</p>
<p>4.抽象类的子类可以使抽象类，也可以是非抽象类。</p>
<p>5.抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供子类使用的。</p>
<p>6.抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中。</p>
<p>7.抽象方法怎么定义？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract void doSome();</span><br></pre></td></tr></table></figure>

<p>8.一个非抽象类，继承抽象类，必须将抽象类中的抽象方法覆盖（实现）。</p>
<ul>
<li><p>面试题（判断题）：Java语言中凡是没有方法体的方法都是抽象方法。</p>
<p>不对，错误的。</p>
<p>Object类种就有很多都没有方法体，都是以“；“结尾的，但是他们都不是抽象方法，例如：</p>
<p>public native int hashCode();</p>
<p>这个方法底层调用了C++写的动态链接库程序。</p>
<p>前面修饰符列表中没有：abstract。有一个native。表示调用JVM本地程序。</p>
</li>
<li><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2></li>
</ul>
<p>1.接口是一种引用数据类型。编译之后也是一个class字节码文件。</p>
<p>2.借口是完全抽象。</p>
<p>3.接口怎么定义：[修饰符列表] interface 接口名{}</p>
<p>4.接口支持多继承。</p>
<p>5.接口中只包含常量+抽象方法。</p>
<p>6.接口中的所有元素都是public修饰的。（都是公开的。）</p>
<p>7.接口中的抽象方法定义时：public abstract修饰符可以省略。常量也是。</p>
<p>8.接口中的方法都是抽象方法，所以接口中的方法不能有方法体。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;定义接口</span><br><span class="line">interface A&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;接口支持继承</span><br><span class="line">interface B extends A&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;支持多继承</span><br><span class="line">interface C extends A,B&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我的数学方法</span><br><span class="line">interface MyMath&#123;</span><br><span class="line">	&#x2F;&#x2F;常量</span><br><span class="line">	public static final double PI &#x3D; 3.1415926;</span><br><span class="line">	&#x2F;&#x2F;也可以省略</span><br><span class="line">	double PI &#x3D; 3.1415926;&#x2F;&#x2F;PI是常量，不可变</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;抽象方法</span><br><span class="line">	public abstract int sum(int a , int b);</span><br><span class="line">	&#x2F;&#x2F;也可以省略</span><br><span class="line">	&#x2F;&#x2F;int sum(int a , int b);</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;接口中的方法可以有方法体嘛？</span><br><span class="line">	&#x2F;&#x2F;错误：接口抽象方法不能带有主体</span><br><span class="line">	&#x2F;*</span><br><span class="line">	void doSome()&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口的基础语法：</p>
<p>​    1.类和类之间叫做继承（关键字：extends），类和接口之间叫做实现（关键字：implements）。</p>
<p>​    2.当一个<strong>非抽象</strong>的类实现接口的话，必须将接口中所有抽象方法全部实现（覆盖、重写）。</p>
<p>java类名：interfaceTest</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class interfaceTest &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    	&#x2F;&#x2F;多态</span><br><span class="line">        &#x2F;&#x2F;父类型的引用指向子类型的对象</span><br><span class="line">        MyMath mm &#x3D; new m();</span><br><span class="line">        &#x2F;&#x2F;面向接口编程</span><br><span class="line">        int sum &#x3D; mm.sum(10, 80);</span><br><span class="line">        int sub &#x3D; mm.sub(20, 5);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(sub);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface MyMath&#123;</span><br><span class="line">    double PI &#x3D; 3.1415926;</span><br><span class="line">    int sum(int a , int b);&#x2F;&#x2F;默认public访问权限</span><br><span class="line">    int sub(int a , int b);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;非抽象类实现接口</span><br><span class="line">class m implements MyMath&#123;</span><br><span class="line">    &#x2F;&#x2F;public不能省略，访问权限不能低于接口的访问权限</span><br><span class="line">    &#x2F;&#x2F;实现接口的方法</span><br><span class="line">    public int sum(int a , int b)&#123;</span><br><span class="line">        return a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    public int sub(int a , int b)&#123;</span><br><span class="line">        return a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个类可以同时实现多个接口：</p>
<p>这个机制弥补了Java中类和类之间的单继承（为了简单而出现）带来的缺陷。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class interfaceTest &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;父类型的引用指向子类型的对象</span><br><span class="line">        A a &#x3D; new C();</span><br><span class="line">        int sum &#x3D; a.sum(10, 20);</span><br><span class="line">        &#x2F;&#x2F;a.sub(20,10);  编译报错，A接口中没有sub（）方法</span><br><span class="line">        &#x2F;*</span><br><span class="line">        *接口和接口之间在进行强制类型转换的时候，没有继承关系，也可以强制转换</span><br><span class="line">        但注意：运行时可能出现ClassCastException异常</span><br><span class="line">        *编译没问题，运行有问题</span><br><span class="line">        B b &#x3D; (B) a;</span><br><span class="line">        a.sub(20,10);</span><br><span class="line">        **&#x2F;</span><br><span class="line">        &#x2F;&#x2F;向下转型记得转型前先 if+instanceof 进行判断</span><br><span class="line">        if(a instanceof B) &#123;</span><br><span class="line">            B b &#x3D; (B) a;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        &#x2F;&#x2F;也可以直接向下转型</span><br><span class="line">        C c &#x3D; (C) a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface A&#123;</span><br><span class="line">    public int sum(int a , int b);</span><br><span class="line">&#125;</span><br><span class="line">interface B&#123;</span><br><span class="line">    public int sub(int a , int b);</span><br><span class="line">&#125;</span><br><span class="line">class C implements A&#123;</span><br><span class="line">    public int sum(int a, int b) &#123;</span><br><span class="line">        return a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">public class equalsTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">            &#x2F;&#x2F;多态（自动类型转换）</span><br><span class="line">        Object o1&#x3D;new String();</span><br><span class="line">        Object o2&#x3D;new User();</span><br><span class="line">        Object o3&#x3D;new Address();</span><br><span class="line"></span><br><span class="line">        User u1&#x3D;new User(&quot;张三&quot;,new Address(&quot;河南&quot;,&quot;郑州&quot;,&quot;惠济区&quot;));</span><br><span class="line">        User u2&#x3D;new User(&quot;张三&quot;,new Address(&quot;河南&quot;,&quot;郑州&quot;,&quot;惠济区&quot;));</span><br><span class="line">        System.out.println(u1.equals(u2));&#x2F;&#x2F;true</span><br><span class="line">        User u3&#x3D;new User(&quot;李四&quot;,new Address(&quot;河南&quot;,&quot;郑州&quot;,&quot;惠济区&quot;));</span><br><span class="line">        System.out.println(u1.equals(u3));&#x2F;&#x2F;false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class User&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Address addr;</span><br><span class="line">    public User()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public User(String name,Address addr)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.addr&#x3D;addr;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;equals重写</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (o &#x3D;&#x3D; null || !(o instanceof User)) return false;</span><br><span class="line">        User user &#x3D; (User) o;</span><br><span class="line">        return name.equals(user.name) &amp;&amp;</span><br><span class="line">                addr.equals(user.addr);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> class Address&#123;</span><br><span class="line">    String zipcode;</span><br><span class="line">    String street;</span><br><span class="line">    String city;</span><br><span class="line">    &#x2F;&#x2F;无形参</span><br><span class="line">    public Address()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;有形参</span><br><span class="line">    public Address(String city,String street,String zipcode)&#123;</span><br><span class="line">        this.city&#x3D;city;</span><br><span class="line">        this.street&#x3D;street;</span><br><span class="line">        this.zipcode&#x3D;zipcode;</span><br><span class="line">    &#125;</span><br><span class="line">     &#x2F;&#x2F;equals重写</span><br><span class="line">     @Override</span><br><span class="line">     public boolean equals(Object o) &#123;</span><br><span class="line">         if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">         if (o &#x3D;&#x3D; null || !(o instanceof Address)) return false;</span><br><span class="line">         Address address &#x3D; (Address) o;</span><br><span class="line">         return zipcode.equals(address.zipcode) &amp;&amp;</span><br><span class="line">                 street.equals(address.street) &amp;&amp;</span><br><span class="line">                 city.equals(address.city);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数据这种数据结构的优点和缺点是什么？"><a href="#数据这种数据结构的优点和缺点是什么？" class="headerlink" title="数据这种数据结构的优点和缺点是什么？"></a>数据这种数据结构的优点和缺点是什么？</h3><p>​    优点：查询/查找/检索某个下标上的元素时效率极高。可以说是查询效率最高的一个数据结构。</p>
<p>​        为什么检索效率高？</p>
<p>​            第一：每一个元素的内存地址在空间储存上是连续的。</p>
<p>​            第二：每一个元素类型是相同的，所以占用的空间大小一样。</p>
<p>​             第三：知道每一个元素内存地址，知道每一个元素占用空间的大小，又知道下标，所以通过一个数学表达式就可以计算出某个下标上元素的内存地址。直接通过内存地址定位元素。所以数据的检索效率是高的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class arrayTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] x&#x3D;&#123;1,2,4,3,5&#125;;</span><br><span class="line">        printArray(x);</span><br><span class="line">        &#x2F;&#x2F;创建String数组</span><br><span class="line">        String[] stringArray&#x3D;&#123;&quot;asd&quot;,&quot;asd&quot;,&quot;asa&quot;,&quot;awq&quot;&#125;;</span><br><span class="line">        printArray(stringArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void printArray(int[] a) &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt;a.length ; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);&#x2F;&#x2F;1,2,3,4,5</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void printArray(String[] args) &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt;args.length ; i++) &#123;</span><br><span class="line">            System.out.println(&quot;String数组中的元素：&quot;+args[i]);&#x2F;&#x2F;String数组中的元素：asdString数组中的元素：asdString数组中的元素：asaString数组中的元素：awq</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数组的拷贝"><a href="#数组的拷贝" class="headerlink" title="数组的拷贝"></a>数组的拷贝</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class arrayCopyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] src &#x3D; &#123;1,2,3,4&#125;;&#x2F;&#x2F;创建拷贝源</span><br><span class="line">       &#x2F;* int[] dest &#x3D; new int[20];&#x2F;&#x2F;创建拷贝目标</span><br><span class="line">        System.arraycopy(src,1,dest,4,3);&#x2F;&#x2F;调用JDK System类中的arraycopy方法，完成数组的拷贝，注意下标是从0开始</span><br><span class="line">        for (int i &#x3D; 0; i &lt;dest.length ; i++) &#123;</span><br><span class="line">            System.out.println(dest[i]);&#x2F;&#x2F;0 0 0 0 2 3 4...0</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line">        int[] dest &#x3D; new int[10];</span><br><span class="line">        System.arraycopy(src,0,dest,0,src.length);&#x2F;&#x2F;复制拷贝源数组的全部数据</span><br><span class="line">        for (int i &#x3D; 0; i &lt;dest.length ; i++) &#123;</span><br><span class="line">            System.out.println(dest[i]);&#x2F;&#x2F;1 2 3 4 0 0...</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] obj &#x3D; &#123;new Object(),new Object(),new Object()&#125;;</span><br><span class="line">        Object[] o &#x3D; new Object[20];</span><br><span class="line">        System.arraycopy(obj,0,o,0,obj.length);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; o.length; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F;输出obj对象的地址</span><br><span class="line">            System.out.println(o[i]);&#x2F;&#x2F;java.lang.Object@10f87f48 java.lang.Object@b4c966a java.lang.Object@2f4d3709 null null...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class mq &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[]a&#x3D;&#123;1,4,6,2,10,5&#125;;</span><br><span class="line">        int count&#x3D;0;</span><br><span class="line">        for (int i &#x3D; a.length-1; i &gt; 0; i--) &#123;</span><br><span class="line">            for (int j &#x3D; 0; j &lt; i; j++) &#123;</span><br><span class="line">                &#x2F;&#x2F;输出次数</span><br><span class="line">                count++;</span><br><span class="line">                if(a[j]&gt;a[j+1])&#123;</span><br><span class="line">                    int temp &#x3D; a[j];</span><br><span class="line">                    a[j]&#x3D;a[j+1];</span><br><span class="line">                    a[j+1]&#x3D;temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;比较次数:&quot;+count);&#x2F;&#x2F;比较次数:15</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+&quot; &quot;);&#x2F;&#x2F;1 2 4 5 6 10</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择排序法"><a href="#选择排序法" class="headerlink" title="选择排序法"></a>选择排序法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class select &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[]a&#x3D;&#123;1,4,6,2,10,5&#125;;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length-1; i++) &#123;</span><br><span class="line">            int min &#x3D; i;</span><br><span class="line">            for (int j &#x3D; i+1; j &lt; a.length; j++) &#123;</span><br><span class="line">                if(a[j]&lt;a[min])&#123;</span><br><span class="line">                    min&#x3D;j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(min!&#x3D;i)&#123;</span><br><span class="line">                int temp &#x3D; a[min];</span><br><span class="line">                a[min] &#x3D; a[i];</span><br><span class="line">                a[i] &#x3D; temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+&quot; &quot;);&#x2F;&#x2F;1 2 4 5 6 10 </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class ArrayUtil &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner in &#x3D; new Scanner(System.in);</span><br><span class="line">        int[] a&#x3D;&#123;100,201,300,401,500,600,800,1000&#125;;&#x2F;&#x2F;要求目标序列是拍好序的</span><br><span class="line">        System.out.print(&quot;元素中有：&quot;);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();&#x2F;&#x2F;转行</span><br><span class="line">        System.out.print(&quot;请输入想要查找下标的元素:&quot;);</span><br><span class="line">        int b &#x3D; in.nextInt();</span><br><span class="line">        int index &#x3D; binarySearch(a,b);</span><br><span class="line">        System.out.println(index &#x3D;&#x3D; -1 ? &quot;该元素不存在！&quot; : &quot;该元素下标：&quot;+index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;@return -1表示该元素不存在，其他的表示返回该元素的下标</span><br><span class="line">    private static int binarySearch(int[] a,int dest) &#123;</span><br><span class="line">        int begin &#x3D; 0;</span><br><span class="line">        int end &#x3D; a.length-1;</span><br><span class="line">        while (begin &lt;&#x3D; end) &#123;</span><br><span class="line">            int mid &#x3D; (begin + end) &#x2F; 2;</span><br><span class="line">            if (a[mid] &#x3D;&#x3D; dest) &#123;</span><br><span class="line">                return mid;</span><br><span class="line">            &#125; else if (a[mid] &lt; dest) &#123;</span><br><span class="line">                &#x2F;&#x2F;目标在”中间“右边</span><br><span class="line">                &#x2F;&#x2F;开始元素小标需要发生变化</span><br><span class="line">                begin &#x3D; mid + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F;a[mid] &gt; dest</span><br><span class="line">                &#x2F;&#x2F;目标在“中间”左边</span><br><span class="line">                end &#x3D; mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Sting类"><a href="#Sting类" class="headerlink" title="Sting类"></a>Sting类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StringTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a &#x3D; &quot;a&quot;;</span><br><span class="line">        String b &#x3D; &quot;a&quot;;</span><br><span class="line">        System.out.println(a &#x3D;&#x3D; b);&#x2F;&#x2F;true</span><br><span class="line">        String c &#x3D; new String(&quot;b&quot;);</span><br><span class="line">        String d &#x3D; new String(&quot;b&quot;);</span><br><span class="line">        System.out.println(c &#x3D;&#x3D; d);&#x2F;&#x2F;false</span><br><span class="line">        &#x2F;&#x2F;所以字符串之间比较不能使用“&#x3D;&#x3D;”，“&#x3D;&#x3D;”不保险，应该调用String类的equals方法</span><br><span class="line">        &#x2F;&#x2F;String类已经重写equals方法</span><br><span class="line">        System.out.println(c.equals(d));&#x2F;&#x2F;true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于String类中的构造方法</p>
<p>一、String s =new String(“”);</p>
<p>二、String s = “”;</p>
<p>三、String s =new String(char数组);</p>
<p>四、String s =new String(char数组,起始下标,长度);</p>
<p>五、String s =new String(byte数组);</p>
<p>六、String s =new String(byte数组,起始下标,长度);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StringTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        byte[] b &#x3D; &#123;97,98,99&#125;;&#x2F;&#x2F;97是a 98是b 99是c</span><br><span class="line">        String s1 &#x3D; new String(b,1,2);</span><br><span class="line">        System.out.println(s1);&#x2F;&#x2F;bc</span><br><span class="line">        char[] c &#x3D; &#123;&#39;我&#39;,&#39;是&#39;,&#39;好&#39;,&#39;人&#39;&#125;;</span><br><span class="line">        String s2 &#x3D; new String(c,2,2);</span><br><span class="line">        System.out.println(s2);&#x2F;&#x2F;好人</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char c &#x3D;&quot;我是好人&quot;.charAt(1);</span><br><span class="line">System.out.println(c);&#x2F;&#x2F;国</span><br></pre></td></tr></table></figure>

<h3 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h3><p>字符串比较使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i &#x3D; &quot;abc&quot;.compareTo(&quot;abc&quot;);</span><br><span class="line">System.out.println(i);&#x2F;&#x2F;0</span><br><span class="line">int j &#x3D; &quot;abc&quot;.compareTo(&quot;abd&quot;);</span><br><span class="line">System.out.println(j);&#x2F;&#x2F;-1</span><br><span class="line">int h &#x3D; &quot;abd&quot;.compareTo(&quot;abc&quot;);</span><br><span class="line">System.out.println(h);&#x2F;&#x2F;1</span><br><span class="line">int k &#x3D; &quot;bac&quot;.compareTo(&quot;abc&quot;);</span><br><span class="line">System.out.println(k);&#x2F;&#x2F;1</span><br></pre></td></tr></table></figure>

<h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p>判断前面的字符串是否包含后面的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;HelloWorld&quot;.contains(&quot;Hello&quot;));&#x2F;&#x2F;true</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;.contains(&quot;Helle&quot;));&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure>

<h3 id="endWith"><a href="#endWith" class="headerlink" title="endWith"></a>endWith</h3><p>判断当前字符串是否以某个字符串结尾</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;HelloWorld.java&quot;.endWith(&quot;.java&quot;));&#x2F;&#x2F;true</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;.endWith(&quot;Helle&quot;));&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure>

<h3 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes"></a>getBytes</h3><p>将字符串对象转换成字节数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">byte[] by &#x3D; &quot;asdasf&quot;.getBytes();</span><br><span class="line">for (int i &#x3D; 0; i &lt; by.length; i++) &#123;</span><br><span class="line">  System.out.println(by[i]);&#x2F;&#x2F;97 115 100 97 115 102 </span><br></pre></td></tr></table></figure>

<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>判断某个子字符串在当前字符串中第一次出现的索引（下标）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;askjhfdiukahdfiuhsad.2315361.kaljhsdfklja&quot;.indexOf(&quot;jhf&quot;));&#x2F;&#x2F;3</span><br></pre></td></tr></table></figure>

<h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h3><p>判断某个字符串是否为空</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D; &quot;&quot;;</span><br><span class="line">System.out.println(s.isEmpty);&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>

<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>判断数组长度和判断字符串长度不一样</p>
<p>判断数组长度是length属性，判断字符串长度是length()方法</p>
<h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><p>判断某个子字符串在当前字符串中最后一次出现的索引（下标）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;askjhfdiukahdfiuhsad.2315361.kaljhsdfklja&quot;.lastIndexOf(&quot;jh&quot;));&#x2F;&#x2F;32</span><br></pre></td></tr></table></figure>

<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>替换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D;&quot;www.baidu.com&quot;.replace(&quot;www.&quot;,&quot;http:&#x2F;&#x2F;&quot;);</span><br><span class="line">System.out.println(s);&#x2F;&#x2F;http:&#x2F;&#x2F;baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>拆分字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> String s &#x3D; &quot;www&#x3D;baidu&#x3D;com&quot;;</span><br><span class="line"> String[] ss &#x3D;s.split(&quot;&#x3D;&quot;);</span><br><span class="line"> for (int i &#x3D; 0; i &lt; ss.length; i++) &#123;</span><br><span class="line">     System.out.println(ss[i]);&#x2F;&#x2F;www baidu com</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith"></a>startsWith</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;HelloWorld.java&quot;.endWith(&quot;Hello&quot;));&#x2F;&#x2F;true</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;.endWith(&quot;World&quot;));&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure>

<h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><p>截取字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D; &quot;www.baidu.com&quot;;</span><br><span class="line">System.out.println(s.substring(4));&#x2F;&#x2F;baidu.com</span><br><span class="line">System.out.println(s.substring(4,7));&#x2F;&#x2F;bai</span><br></pre></td></tr></table></figure>

<h3 id="toCharArray"><a href="#toCharArray" class="headerlink" title="toCharArray()"></a>toCharArray()</h3><p>将字符串转换成char数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char[] c &#x3D; &quot;我是好人&quot;.toCharArray();</span><br><span class="line">for (int i &#x3D; 0; i &lt; c.length; i++) &#123;</span><br><span class="line">   System.out.println(c[i]);&#x2F;&#x2F;我 是 好 人</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="toLowerCase-和toUpperCase"><a href="#toLowerCase-和toUpperCase" class="headerlink" title="toLowerCase()和toUpperCase()"></a>toLowerCase()和toUpperCase()</h3><p>转换为大小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D; &quot;WWWbaiducom&quot;;</span><br><span class="line">System.out.println(s.toUpperCase());&#x2F;&#x2F;WWWBAIDUCOM</span><br><span class="line">System.out.println(s.toLowerCase());&#x2F;&#x2F;wwwbaiducom</span><br></pre></td></tr></table></figure>

<h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p>去除字符串前后空白</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot; jahsdjkhakjs   askljdklasj   &quot;.trim());&#x2F;&#x2F;jahsdjkhakjs   askljdklasj</span><br></pre></td></tr></table></figure>

<h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><p>将“非字符串”转换成“字符串”</p>
<p>凡是**System.out.println();**的都是字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D; String.valueOf(true);&#x2F;&#x2F;true字符串</span><br><span class="line">String s1 &#x3D; String.valueOf(100);&#x2F;&#x2F;100字符串</span><br><span class="line">System.out.println(true);&#x2F;&#x2F;字符串</span><br></pre></td></tr></table></figure>

<h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer()"></a>StringBuffer()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个初始容量为16个byte[]数组(字符串缓冲区对象)</span><br><span class="line">StringBuffer st &#x3D; new StringBuffer();&#x2F;&#x2F;可以在括号中给定初始化容量</span><br><span class="line">st.append(465);</span><br><span class="line">st.append(&quot;asdad&quot;);</span><br><span class="line">st.append(3.14);</span><br><span class="line">st.append(456L);</span><br><span class="line">System.out.println(st);&#x2F;&#x2F;465asdad3.14456</span><br></pre></td></tr></table></figure>

<h4 id="如何优化StringBuffer的性能？"><a href="#如何优化StringBuffer的性能？" class="headerlink" title="如何优化StringBuffer的性能？"></a>如何优化StringBuffer的性能？</h4><ul>
<li>在创建StringBuffer的时候尽可能的给定一个初始化容量</li>
<li>最好减少底层数组的扩容次数，预估计一下，给一个大一些初始化容量</li>
</ul>
<h4 id="StringBuffer和StringBuilder的区别？"><a href="#StringBuffer和StringBuilder的区别？" class="headerlink" title="StringBuffer和StringBuilder的区别？"></a>StringBuffer和StringBuilder的区别？</h4><ul>
<li>StringBuffer是线程安全的</li>
<li>StringBuild是非线程安全的</li>
</ul>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>为什么要再提供8种包装类？</p>
<ul>
<li><p>因为8种基本数据类型不够用。</p>
<p>基本数据类型                                包装类型</p>
<p>byte                                              java.long.Byte（父类Number）</p>
<p>short                                            java.long.Shory（父类Number）</p>
<p>int                                                 java.long.Integer（父类Number）</p>
<p>long                                              java.long.Long（父类Number）</p>
<p>float                                              java.long.Float（父类Number）</p>
<p>double                                         java.long.Double（父类Number）</p>
<p>boolean                                       java.long.Boolean（父类Object）</p>
<p>char                                              java.long.Character（父类Object）</p>
</li>
</ul>
<p>Number是一个抽象类，无法实例化对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;基本数据类型-（转换）——&gt;引用数据类型（装箱）</span><br><span class="line">Integer i &#x3D; new Integer(456);</span><br><span class="line">&#x2F;&#x2F;引用数据类型-（转换）——&gt;基本数据类型（拆箱）</span><br><span class="line">float f &#x3D; i.floatValue();</span><br><span class="line">System.out.println(f);&#x2F;&#x2F;456.0</span><br></pre></td></tr></table></figure>

<h3 id="MAX-VALUE和MIN-VALUE"><a href="#MAX-VALUE和MIN-VALUE" class="headerlink" title="MAX_VALUE和MIN_VALUE"></a>MAX_VALUE和MIN_VALUE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(Integer.MAX_VALUE);&#x2F;&#x2F;2147483647</span><br><span class="line">System.out.println(Integer.MIN_VALUE);&#x2F;&#x2F;-2147483648</span><br></pre></td></tr></table></figure>

<h2 id="自动装箱和自动拆箱"><a href="#自动装箱和自动拆箱" class="headerlink" title="自动装箱和自动拆箱"></a>自动装箱和自动拆箱</h2><p>自动装箱：基本数据类型自动转换成包装类（基本数据类型–（自动转换）–&gt;包装类型：自动装箱）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Integer x &#x3D; 900;</span><br></pre></td></tr></table></figure>

<p>自动拆箱：包装类自动转换成基本数据类型（包装类型–（自动装箱）–&gt;基本数据类型：自动拆箱）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int y &#x3D; x;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Integer a &#x3D; 128;</span><br><span class="line">Integer b &#x3D; 128;</span><br><span class="line">System.out.println(a &#x3D;&#x3D; b);&#x2F;&#x2F;false</span><br><span class="line">&#x2F;*java中为了提高程序的执行效率，将[-128到127]之间的所有包装对象提前创建好，放到了一个方法区的“整数型常量池”当中，目的是只要用这个区间的数据不需要再new了，直接从整数型常量池当中取出来*&#x2F;</span><br><span class="line">Integer c &#x3D; 127;</span><br><span class="line">Integer d &#x3D; 127;</span><br><span class="line">System.out.println(c &#x3D;&#x3D; d);&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>

<h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>Date–&gt;String</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class DateTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Date d &#x3D; new Date();</span><br><span class="line">        System.out.println(d);&#x2F;&#x2F;Fri Oct 30 21:04:01 CST 2020</span><br><span class="line">        &#x2F;&#x2F;格式化Data</span><br><span class="line">        SimpleDateFormat sd &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        String s &#x3D; sd.format(d);</span><br><span class="line">        System.out.println(s);&#x2F;&#x2F;2020-10-30 21:04:01</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>String–&gt;Date</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class DateTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F;String--&gt;Date</span><br><span class="line">        String t &#x3D; &quot;2020-10-30 21:21:50&quot;;</span><br><span class="line">        SimpleDateFormat sd2 &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        Date d1 &#x3D; sd2.parse(t);</span><br><span class="line">        System.out.println(d1);&#x2F;&#x2F;Fri Oct 30 21:21:50 CST 2020</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="currentTimeMillis"><a href="#currentTimeMillis" class="headerlink" title="currentTimeMillis()"></a>currentTimeMillis()</h2><p>获取自1970年1月1日到系统当前时间的总毫秒数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DateTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        long begin &#x3D; System.currentTimeMillis();</span><br><span class="line">        print();</span><br><span class="line">        long end &#x3D;System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;输出耗费&quot;+(end-begin)+&quot;毫秒&quot;);&#x2F;&#x2F;输出耗费9毫秒</span><br><span class="line">    &#125;</span><br><span class="line">    public static void print()&#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">            System.out.println(&quot;i&#x3D;&quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DecimalFormat"><a href="#DecimalFormat" class="headerlink" title="DecimalFormat()"></a>DecimalFormat()</h2><p>关于数字的格式化</p>
<p>#代表任意数字</p>
<p>,代表千分位</p>
<p>.代表小数点</p>
<p>0补位</p>
<h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><p>属于大数据，精度极高，不属于基本数据类型，属于Java对象（引用数据类型）</p>
<p>专门用在财务方面</p>
<h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line">public class random &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建随机数</span><br><span class="line">        Random r &#x3D; new Random();</span><br><span class="line">        &#x2F;&#x2F;随机产生一个int类型取值范围内的数字</span><br><span class="line">        int i &#x3D; r.nextInt();</span><br><span class="line">        System.out.println(i);&#x2F;&#x2F;-595707239</span><br><span class="line">        &#x2F;&#x2F;产生[0~100]之间的随机数，不能产生101</span><br><span class="line">        int i1 &#x3D; r.nextInt(101);</span><br><span class="line">        System.out.println(i1);&#x2F;&#x2F;11</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Random;</span><br><span class="line">&#x2F;&#x2F;生成5个不相同的随机数</span><br><span class="line">public class random &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Random r &#x3D; new Random();</span><br><span class="line">        int[] a &#x3D;new int[5];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i]&#x3D;-1;</span><br><span class="line">        &#125;</span><br><span class="line">        int index &#x3D; 0;</span><br><span class="line">        while (index &lt; a.length)&#123;</span><br><span class="line">            int num &#x3D; r.nextInt(6);</span><br><span class="line">            System.out.println(&quot;生成的随机数：&quot;+num);&#x2F;&#x2F;1 4 2 5 2 3</span><br><span class="line">            if(!contain(a,num))&#123;</span><br><span class="line">                a[index++]&#x3D;num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);&#x2F;&#x2F;1 4 2 5 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static boolean contain(int[] a,int key)&#123;</span><br><span class="line">        &#x2F;*Arrays.sort(a);</span><br><span class="line">        return Arrays.binarySearch(a, key) &gt;&#x3D;0;</span><br><span class="line">        存在bug*&#x2F;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            if (a[i] &#x3D;&#x3D; key)&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p>如果返回值是2种，建议用Boolean；如果是多种，建议用enum</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class enumTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Result r1 &#x3D; divide(10,5);</span><br><span class="line">        Result r2 &#x3D; divide(10,0);</span><br><span class="line">        System.out.println(r1 &#x3D;&#x3D; Result.SUCCESS ? &quot;计算成功&quot; : &quot;计算失败&quot;);&#x2F;&#x2F;计算成功</span><br><span class="line">        System.out.println(r2 &#x3D;&#x3D; Result.SUCCESS ? &quot;计算成功&quot; : &quot;计算失败&quot;);&#x2F;&#x2F;计算失败</span><br><span class="line">    &#125;</span><br><span class="line">    public static Result divide(int a ,int b)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int c &#x3D; a &#x2F; b;</span><br><span class="line">            return Result.SUCCESS;</span><br><span class="line">        &#125; catch(Exception e)&#123;</span><br><span class="line">            return Result.FAIL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">enum Result&#123;</span><br><span class="line">    SUCCESS,FAIL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p>Java异常的作用：增强程序健壮性。</p>
<p>Java异常以类和对象的形式存在。</p>
<p>异常对象的两个方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String msg &#x3D; e.getMessage();</span><br><span class="line">e.printStackTrace();</span><br></pre></td></tr></table></figure>

<h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>面试题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class finallyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int r &#x3D; m() ;</span><br><span class="line">        System.out.println(r);  &#x2F;&#x2F;100</span><br><span class="line">    &#125;</span><br><span class="line">    public static int m()&#123;</span><br><span class="line">        int i &#x3D; 100;</span><br><span class="line">        try &#123;</span><br><span class="line">        &#x2F;&#x2F;Java方法中有一条语法规则：return语句一旦执行，整个方法必须结束</span><br><span class="line">            return i;</span><br><span class="line">            &#x2F;&#x2F;System.exit(0);执行后退出JVM，finally语句中的代码不执行</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自己创建异常"><a href="#自己创建异常" class="headerlink" title="自己创建异常"></a>自己创建异常</h2><p>创建：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;编写一个类继承Exception或者RunTimeException</span><br><span class="line">&#x2F;&#x2F;一个带有String参数的，一个无参数的</span><br><span class="line">public class MyException extends Exception&#123;</span><br><span class="line">   &#x2F;&#x2F;编译时异常</span><br><span class="line">        public MyException()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        public MyException(String s)&#123;</span><br><span class="line">            super(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;*public class MyException extends RuntimeException&#123;</span><br><span class="line">        &#x2F;&#x2F;运行时异常</span><br><span class="line">    &#125;*&#x2F;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyExceptionTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建异常对象(只new了异常对象，并没有手动抛出)</span><br><span class="line">        MyException e &#x3D; new MyException(&quot;用户名不能为空！&quot;);</span><br><span class="line">        &#x2F;&#x2F;打印异常堆栈信息</span><br><span class="line">        e.printStackTrace();&#x2F;&#x2F;MyException: 用户名不能为空！  at MyExceptionTest.main(MyExceptionTest.java:4)</span><br><span class="line">        &#x2F;&#x2F;获取异常简单描述信息</span><br><span class="line">        String m &#x3D; e.getMessage();</span><br><span class="line">        System.out.println(m);&#x2F;&#x2F;用户名不能为空！</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>重写之后的方法不能比重写前的方法抛出更多的异常，可以更少</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="所有的实现类："><a href="#所有的实现类：" class="headerlink" title="所有的实现类："></a>所有的实现类：</h3><ul>
<li>ArrayList：底层是数组</li>
<li>LinkedList：底层是双向链表</li>
<li>Vector：底层是数组，线程安全，效率较低，使用较少</li>
<li>HashSet：底层是HashMap，放到HashSet集合中的元素等同于放到HashMap集合key部分</li>
<li>TreeSet：底层是TreeMap，放到TreeSet集合中的元素等同于放到TreeMap集合key部分</li>
<li>HashMap：底层是哈希表</li>
<li>Hashtable：底层是哈希表，只不过线程安全的，效率较低，使用较少</li>
<li>Properties：是线程安全的，并且key和value只能存储字符串String</li>
<li>TreeMap：底层是二叉树，TreeMap集合的key可能自动按照大小顺序排序</li>
</ul>
<p>List集合存储元素的特点：</p>
<p>​    有序可重复</p>
<p>​    有序：存进去和取出的顺序相同</p>
<p>Set集合存储元素的特点：</p>
<p>​    无序不可重复</p>
<p>​    无序：存进去和取出的顺序不一定相同</p>
<p>SortedSet集合存储元素的特点：</p>
<p>​    首先是无序不可重复的，但是SortedSet集合中的元素是可排序的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">public class CollectionTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Collection c &#x3D;new ArrayList();</span><br><span class="line">        c.add(200);&#x2F;&#x2F;自动装箱</span><br><span class="line">        c.add(true);</span><br><span class="line">        c.add(3.14);</span><br><span class="line">        c.add(new Student());</span><br><span class="line">        c.add(new Object());</span><br><span class="line">        c.add(&quot;浩克&quot;);</span><br><span class="line">        System.out.println(&quot;集合中的个数有&quot;+c.size());&#x2F;&#x2F;集合中的个数有6</span><br><span class="line">        boolean b &#x3D; c.contains(&quot;浩克&quot;);</span><br><span class="line">        System.out.println(b);&#x2F;&#x2F;true</span><br><span class="line">        boolean bo &#x3D; c.contains(201);&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(bo);</span><br><span class="line">        c.remove(&quot;浩克&quot;);</span><br><span class="line">        System.out.println(&quot;集合中的个数有&quot;+c.size());&#x2F;&#x2F;集合中的个数有5</span><br><span class="line">        System.out.println(c.isEmpty());&#x2F;&#x2F;false,判断是否为空</span><br><span class="line">        c.clear();</span><br><span class="line">        System.out.println(c.isEmpty());&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;集合中的个数有&quot;+c.size());&#x2F;&#x2F;集合中的个数有0</span><br><span class="line">        &#x2F;&#x2F;转换成数组,了解，使用不多</span><br><span class="line">        c.add(true);</span><br><span class="line">        c.add(3.14);</span><br><span class="line">        Object[] o &#x3D; c.toArray();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; o.length; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F;遍历数组</span><br><span class="line">            Object ob &#x3D; o[i];</span><br><span class="line">            System.out.println(ob);&#x2F;&#x2F;true 3.14</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Student &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">public class MyArraylistTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;遍历&#x2F;迭代方式，是所有Collection通用的一种方式</span><br><span class="line">        &#x2F;&#x2F;在Map集合中不能使用，在所有的Collection以及子类中能使用</span><br><span class="line">        &#x2F;&#x2F;创建集合对象</span><br><span class="line">        Collection c &#x3D; new HashSet();</span><br><span class="line">        c.add(&quot;ac&quot;);</span><br><span class="line">        c.add(3);</span><br><span class="line">        c.add(3.14);</span><br><span class="line">        c.add(new Object());</span><br><span class="line">        &#x2F;&#x2F;对集合进行遍历&#x2F;迭代</span><br><span class="line">        &#x2F;&#x2F;第一步：获取迭代器对象</span><br><span class="line">        Iterator i &#x3D; c.iterator();</span><br><span class="line">        &#x2F;&#x2F;第二步：通过获取的迭代器开始迭代</span><br><span class="line">        &#x2F;*以下两个方法是迭代器对象iterator中的方法：</span><br><span class="line">                boolean hasNext()如果仍有元素可以迭代，则返回true</span><br><span class="line">                Object next() 返回迭代的下一个元素*&#x2F;</span><br><span class="line">        while(i.hasNext())&#123;</span><br><span class="line">            boolean h &#x3D; i.hasNext();</span><br><span class="line">            &#x2F;&#x2F;不管你存进去什么，取出来统一都是Object</span><br><span class="line">            Object o &#x3D; i.next();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">            &#x2F;* java.lang.Object@10f87f48</span><br><span class="line">            ac</span><br><span class="line">            3</span><br><span class="line">            3.14*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代集合和HasSet集合"><a href="#迭代集合和HasSet集合" class="headerlink" title="迭代集合和HasSet集合"></a>迭代集合和HasSet集合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">public class MyArrayList &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建集合对象</span><br><span class="line">        Collection c &#x3D;  new ArrayList();&#x2F;&#x2F;ArrayList集合：有序可重复</span><br><span class="line">        &#x2F;&#x2F;添加元素</span><br><span class="line">        c.add(1);</span><br><span class="line">        c.add(2);</span><br><span class="line">        c.add(3);</span><br><span class="line">        c.add(1);</span><br><span class="line">        &#x2F;&#x2F;迭代集合</span><br><span class="line">        Iterator i &#x3D; c.iterator();</span><br><span class="line">        while (i.hasNext())&#123;</span><br><span class="line">            Object o &#x3D; i.next();</span><br><span class="line">            System.out.println(o);&#x2F;&#x2F;1 2 3 1</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;HasSet集合：无序不可重复</span><br><span class="line">        Collection co &#x3D; new HashSet();</span><br><span class="line">        &#x2F;&#x2F;无序：存进去的顺序和取出来的顺序不同  不可重复：存进去100后，不能再次存储</span><br><span class="line">        co.add(100);</span><br><span class="line">        co.add(200);</span><br><span class="line">        co.add(300);</span><br><span class="line">        co.add(400);</span><br><span class="line">        co.add(30);</span><br><span class="line">        co.add(40);</span><br><span class="line">        co.add(100);</span><br><span class="line">        Iterator it &#x3D; co.iterator();</span><br><span class="line">        while (it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());&#x2F;&#x2F;400 100 200 40 300 30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="contains方法"><a href="#contains方法" class="headerlink" title="contains方法"></a>contains方法</h3><p>contains方法是用来判断集合中是否包含某个元素的方法，在底层中调用了equals方法进行比对，返回true。就表示包含这个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Objects;</span><br><span class="line">public class mycollection &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建集合对象</span><br><span class="line">        Collection c &#x3D; new ArrayList();</span><br><span class="line">        &#x2F;&#x2F;创建用户对象</span><br><span class="line">        User u1 &#x3D; new User(&quot;李四&quot;);</span><br><span class="line">        User u2 &#x3D; new User(&quot;李四&quot;);</span><br><span class="line">        c.add(u1);</span><br><span class="line">        &#x2F;&#x2F;没重写equals方法之前</span><br><span class="line">        &#x2F;&#x2F;System.out.println(c.contains(u2));&#x2F;&#x2F;false</span><br><span class="line">        &#x2F;&#x2F;重写equals方法之后</span><br><span class="line">        System.out.println(c.contains(u2));&#x2F;&#x2F;true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class User&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public User()&#123;&#125;</span><br><span class="line">    public User(String name)&#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;重写equals方法</span><br><span class="line">    &#x2F;&#x2F;这个equals方法的比较原理：只要名字一样就表示同一个用户</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (o &#x3D;&#x3D; null || !(o instanceof User)) return false;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        User user &#x3D; (User) o;</span><br><span class="line">        &#x2F;&#x2F;如果名字一样，表示同一个人</span><br><span class="line">        return user.name.equals(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">&#x2F;&#x2F;当集合的结构发生改变时，迭代器必须重新获取</span><br><span class="line">public class MycollectionTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Collection c &#x3D;  new ArrayList();</span><br><span class="line">        &#x2F;&#x2F;Iterator i &#x3D; c.iterator();&#x2F;&#x2F;ConcurrentModificationExceptionm,集合结构改变，所以会报错</span><br><span class="line">        c.add(1);</span><br><span class="line">        c.add(2);</span><br><span class="line">        c.add(3);</span><br><span class="line">        c.add(1);</span><br><span class="line">        Iterator i &#x3D; c.iterator();</span><br><span class="line">        while (i.hasNext())&#123;</span><br><span class="line">            Object o &#x3D; i.next();</span><br><span class="line">            &#x2F;&#x2F;c.remove(o);&#x2F;&#x2F;ConcurrentModificationException，迭代器结构改变，在迭代集合工程中，不能调用集合对象的remove方法删除元素</span><br><span class="line">            &#x2F;&#x2F;因为c.remove(o);直接通过集合去删除元素，没有通知迭代器（导致迭代器的快照和原集合状态不同）</span><br><span class="line">            &#x2F;&#x2F;出异常的根本原因是：集合中元素删除了，但是没有更新迭代器（迭代器不知道集合变化）</span><br><span class="line">            i.remove();&#x2F;&#x2F;可以使用迭代器删除元素，删除的一定是迭代器指向的当前元素</span><br><span class="line">            &#x2F;&#x2F;迭代器去删除时，会自动更新迭代器，并且更新集合，（删除集合中的元素）</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(c.size());&#x2F;&#x2F;元素为0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.*;</span><br><span class="line">&#x2F;*测试List接口中常用的方法</span><br><span class="line">    List集合存储元素的特点：有序可重复</span><br><span class="line">        有序：List集合中的元素有下标。从0开始，以1递增</span><br><span class="line">        可重复：存储一个1，还可以继续存储1*&#x2F;</span><br><span class="line">public class ListTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;List mylist &#x3D; new LinkedList();</span><br><span class="line">        &#x2F;&#x2F;List mylist &#x3D; new Vector();</span><br><span class="line">        List mylist &#x3D; new ArrayList();</span><br><span class="line">        mylist.add(&quot;asd&quot;);&#x2F;&#x2F;默认向集合末尾添加元素</span><br><span class="line">        mylist.add(&quot;aqw&quot;);</span><br><span class="line">        mylist.add(&quot;qwe&quot;);</span><br><span class="line">        mylist.add(1,&quot;li&quot;);&#x2F;&#x2F;在列表指定位置插入指定元素，用的比较少，因为效率较低</span><br><span class="line">        Iterator it &#x3D; mylist.iterator();</span><br><span class="line">        while (it.hasNext())&#123;</span><br><span class="line">            Object o &#x3D; it.next();</span><br><span class="line">            System.out.println(o);&#x2F;&#x2F;asd li aqw qwe</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;根据下标获取元素</span><br><span class="line">        Object firo &#x3D; mylist.get(2);</span><br><span class="line">        System.out.println(firo);&#x2F;&#x2F;aqw</span><br><span class="line">        &#x2F;&#x2F;因为有下标，所以List集合有自己比较特殊的遍历方式</span><br><span class="line">        &#x2F;&#x2F;通过下标遍历[List集合特有的方法，Set没有]</span><br><span class="line">        for (int i &#x3D; 0; i &lt; mylist.size(); i++) &#123;</span><br><span class="line">            Object obj &#x3D; mylist.get(i);</span><br><span class="line">            System.out.println(obj);&#x2F;&#x2F;asd li aqw qwe</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取指定对象第一次出现处的索引</span><br><span class="line">        System.out.println(mylist.indexOf(&quot;qwe&quot;));&#x2F;&#x2F;3</span><br><span class="line">        &#x2F;&#x2F;获取指定对象最后一次出现处的索引</span><br><span class="line">        System.out.println(mylist.lastIndexOf(&quot;li&quot;));&#x2F;&#x2F;1</span><br><span class="line">        &#x2F;&#x2F;删除指定下标位置的元素</span><br><span class="line">        mylist.remove(3);</span><br><span class="line">        System.out.println(mylist.size());&#x2F;&#x2F;3</span><br><span class="line">        &#x2F;&#x2F;修改指定位置的元素</span><br><span class="line">        mylist.set(2,&quot;yun&quot;);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; mylist.size(); i++) &#123;</span><br><span class="line">            Object b &#x3D; mylist.get(i);</span><br><span class="line">            System.out.println(b);&#x2F;&#x2F;asd li yun</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>面试官常问一个问题：</strong>你用哪个集合比较多</p>
<p>​        答：ArrayList集合。因为往数组末尾添加元素，效率不受影响。另外，我们检索/查找某个元素的操作比较多</p>
<ul>
<li><p>数组优点：</p>
<ul>
<li>检索效率比较高。（每个元素占用空间大小相同，内存地址是连续的，知道首元素内存的地址，然后知道下标，通过数学表达式计算出元素的内存地址，所以检索效率最高）</li>
</ul>
</li>
<li><p>数组缺点：</p>
<ul>
<li>随机增删元素效率比较低</li>
<li>另外数组无法存储大数据量。（很难找到一块非常巨大的连续的内存空间）</li>
</ul>
</li>
</ul>
<h2 id="单项链表"><a href="#单项链表" class="headerlink" title="单项链表"></a>单项链表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package danLike;</span><br><span class="line"></span><br><span class="line">public class Link &#123;</span><br><span class="line">    Node header;</span><br><span class="line">    int size;</span><br><span class="line">    public int size()&#123;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;添加元素的方法</span><br><span class="line">    public void add(Object data)&#123;</span><br><span class="line">        if(header &#x3D;&#x3D; null)&#123;</span><br><span class="line">            header &#x3D; new Node(data , null);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            Node currentLastNode &#x3D; findLast(header);</span><br><span class="line">            currentLastNode.next &#x3D; new Node(data,null);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Node findLast(Node node) &#123;</span><br><span class="line">        if (node.next &#x3D;&#x3D; null)&#123;</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">        return findLast(node.next);&#x2F;&#x2F;递归算法</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除元素的方法</span><br><span class="line">    public void remove(Object obj)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;修改元素的方法</span><br><span class="line">    public void modify(Object newobj)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;查找元素的方法</span><br><span class="line">    public void find()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package VectorTest;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Vector中所有的方法都是线程同步，都带有synchronizedList关键字</span><br><span class="line">&#x2F;&#x2F;是线程安全，效率比较低，使用较少</span><br><span class="line">public class VectorTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Vector v &#x3D; new Vector();</span><br><span class="line">        &#x2F;&#x2F;添加元素，默认容量10个</span><br><span class="line">        v.add(&quot;1&quot;);</span><br><span class="line">        v.add(&quot;2&quot;);</span><br><span class="line">        v.add(&quot;3&quot;);</span><br><span class="line">        v.add(&quot;4&quot;);</span><br><span class="line">        v.add(&quot;5&quot;);</span><br><span class="line">        v.add(&quot;6&quot;);</span><br><span class="line">        v.add(&quot;7&quot;);</span><br><span class="line">        v.add(&quot;8&quot;);</span><br><span class="line">        v.add(&quot;9&quot;);</span><br><span class="line">        v.add(&quot;10&quot;);</span><br><span class="line">        &#x2F;&#x2F;满了之后扩容为20</span><br><span class="line">        v.add(&quot;11&quot;);</span><br><span class="line">        Iterator iterator &#x3D; v.iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            Object o &#x3D; iterator.next();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;以后可能要用，非线程安全ArrayList转变为线程安全Collections</span><br><span class="line">        List myList &#x3D; new ArrayList();&#x2F;&#x2F;非线程安全</span><br><span class="line">        &#x2F;&#x2F;变为线程安全</span><br><span class="line">        Collections.synchronizedList(myList);</span><br><span class="line">        myList.add(&quot;111&quot;);</span><br><span class="line">        myList.add(&quot;222&quot;);</span><br><span class="line">        myList.add(&quot;333&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">public class GenericTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       &#x2F;* &#x2F;&#x2F;不适用泛型，分析程序缺点</span><br><span class="line">        List myList &#x3D; new ArrayList();</span><br><span class="line">        &#x2F;&#x2F;准备对象</span><br><span class="line">        Cat cat &#x3D; new Cat();</span><br><span class="line">        Bird bird &#x3D; new Bird();</span><br><span class="line">        &#x2F;&#x2F;将对象添加到集合中</span><br><span class="line">        myList.add(cat);</span><br><span class="line">        myList.add(bird);</span><br><span class="line">        Iterator i &#x3D; myList.iterator();</span><br><span class="line">        while (i.hasNext())&#123;</span><br><span class="line">            Object o &#x3D; i.next();</span><br><span class="line">            if(o instanceof Animals)&#123;</span><br><span class="line">                Animals a &#x3D;(Animals)o;</span><br><span class="line">                a.move();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;使用JDK5之后的泛型机制</span><br><span class="line">        &#x2F;&#x2F;使用泛型List&lt;Animals&gt;之后，表示List集合中只允许存储Animals类型的数据</span><br><span class="line">        &#x2F;&#x2F;用泛型来指定集合中存储的数据类型</span><br><span class="line">        List&lt;Animals&gt; myList &#x3D; new ArrayList&lt;Animals&gt;();</span><br><span class="line">        Cat cat &#x3D; new Cat();</span><br><span class="line">        Bird bird &#x3D; new Bird();</span><br><span class="line">        &#x2F;&#x2F;将对象添加到集合中</span><br><span class="line">        myList.add(cat);</span><br><span class="line">        myList.add(bird);</span><br><span class="line">        Iterator&lt;Animals&gt; i &#x3D; myList.iterator();</span><br><span class="line">        while (i.hasNext())&#123;</span><br><span class="line">            Animals a &#x3D; i.next();</span><br><span class="line">            &#x2F;&#x2F;a.move();</span><br><span class="line">            if (a instanceof Cat)&#123;</span><br><span class="line">                Cat c &#x3D;(Cat)a;</span><br><span class="line">                c.catchMouse();</span><br><span class="line">            &#125;</span><br><span class="line">            if (a instanceof Bird)&#123;</span><br><span class="line">                Bird b &#x3D;(Bird)a;</span><br><span class="line">                b.fly();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Animals&#123;</span><br><span class="line">    public void move()&#123;</span><br><span class="line">        System.out.println(&quot;动物在移动！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat extends Animals&#123;</span><br><span class="line">    public void catchMouse()&#123;</span><br><span class="line">        System.out.println(&quot;猫抓老鼠！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Bird extends Animals&#123;</span><br><span class="line">    public void fly()&#123;</span><br><span class="line">        System.out.println(&quot;鸟儿在飞！！！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型的自动类型推断机制"><a href="#泛型的自动类型推断机制" class="headerlink" title="泛型的自动类型推断机制"></a>泛型的自动类型推断机制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">&#x2F;&#x2F;JDK引入：自动类型推断机制（又称为钻石表达式）</span><br><span class="line">public class GenericTest02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Animals&gt; myList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        Cat c &#x3D; new Cat();</span><br><span class="line">        Bird b &#x3D; new Bird();</span><br><span class="line">        myList.add(c);</span><br><span class="line">        myList.add(b);</span><br><span class="line">        Iterator&lt;Animals&gt; i &#x3D; myList.iterator();</span><br><span class="line">        while (i.hasNext())&#123;</span><br><span class="line">            Animals a &#x3D; i.next();</span><br><span class="line">            a.move();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; s &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        s.add(&quot;www.baidu.com&quot;);</span><br><span class="line">        s.add(&quot;http:&#x2F;&#x2F;zsquw5.coding-pages.com&#x2F;post&#x2F;8df0ec14.html&quot;);</span><br><span class="line">        s.add(&quot;https:&#x2F;&#x2F;solitudehero.github.io&#x2F;&quot;);</span><br><span class="line">        Iterator&lt;String&gt; it &#x3D; s.iterator();</span><br><span class="line">        while (it.hasNext())&#123;</span><br><span class="line">&#x2F;*            &#x2F;&#x2F;如果不使用泛型</span><br><span class="line">            Object o &#x3D; it.next();</span><br><span class="line">            if (o instanceof String)&#123;</span><br><span class="line">                String ss &#x3D; (String)o;</span><br><span class="line">                ss.substring(0);</span><br><span class="line">            &#125;*&#x2F;</span><br><span class="line">            String s1 &#x3D; it.next();</span><br><span class="line">            String newString &#x3D; s1.substring(0);</span><br><span class="line">            System.out.println(newString);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class foreachTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr &#x3D; &#123;1,2,3,4,5,6&#125;;</span><br><span class="line">        &#x2F;&#x2F;增强for（foreach）</span><br><span class="line">        &#x2F;&#x2F;foreach缺点是没有下标</span><br><span class="line">        for (int data : arr)&#123;</span><br><span class="line">            &#x2F;&#x2F;data是数组中的元素</span><br><span class="line">            System.out.println(data);&#x2F;&#x2F;1 2 3 4 5 6</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>无序不可重复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class HashSetTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Set&lt;String&gt; s &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        s.add(&quot;3&quot;);</span><br><span class="line">        s.add(&quot;2&quot;);</span><br><span class="line">        s.add(&quot;3&quot;);</span><br><span class="line">        s.add(&quot;4&quot;);</span><br><span class="line">        s.add(&quot;1&quot;);</span><br><span class="line">        &#x2F;&#x2F;放到HashSet集合中的元素实际上是放到HashMap集合的key部分</span><br><span class="line">        for (String str : s)&#123;</span><br><span class="line">            System.out.println(str);&#x2F;&#x2F;1 2 3 4</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Set;</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line">public class TreeSetTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Set&lt;String&gt; s &#x3D; new TreeSet&lt;&gt;();</span><br><span class="line">        s.add(&quot;a&quot;);</span><br><span class="line">        s.add(&quot;B&quot;);</span><br><span class="line">        s.add(&quot;b&quot;);</span><br><span class="line">        s.add(&quot;A&quot;);</span><br><span class="line">        s.add(&quot;E&quot;);</span><br><span class="line">        s.add(&quot;B&quot;);</span><br><span class="line">        &#x2F;&#x2F;无序不可重复，但是存储的元素可以按照大小顺序排序 称为：可排序集合</span><br><span class="line">        for (String st : s)&#123;</span><br><span class="line">            System.out.println(st);&#x2F;&#x2F;A B E a b</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="常用的方法（一）"><a href="#常用的方法（一）" class="headerlink" title="常用的方法（一）"></a>常用的方法（一）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class Maptest01 &#123;</span><br><span class="line">&#x2F;*    java.util.Map接口中常用的方法：</span><br><span class="line">            1.Map和Collection没有继承关系</span><br><span class="line">            2.Map集合以key和value的方式存储数据：键值对</span><br><span class="line">                key和value都是引用数据类型</span><br><span class="line">                key和value都是存储对象的内存地址</span><br><span class="line">                key起主导地位，value是key的一个附属品*&#x2F;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建Map集合对象</span><br><span class="line">        Map&lt;Integer,String&gt; m &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        m.put(1,&quot;1&quot;);</span><br><span class="line">        m.put(2,&quot;2&quot;);</span><br><span class="line">        m.put(3,&quot;3&quot;);</span><br><span class="line">        m.put(4,&quot;4&quot;);</span><br><span class="line">        m.put(5,&quot;5&quot;);</span><br><span class="line">        &#x2F;&#x2F;通过key获取value</span><br><span class="line">        String v &#x3D; m.get(1);&#x2F;&#x2F;1</span><br><span class="line">        System.out.println(v);</span><br><span class="line">        &#x2F;&#x2F;获取键值对的数量</span><br><span class="line">        System.out.println(&quot;键值对的数量：&quot;+m.size());&#x2F;&#x2F;键值对的数量：5</span><br><span class="line">        &#x2F;&#x2F;通过key删除key-value</span><br><span class="line">        m.remove(2);</span><br><span class="line">        System.out.println(&quot;键值对的数量：&quot;+m.size());&#x2F;&#x2F; 键值对的数量：4</span><br><span class="line">        &#x2F;&#x2F;判断是否包含某个key</span><br><span class="line">        System.out.println(m.containsKey(4));&#x2F;&#x2F;true</span><br><span class="line">        &#x2F;&#x2F;判断是否包含某个value</span><br><span class="line">        System.out.println(m.containsValue(&quot;4&quot;));&#x2F;&#x2F;true</span><br><span class="line">        &#x2F;&#x2F;获取所有的values</span><br><span class="line">        Collection&lt;String&gt; c &#x3D; m.values();</span><br><span class="line">        for(String s : c)&#123;</span><br><span class="line">            System.out.println(s);&#x2F;&#x2F;1 3 4 5</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;清空键值对数量</span><br><span class="line">        m.clear();</span><br><span class="line">        System.out.println(&quot;键值对的数量：&quot;+m.size());&#x2F;&#x2F; 键值对的数量：0</span><br><span class="line">        &#x2F;&#x2F;判断是否为空</span><br><span class="line">        System.out.println(m.isEmpty());&#x2F;&#x2F;true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用的方法（二）"><a href="#常用的方法（二）" class="headerlink" title="常用的方法（二）"></a>常用的方法（二）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Maptest02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;第一种方法：通过遍历key来遍历values</span><br><span class="line">        Map&lt;Integer,String&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        map.put(1,&quot;1&quot;);</span><br><span class="line">        map.put(2,&quot;2&quot;);</span><br><span class="line">        map.put(3,&quot;3&quot;);</span><br><span class="line">        map.put(4,&quot;4&quot;);</span><br><span class="line">        map.put(5,&quot;5&quot;);</span><br><span class="line">        Set&lt;Integer&gt; keys &#x3D; map.keySet();</span><br><span class="line">        &#x2F;&#x2F;迭代器可以</span><br><span class="line">        Iterator&lt;Integer&gt; it &#x3D; keys.iterator();</span><br><span class="line">        while (it.hasNext())&#123;</span><br><span class="line">            Integer key &#x3D; it.next();</span><br><span class="line">            &#x2F;&#x2F;通过key获取values</span><br><span class="line">            String value &#x3D; map.get(key);</span><br><span class="line">            System.out.println(key + &quot;&#x3D;&quot; + value);&#x2F;&#x2F;1&#x3D;1 2&#x3D;2 3&#x3D;3 4&#x3D;4 5&#x3D;5</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;foreach也行</span><br><span class="line">        for(Integer key : keys)&#123;</span><br><span class="line">            System.out.println(key + &quot;&#x3D;&quot; + map.get(key));&#x2F;&#x2F;1&#x3D;1 2&#x3D;2 3&#x3D;3 4&#x3D;4 5&#x3D;5</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;第二种方法：Set&lt;Map,Entry&lt;K,V&gt; entrySet()&gt;</span><br><span class="line">        &#x2F;&#x2F;以上这种方法就是把Map集合全部转换为Set集合</span><br><span class="line">        &#x2F;&#x2F;Set集合中的元素的类型是：Map.Entry</span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, String&gt;&gt; set &#x3D; map.entrySet();</span><br><span class="line">        &#x2F;&#x2F;遍历Set集合，每一次取出一个Node</span><br><span class="line">&#x2F;*        &#x2F;&#x2F;迭代器</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; ite &#x3D; set.iterator();</span><br><span class="line">        while (ite.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;Integer, String&gt; node &#x3D; ite.next();</span><br><span class="line">            Integer key &#x3D; node.getKey();</span><br><span class="line">            String value &#x3D; node.getValue();</span><br><span class="line">            System.out.println(key + &quot; &#x3D; &quot; + value);&#x2F;&#x2F;1&#x3D;1 2&#x3D;2 3&#x3D;3 4&#x3D;4 5&#x3D;5</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;foreach,效率比较高</span><br><span class="line">        for (Map.Entry&lt;Integer,String&gt; node : set)&#123;</span><br><span class="line">            System.out.println(node.getKey() + &quot; ----&gt; &quot; + node.getValue());&#x2F;&#x2F;1 ----&gt; 1 2 ----&gt; 2 3 ----&gt; 3 4 ----&gt; 4 5 ----&gt; 5</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同时重写hashCode和equals"><a href="#同时重写hashCode和equals" class="headerlink" title="同时重写hashCode和equals"></a>同时重写hashCode和equals</h3><ul>
<li>Student类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package bean;</span><br><span class="line">import java.util.Objects;</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public Student()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public Student(String name)&#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        &#x2F;&#x2F;重写equals</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;*    public boolean equals(Object o) &#123;</span><br><span class="line">        if (o &#x3D;&#x3D; null || !(o instanceof Student)) return false;</span><br><span class="line">        if (o &#x3D;&#x3D; this) return true;</span><br><span class="line">        Student s &#x3D; (Student) o;</span><br><span class="line">        return this.name.equals(s.name);</span><br><span class="line">    &#125;*&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (o &#x3D;&#x3D; null || getClass() !&#x3D; o.getClass()) return false;</span><br><span class="line">        Student student &#x3D; (Student) o;</span><br><span class="line">        return Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return Objects.hash(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>HashMapTest02</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package bean;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line">&#x2F;&#x2F;1.向Map集合中存，和从Map集合中取，都是先调用key的hashCode方法，然后再调用equals方法！equals方法可能调用，也可能不调用</span><br><span class="line">&#x2F;&#x2F;2.如果一个类的equals方法重写了，那么hashCode()方法必须重写</span><br><span class="line">&#x2F;&#x2F;并且equals方法返回如果是true，hashCode()方法返回的值必须一样</span><br><span class="line">public class HashMapTest02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Student s1 &#x3D; new Student(&quot;张三&quot;);</span><br><span class="line">        Student s2 &#x3D; new Student(&quot;张三&quot;);</span><br><span class="line">&#x2F;*        &#x2F;&#x2F;重写equals前</span><br><span class="line">        System.out.println(s1.equals(s2));&#x2F;&#x2F;false*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;重写equals后</span><br><span class="line">        System.out.println(s1.equals(s2));&#x2F;&#x2F;true&#39;</span><br><span class="line">        System.out.println(&quot;s1的hashCode&#x3D;&quot;+s1.hashCode());&#x2F;&#x2F;s1的hashCode&#x3D;189568618</span><br><span class="line">        System.out.println(&quot;s1的hashCode&#x3D;&quot;+s2.hashCode());&#x2F;&#x2F;s1的hashCode&#x3D;666641942</span><br><span class="line">        &#x2F;&#x2F;s1.equals(s2)结果是true，表示s1和s2是一样的，那么往HashSet集合中放，按说只能放进去一个（HashSet集合特点：无序不可重复）</span><br><span class="line">        Set&lt;Student&gt; students &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        students.add(s1);</span><br><span class="line">        students.add(s2);</span><br><span class="line">        System.out.println(students.size());&#x2F;&#x2F;这个结果按理说是1，但实际上是2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">&#x2F;&#x2F;Properties是一个Map集合，继承HashTable，Properties的key和value都是String类型</span><br><span class="line">&#x2F;&#x2F;Properties被称为属性类对象</span><br><span class="line">&#x2F;&#x2F;Properties是线程安全的</span><br><span class="line">public class PropertiesTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Properties pro &#x3D; new Properties();</span><br><span class="line">        pro.setProperty(&quot;username&quot;,&quot;root&quot;);</span><br><span class="line">        pro.setProperty(&quot;password&quot;,&quot;123&quot;);</span><br><span class="line">        &#x2F;&#x2F;通过key获取value</span><br><span class="line">        String username &#x3D; pro.getProperty(&quot;username&quot;);</span><br><span class="line">        String password &#x3D; pro.getProperty(&quot;password&quot;);</span><br><span class="line">        System.out.println(username);&#x2F;&#x2F;root</span><br><span class="line">        System.out.println(password);&#x2F;&#x2F;123</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现比较接口"><a href="#实现比较接口" class="headerlink" title="实现比较接口"></a>实现比较接口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line">public class TreeSetTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;*&#x2F;&#x2F;给构造方法传递一个比较器</span><br><span class="line">        TreeSet&lt;Wugui&gt; wg &#x3D; new TreeSet&lt;&gt;(new WuguiComparator());*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;匿名内部类</span><br><span class="line">        TreeSet&lt;Wugui&gt; wg &#x3D; new TreeSet&lt;&gt;(new Comparator&lt;Wugui&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(Wugui o1, Wugui o2) &#123;</span><br><span class="line">                return o1.age-o2.age;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        wg.add(new Wugui(100));</span><br><span class="line">        wg.add(new Wugui(1000));</span><br><span class="line">        wg.add(new Wugui(200));</span><br><span class="line">        wg.add(new Wugui(400));</span><br><span class="line">        wg.add(new Wugui(500));</span><br><span class="line">        for (Wugui w : wg)&#123;</span><br><span class="line">            System.out.println(w);</span><br><span class="line">&#x2F;*          乌龟&#123;年龄100&#125;</span><br><span class="line">            乌龟&#123;年龄200&#125;</span><br><span class="line">            乌龟&#123;年龄400&#125;</span><br><span class="line">            乌龟&#123;年龄500&#125;</span><br><span class="line">            乌龟&#123;年龄1000&#125;*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Wugui&#123;</span><br><span class="line">     int age;</span><br><span class="line">    public Wugui(int age)&#123;</span><br><span class="line">         this.age &#x3D; age;</span><br><span class="line">     &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;乌龟&#123;&quot; +</span><br><span class="line">                &quot;年龄&quot; + age +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">&#x2F;&#x2F;自己编辑比较器</span><br><span class="line">class WuguiComparator implements Comparator&lt;Wugui&gt;&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int compare(Wugui o1, Wugui o2) &#123;</span><br><span class="line">        return o1.age-o2.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;*&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package collec;</span><br><span class="line">import java.util.*;</span><br><span class="line">&#x2F;&#x2F;Collection集合接口,Collections集合工具类，方便集合操作</span><br><span class="line">public class CollectionsTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;ArrayList集合不是线程安全的</span><br><span class="line">        List&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;变成线程安全</span><br><span class="line">        Collections.synchronizedList(list);</span><br><span class="line">        &#x2F;&#x2F;排序</span><br><span class="line">        list.add(&quot;123&quot;);</span><br><span class="line">        list.add(&quot;564&quot;);</span><br><span class="line">        list.add(&quot;547&quot;);</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        for(String s : list)&#123;</span><br><span class="line">            System.out.println(s);&#x2F;&#x2F;123 547 564</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Wugui2&gt; wugui &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        wugui.add(new Wugui2(100));</span><br><span class="line">        wugui.add(new Wugui2(1000));</span><br><span class="line">        wugui.add(new Wugui2(1521));</span><br><span class="line">        wugui.add(new Wugui2(1060));</span><br><span class="line">        &#x2F;&#x2F;注意：对List集合中的元素排序，需要保证list集合中的元素实现了：Comparable接口</span><br><span class="line">        Collections.sort(wugui);</span><br><span class="line">        for (Wugui2 w : wugui)&#123;</span><br><span class="line">            System.out.println(w);&#x2F;&#x2F;乌龟&#123;年龄100&#125; 乌龟&#123;年龄1000&#125; 乌龟&#123;年龄1060&#125; 乌龟&#123;年龄1521&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;对Set集合排序</span><br><span class="line">        Set&lt;String&gt; s &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        s.add(&quot;526&quot;);</span><br><span class="line">        s.add(&quot;589&quot;);</span><br><span class="line">        s.add(&quot;532&quot;);</span><br><span class="line">        s.add(&quot;545&quot;);</span><br><span class="line">        &#x2F;&#x2F;将Set集合转换为List集合</span><br><span class="line">        List&lt;String&gt; l &#x3D; new ArrayList&lt;&gt;(s);</span><br><span class="line">        Collections.sort(l);</span><br><span class="line">        for (String s1 : l)&#123;</span><br><span class="line">            System.out.println(s1);&#x2F;&#x2F;526 532 545 589</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Wugui2 implements Comparable&lt;Wugui2&gt; &#123;</span><br><span class="line">    int age;</span><br><span class="line"></span><br><span class="line">    public Wugui2(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Wugui2 o) &#123;</span><br><span class="line">        return this.age - o.age;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;乌龟&#123;&quot; +</span><br><span class="line">                &quot;年龄&quot; + age +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p><strong>什么是IO流?</strong></p>
<ul>
<li>通过IO可以完成硬盘文件的读和写。</li>
</ul>
<p><strong>IO流的分类？</strong></p>
<ul>
<li><p>一种是按照流的方向进行分类：</p>
<ul>
<li>以内存作为参照物<ul>
<li>往内存中去，叫做输入，或者叫做读</li>
<li>往内存中出来，叫做输出，或者叫做写</li>
</ul>
</li>
</ul>
</li>
<li><p>另一种方式是按照读取数据方式不同进行分类：</p>
<ul>
<li>有的流是按照字节的方式读取数据，一次读取1个字节byte，等同于一次读取8个二进制位。</li>
<li>这种流是万能的，什么类型都可以读取。包括文本文件，图片….<ul>
<li>假设文件file.txt，采用字节流的话读取：<ul>
<li>a中国bc</li>
<li>第一次读：一个字节，正好读到’a’</li>
<li>第二次读：一个字节，正好读到’中’字符的一半</li>
</ul>
</li>
</ul>
</li>
<li>有的流是按照字符的方式读取数据，一次读取一个字符，这种流是为了方便读取普通文本文件而存在的，这种流不能读取：图片，声音….只能读取文本文件，连word文件都不能读取。<ul>
<li>假设文件file.txt，采用字符流的话读取：<ul>
<li>a中国bc</li>
<li>第一次读：’a’字符（’a’字符在Windows系统中占用1个字节）</li>
<li>第二次读：’中’字符（’中’字符在Windows系统中占用2个字节）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>注意：在Java中只要“类名”以Stream结尾的都是字节流，以“Reader/Writer”结尾都是字符流</strong></p>
<h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><p>文档放入：abcde</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">&#x2F;*</span><br><span class="line">java.io.FileInputStream:</span><br><span class="line">    1.文件字节输入流，万能的，任何类型的文件都可以采用这个流来读</span><br><span class="line">    2.字节的方式，完成输入的操作，完成读的操作（硬盘——&gt;内存）</span><br><span class="line">*&#x2F;</span><br><span class="line">public class FileInputStreamTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FileInputStream f &#x3D; null;</span><br><span class="line">        &#x2F;&#x2F;创建文件字节输入流对象</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;FileInputStream f &#x3D; new FileInputStream(&quot;G:\\temp.txt&quot;);</span><br><span class="line">            f &#x3D; new FileInputStream(&quot;G:&#x2F;temp.txt&quot;);&#x2F;&#x2F;也可以这么写</span><br><span class="line">            &#x2F;&#x2F;开始读</span><br><span class="line">            int read &#x3D; f.read();&#x2F;&#x2F;这个方法的返回值是：读取到的“字节”本身</span><br><span class="line">            System.out.println(read);&#x2F;&#x2F;97</span><br><span class="line">            read &#x3D; f.read();&#x2F;&#x2F;97</span><br><span class="line">            System.out.println(read);&#x2F;&#x2F;98</span><br><span class="line">            read &#x3D; f.read();</span><br><span class="line">            System.out.println(read);&#x2F;&#x2F;99</span><br><span class="line">            read &#x3D; f.read();</span><br><span class="line">            System.out.println(read);&#x2F;&#x2F;100</span><br><span class="line">            read &#x3D; f.read();</span><br><span class="line">            System.out.println(read);&#x2F;&#x2F;101</span><br><span class="line">            &#x2F;&#x2F;已经读到了文件的末尾，再读的时候已经读不到任何数据了，返回-1</span><br><span class="line">            read &#x3D; f.read();</span><br><span class="line">            System.out.println(read);&#x2F;&#x2F;-1</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            &#x2F;&#x2F;在finally语句块中确保流关闭</span><br><span class="line">            if (f &#x3D;&#x3D; null) &#123;&#x2F;&#x2F;避免空指针异常</span><br><span class="line">                &#x2F;&#x2F;关闭流的前提是：流是null的时候没必要关闭</span><br><span class="line">                try &#123;</span><br><span class="line">                    f.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环输出"><a href="#循环输出" class="headerlink" title="循环输出"></a>循环输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">public class FileInputStreamTest02 &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">程序缺点：</span><br><span class="line">	一次读取一个字节byte，这样内存和硬盘交互太频繁，基本时间都浪费在交互上面。</span><br><span class="line">*&#x2F;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    FileInputStream f &#x3D; null;</span><br><span class="line">    &#x2F;&#x2F;创建文件字节输入流对象</span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F;FileInputStream f &#x3D; new FileInputStream(&quot;G:\\101&quot;);</span><br><span class="line">        f &#x3D; new FileInputStream(&quot;G:&#x2F;temp.txt&quot;);&#x2F;&#x2F;也可以这么写</span><br><span class="line">        &#x2F;&#x2F;循环读</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            int read &#x3D; f.read();</span><br><span class="line">            if (read &#x3D;&#x3D; -1)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(read);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;改造while循环</span><br><span class="line">        int readdate &#x3D; 0;</span><br><span class="line">        while ((readdate &#x3D; f.read()) !&#x3D; -1)&#123;</span><br><span class="line">            System.out.println(readdate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        &#x2F;&#x2F;在finally语句块中确保流关闭</span><br><span class="line">        if (f &#x3D;&#x3D; null) &#123;&#x2F;&#x2F;避免空指针异常</span><br><span class="line">            &#x2F;&#x2F;关闭流的前提是：流是null的时候没必要关闭</span><br><span class="line">            try &#123;</span><br><span class="line">                f.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建byte数组"><a href="#创建byte数组" class="headerlink" title="创建byte数组"></a>创建byte数组</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">&#x2F;*int read(byte[] b)</span><br><span class="line">    一次最多读取b.length个字节</span><br><span class="line">    减少硬盘和内存你的交互，提高程序的执行效率</span><br><span class="line">    在byte[]数组当中读*&#x2F;</span><br><span class="line">public class FileInputStreamTest03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">            FileInputStream f &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;相对路径是工程Project的根就是IDEA的默认当前路径</span><br><span class="line">            f &#x3D; new FileInputStream(&quot;temp.txt&quot;);</span><br><span class="line">            &#x2F;&#x2F;开始读，采用byte数组，一次读取多个字节，最多读取“数组.length”个字节</span><br><span class="line">            byte[] bytes &#x3D; new byte[4];</span><br><span class="line">            &#x2F;&#x2F;这个方法的返回值是：读取到的字节数量（不是字节本身）</span><br><span class="line">            int read &#x3D; f.read(bytes);</span><br><span class="line">            System.out.println(read);&#x2F;&#x2F;第一次读取到了4个字节</span><br><span class="line">            &#x2F;&#x2F;将字节转换成字符串</span><br><span class="line">&#x2F;&#x2F;            System.out.println(new String(bytes));&#x2F;&#x2F;abcd</span><br><span class="line">            &#x2F;&#x2F;不应该全部都转换，应该是读取多少个字节，转换多少个</span><br><span class="line">            System.out.println(new String(bytes,0,read));&#x2F;&#x2F;abcd</span><br><span class="line">            read &#x3D; f.read(bytes);</span><br><span class="line">            System.out.println(read);&#x2F;&#x2F;第二次读到了1个字节&#39;</span><br><span class="line">&#x2F;&#x2F;            System.out.println(new String(bytes));&#x2F;&#x2F;ebcd</span><br><span class="line">            &#x2F;&#x2F;不应该全部都转换，应该是读取多少个字节，转换多少个</span><br><span class="line">            System.out.println(new String(bytes,0,read));&#x2F;&#x2F;e</span><br><span class="line">            read &#x3D; f.read(bytes);</span><br><span class="line">            System.out.println(read);&#x2F;&#x2F;一个字节都没有读取到 -1</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (f !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    f.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最终版"><a href="#最终版" class="headerlink" title="最终版"></a>最终版</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">&#x2F;&#x2F;最终版</span><br><span class="line">public class FileInputStreamTest04 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FileInputStream f &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                f &#x3D; new FileInputStream(&quot;temp.txt&quot;);</span><br><span class="line">                byte[] bytes &#x3D; new byte[4];</span><br><span class="line">                &#x2F;*while (true)&#123;</span><br><span class="line">                    int read &#x3D; f.read(bytes);</span><br><span class="line">                    if (read &#x3D;&#x3D; -1) &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#x2F;&#x2F;把byte数组转换成字符串</span><br><span class="line">                    System.out.print(new String(bytes,0,read));&#x2F;&#x2F;abcde</span><br><span class="line">                &#125;*&#x2F;</span><br><span class="line">                int read &#x3D; 0;</span><br><span class="line">                while ((read &#x3D; f.read(bytes)) !&#x3D; -1)&#123;</span><br><span class="line">                    System.out.print(new String(bytes,0,read));&#x2F;&#x2F;abcde</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                if (f !&#x3D; null) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        f.close();</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="FileInputStream类的其他常用方法"><a href="#FileInputStream类的其他常用方法" class="headerlink" title="FileInputStream类的其他常用方法"></a>FileInputStream类的其他常用方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">&#x2F;*FileInputStream类的其他常用方法：</span><br><span class="line">        int available()：返回流当中剩余的没有读到的字节数量</span><br><span class="line">        long skip(long n)：跳过几个字节不读*&#x2F;</span><br><span class="line">public class FileInputStreamTest05 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FileInputStream f &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            f &#x3D; new FileInputStream(&quot;temp.txt&quot;);&#x2F;&#x2F;总字节数量：5</span><br><span class="line">            &#x2F;*System.out.println(&quot;总字节数量：&quot;+f.available());</span><br><span class="line">            &#x2F;&#x2F;读1个字节</span><br><span class="line">            int read &#x3D; f.read();</span><br><span class="line">            &#x2F;&#x2F;还剩下4个字节</span><br><span class="line">            System.out.println(&quot;剩下多少个字节没读：&quot;+f.available());&#x2F;&#x2F;剩下多少个字节没读：4*&#x2F;</span><br><span class="line">            &#x2F;&#x2F;skip</span><br><span class="line">            f.skip(4);</span><br><span class="line">            System.out.println(f.read());&#x2F;&#x2F;101</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (f !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    f.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">public class FileOutputStreamTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FileOutputStream f &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;myfile文件不存在时，会自动新建</span><br><span class="line">            &#x2F;&#x2F;这种方式谨慎使用，这种方式会将原文件清空，然后重新写入</span><br><span class="line">&#x2F;&#x2F;            f &#x3D; new FileOutputStream(&quot;myfile&quot;);</span><br><span class="line">            &#x2F;&#x2F;以追加方式在文件末尾写入，不会清空原文件内容</span><br><span class="line">            f &#x3D; new FileOutputStream(&quot;myfile&quot;,true);</span><br><span class="line">            &#x2F;&#x2F;写完之后，最后一定要刷新</span><br><span class="line">            byte[] bytes &#x3D; &#123;97,98,99,100&#125;;</span><br><span class="line">            &#x2F;&#x2F;将byte数组全部写出</span><br><span class="line">            f.write(bytes);&#x2F;&#x2F;abcd</span><br><span class="line">            &#x2F;&#x2F;将byte数组的一部分写出</span><br><span class="line">            f.write(bytes,0,3);&#x2F;&#x2F;abc</span><br><span class="line">            String s &#x3D; &quot;我是一个中国人，我骄傲&quot;;</span><br><span class="line">            &#x2F;&#x2F;将字符串转换为byte数组</span><br><span class="line">            byte[] bs &#x3D; s.getBytes();</span><br><span class="line">            f.write(bs);</span><br><span class="line">            f.flush();</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (f !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    f.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">&#x2F;&#x2F;使用FileInputStream+FileOutputStream完成文件的拷贝。</span><br><span class="line">&#x2F;&#x2F;拷贝过程是一边读一边写</span><br><span class="line">public class copy01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FileInputStream fis &#x3D; null;</span><br><span class="line">        FileOutputStream fos &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            fis &#x3D; new FileInputStream(&quot;C:\\Users\\lyl93\\Downloads\\Programs\\WeGameMiniLoader.std.2.07.29.1736.exe&quot;);</span><br><span class="line">            fos &#x3D; new FileOutputStream(&quot;D:&#x2F;WeGameMiniLoader.std.2.07.29.1736.exe&quot;);</span><br><span class="line">            &#x2F;&#x2F;最核心：一边读一边写</span><br><span class="line">            byte[] bytes &#x3D; new byte[1024 * 1024];&#x2F;&#x2F;1MB（一次最多拷贝1MB）</span><br><span class="line">            int read &#x3D; 0;</span><br><span class="line">            while ((read &#x3D; fis.read(bytes)) !&#x3D; -1)&#123;</span><br><span class="line">                fos.write(bytes,0,read);</span><br><span class="line">            &#125;</span><br><span class="line">            fos.flush();</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (fis !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (fos !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">&#x2F;&#x2F;BufferedReader：带有缓冲区的流，使用这个流的时候，不需要自定义char数组，或者说不需要定义byte数组，自带缓冲</span><br><span class="line">public class BufferedReaderTest01 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        FileReader fr &#x3D; new FileReader(&quot;temp.txt&quot;);</span><br><span class="line">        &#x2F;&#x2F;当一个流的构造方法中需要一个流的时候，这个被传进来的流叫做：节点流</span><br><span class="line">        &#x2F;&#x2F;外部负责包装这个流，叫做：包装流，还有一个名字：处理流</span><br><span class="line">        &#x2F;&#x2F;像当前这个程序：FileReader就是一个节点流，BufferedReader就是包装流&#x2F;处理流</span><br><span class="line">        BufferedReader br &#x3D; new BufferedReader(fr);</span><br><span class="line">&#x2F;*        String firstLine &#x3D; br.readLine();</span><br><span class="line">        System.out.println(firstLine);&#x2F;&#x2F;abcde</span><br><span class="line">        String secondLine &#x3D; br.readLine();</span><br><span class="line">        System.out.println(secondLine);&#x2F;&#x2F;263</span><br><span class="line">        String thirdLine &#x3D; br.readLine();</span><br><span class="line">        System.out.println(thirdLine);&#x2F;&#x2F;26*&#x2F;</span><br><span class="line">        String s &#x3D; null;</span><br><span class="line">        while ((s &#x3D; br.readLine()) !&#x3D; null)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            &#x2F;*abcde</span><br><span class="line">            263</span><br><span class="line">            26*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;对于包装流来说，只需要关闭最外层流就行，里面的节点流会自动关闭（源代码）</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转换流（InputStreamReader）"><a href="#转换流（InputStreamReader）" class="headerlink" title="转换流（InputStreamReader）"></a>转换流（InputStreamReader）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">public class BufferedReaderTest02 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">&#x2F;*        &#x2F;&#x2F;字节流</span><br><span class="line">        FileInputStream in &#x3D; new FileInputStream(&quot;temp.txt&quot;);</span><br><span class="line">        &#x2F;&#x2F;转换流转换</span><br><span class="line">        InputStreamReader read &#x3D; new InputStreamReader(in);</span><br><span class="line">        &#x2F;&#x2F;这个构造方法只能传一个字符流，不能传字节流</span><br><span class="line">        BufferedReader br &#x3D; new BufferedReader(read);*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;合并</span><br><span class="line">        BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(new FileInputStream(&quot;temp.txt&quot;)));</span><br><span class="line">        String s &#x3D; null;</span><br><span class="line">        while ((s &#x3D; br.readLine()) !&#x3D; null)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            &#x2F;*abcde</span><br><span class="line">            263</span><br><span class="line">            26*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DataInputStream和DataOutputStream"><a href="#DataInputStream和DataOutputStream" class="headerlink" title="DataInputStream和DataOutputStream"></a>DataInputStream和DataOutputStream</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.DataOutputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">public class DataOutputStreamTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F;创建数据专属的字节输出流</span><br><span class="line">        DataOutputStream dos &#x3D; new DataOutputStream(new FileOutputStream(&quot;data&quot;));</span><br><span class="line">        &#x2F;&#x2F;写数据</span><br><span class="line">        byte b &#x3D; 100;</span><br><span class="line">        short s &#x3D; 200;</span><br><span class="line">        int i &#x3D; 300;</span><br><span class="line">        long l &#x3D; 400L;</span><br><span class="line">        float f &#x3D; 3.0f;</span><br><span class="line">        double d &#x3D; 3.14;</span><br><span class="line">        boolean sex &#x3D; false;</span><br><span class="line">        char c &#x3D; &#39;a&#39;;</span><br><span class="line">        &#x2F;&#x2F;写,把数据以及数据的类型一并写到文件当中</span><br><span class="line">        dos.writeByte(b);</span><br><span class="line">        dos.writeShort(s);</span><br><span class="line">        dos.writeInt(i);</span><br><span class="line">        dos.writeLong(l);</span><br><span class="line">        dos.writeFloat(f);</span><br><span class="line">        dos.writeDouble(d);</span><br><span class="line">        dos.writeBoolean(sex);</span><br><span class="line">        dos.writeChar(c);</span><br><span class="line">        dos.flush();</span><br><span class="line">        dos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.DataInputStream;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">&#x2F;&#x2F;DataInputStreamTest：数据字节输入流</span><br><span class="line">&#x2F;&#x2F;DataOutputStreamTest写的文件，只能DataInputStreamTest去读</span><br><span class="line">&#x2F;&#x2F;并且读的时候，你需要提前知道写入的顺序，读的顺序需要和写的顺序一致，才可以正常取出数据</span><br><span class="line">public class DataInputStreamTest01 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        DataInputStream dis &#x3D; new DataInputStream(new FileInputStream(&quot;data&quot;));</span><br><span class="line">        &#x2F;&#x2F;开始读</span><br><span class="line">        byte b &#x3D; dis.readByte();</span><br><span class="line">        short s &#x3D; dis.readShort();</span><br><span class="line">        int i &#x3D; dis.readInt();</span><br><span class="line">        long l &#x3D; dis.readLong();</span><br><span class="line">        float f &#x3D; dis.readFloat();</span><br><span class="line">        double d &#x3D; dis.readDouble();</span><br><span class="line">        boolean sex &#x3D; dis.readBoolean();</span><br><span class="line">        char c &#x3D; dis.readChar();</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(i+1000);</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println(sex);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">&#x2F;*</span><br><span class="line">        100</span><br><span class="line">        200</span><br><span class="line">        300</span><br><span class="line">        1300</span><br><span class="line">        400</span><br><span class="line">        3.0</span><br><span class="line">        3.14</span><br><span class="line">        false</span><br><span class="line">        a</span><br><span class="line">*&#x2F;</span><br><span class="line">        dis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.PrintStream;</span><br><span class="line">&#x2F;&#x2F;PrintStream：标准的字节输出流，默认输出到控制台</span><br><span class="line">public class PrintStreamTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        System.out.println(&quot;hello world&quot;);</span><br><span class="line">        &#x2F;&#x2F;可以改变标准输出流的输出方向嘛？可以</span><br><span class="line">        &#x2F;*&#x2F;&#x2F;这些是之前System类使用过的方法和属性</span><br><span class="line">        System.gc();</span><br><span class="line">        System.currentTimeMillis();</span><br><span class="line">        PrintStream ps2 &#x3D; System.out;</span><br><span class="line">        System.exit(0);</span><br><span class="line">        System.arraycopy(...)*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;标准输出流不再指向控制台，指向“log”文件</span><br><span class="line">        PrintStream log &#x3D; new PrintStream(new FileOutputStream(&quot;log&quot;));</span><br><span class="line">        &#x2F;&#x2F;修改输出方向，将输出方向修改到“log”文件</span><br><span class="line">        System.setOut(log);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h3><p>Logger类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.PrintStream;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">public class Logger &#123;</span><br><span class="line">    public static void log(String msg) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            PrintStream pr &#x3D; new PrintStream(new FileOutputStream(&quot;log.txt&quot;,true));</span><br><span class="line">            &#x2F;&#x2F;改变输出方向</span><br><span class="line">            System.setOut(pr);</span><br><span class="line">            &#x2F;&#x2F;日期当前时间</span><br><span class="line">            Date newTime &#x3D; new Date();</span><br><span class="line">            SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss SSS&quot;);</span><br><span class="line">            String str &#x3D; sdf.format(newTime);</span><br><span class="line">            System.out.println(str+&quot;:&quot;+msg);</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LogTest类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">public class LogTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;测试工具是否好用</span><br><span class="line">        Logger.log(&quot;调用了System类的gc()方法，建议启动垃圾回收&quot;);</span><br><span class="line">        Logger.log(&quot;调用了UserService的doSome()方法&quot;);</span><br><span class="line">        Logger.log(&quot;用户尝试进行登录，验证失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果是新建一个log.txt文件，内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-01-15 00:01:12 701:调用了System类的gc()方法，建议启动垃圾回收</span><br><span class="line">2020-01-15 00:01:12 746:调用了UserService的doSome()方法</span><br><span class="line">2020-01-15 00:01:12 746:用户尝试进行登录，验证失败</span><br><span class="line">2020-01-15 00:01:24 655:调用了System类的gc()方法，建议启动垃圾回收</span><br><span class="line">2020-01-15 00:01:24 707:调用了UserService的doSome()方法</span><br><span class="line">2020-01-15 00:01:24 708:用户尝试进行登录，验证失败</span><br></pre></td></tr></table></figure>

<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">public class FileTest01 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        File f1 &#x3D; new File(&quot;G:&#x2F;file&quot;);</span><br><span class="line">        &#x2F;&#x2F;判断是否存在</span><br><span class="line">        System.out.println(f1.exists());</span><br><span class="line">        &#x2F;&#x2F;如果G:&#x2F;file不存在，则以文件的形式创造出来</span><br><span class="line">        &#x2F;*if (!f1.exists())&#123;</span><br><span class="line">            f1.createNewFile();</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;如果G:&#x2F;file不存在，则以目录的形式创造出来</span><br><span class="line">        &#x2F;*if (!f1.exists())&#123;</span><br><span class="line">            f1.mkdir();</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;可以创建多重目录</span><br><span class="line">      &#x2F;*  File f2 &#x3D; new File(&quot;G:&#x2F;a&#x2F;b&#x2F;c&#x2F;d&quot;);</span><br><span class="line">        if (!f2.exists())&#123;</span><br><span class="line">            f2.mkdirs();</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line">        File f3 &#x3D; new File(&quot;G:\\JavaTest\\javaTest\\src\\com\\java\\ioTest\\FileTest01.java&quot;);</span><br><span class="line">        &#x2F;&#x2F;获取文件的父路径</span><br><span class="line">        String parentPath &#x3D; f3.getParent();</span><br><span class="line">        System.out.println(parentPath);&#x2F;&#x2F;G:\JavaTest\javaTest\src\com\java\ioTest</span><br><span class="line">        File parentFile &#x3D; f3.getParentFile();</span><br><span class="line">        System.out.println(&quot;获取绝对路径&quot;+parentFile.getAbsolutePath());&#x2F;&#x2F;获取绝对路径G:\JavaTest\javaTest\src\com\java\ioTest</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取当前目录下的所有子文件"><a href="#获取当前目录下的所有子文件" class="headerlink" title="获取当前目录下的所有子文件"></a>获取当前目录下的所有子文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.File;</span><br><span class="line">public class FileTest03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File f &#x3D; new File(&quot;C:\\Users\\lyl93\\Desktop\\blog\\source\\_posts&quot;);</span><br><span class="line">        &#x2F;&#x2F;获取当前目录下的所有子文件</span><br><span class="line">        File[] files &#x3D; f.listFiles();</span><br><span class="line">        for (File file : files) &#123;</span><br><span class="line">            System.out.println(file.getAbsolutePath());</span><br><span class="line">            System.out.println(file.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拷贝目录"><a href="#拷贝目录" class="headerlink" title="拷贝目录"></a>拷贝目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class CopyAll &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;拷贝源</span><br><span class="line">        File srcFile &#x3D; new File(&quot;G:\\ideaTest\\compare\\src&quot;);</span><br><span class="line">        &#x2F;&#x2F;拷贝目标</span><br><span class="line">        File destFile &#x3D; new File(&quot;F:&#x2F;src&quot;);</span><br><span class="line">        &#x2F;&#x2F;调用方法拷贝</span><br><span class="line">        copyDir(srcFile,destFile);</span><br><span class="line">    &#125;</span><br><span class="line">    private static void copyDir(File srcFile, File destFile) &#123;</span><br><span class="line">        if (srcFile.isFile())&#123;</span><br><span class="line">            FileInputStream in &#x3D; null;</span><br><span class="line">            FileOutputStream out &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                in &#x3D; new FileInputStream(srcFile);</span><br><span class="line">                String path &#x3D; (destFile.getAbsolutePath().endsWith(&quot;\\&quot;) ? destFile.getAbsolutePath() : destFile.getAbsolutePath() + &quot;\\&quot;) + destFile.getAbsolutePath().substring(3);</span><br><span class="line">                out &#x3D; new FileOutputStream(path);</span><br><span class="line">                byte[] bytes &#x3D; new byte[1024 * 1024];</span><br><span class="line">                int read &#x3D; 0;</span><br><span class="line">                while ((read &#x3D; in.read(bytes)) !&#x3D; -1)&#123;</span><br><span class="line">                    out.write(bytes,0,read);</span><br><span class="line">                &#125;</span><br><span class="line">                out.flush();</span><br><span class="line">            &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                if (out !&#x3D; null) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (in !&#x3D; null) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;srcFile如果是一个文件的话，递归结束</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取源下面的的子目录</span><br><span class="line">        File[] files &#x3D; srcFile.listFiles();</span><br><span class="line">        for (File file : files)&#123;</span><br><span class="line">            if (file.isDirectory())&#123;</span><br><span class="line">                &#x2F;&#x2F;System.out.println(f.getAbsolutePath());</span><br><span class="line">                String srcDir &#x3D; file.getAbsolutePath();</span><br><span class="line">                String destDir &#x3D; (destFile.getAbsolutePath().endsWith(&quot;\\&quot;) ? destFile.getAbsolutePath() : destFile.getAbsolutePath() + &quot;\\&quot;) + srcDir.substring(3);</span><br><span class="line">                File newFile &#x3D; new File(destDir);</span><br><span class="line">                if (!newFile.exists()) &#123;</span><br><span class="line">                    newFile.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;System.out.println(f.getAbsolutePath());</span><br><span class="line">            &#x2F;&#x2F;递归调用</span><br><span class="line">            copyDir(file,destFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><h4 id="Student"><a href="#Student" class="headerlink" title="Student"></a>Student</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.bean;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">&#x2F;&#x2F;参与序列化和反序列化的对象，必须实现Serializable接口：只是一个标志性接口</span><br><span class="line">&#x2F;&#x2F;起到标识作用，标志的作用，java虚拟机看到这个类实现了这个接口，可能回对这个类进行特殊待遇</span><br><span class="line">public class Student implements Serializable &#123;</span><br><span class="line">    &#x2F;&#x2F;java虚拟机看到这个接口后，会为该类自动生成个序列化版本号</span><br><span class="line">    private int no;</span><br><span class="line">    private String name;</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(int no , String name)&#123;</span><br><span class="line">        this.no &#x3D; no;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;no&#x3D;&#39;&quot; + no + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getNo() &#123;</span><br><span class="line">        return no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNo(int no) &#123;</span><br><span class="line">        this.no &#x3D; no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.bean;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">public class ObjectOutputStreamTest01 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        Student s &#x3D; new Student(111,&quot;张三&quot;);</span><br><span class="line">        &#x2F;&#x2F;序列化</span><br><span class="line">        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;student&quot;));</span><br><span class="line">        &#x2F;&#x2F;序列化对象</span><br><span class="line">        oos.writeObject(s);</span><br><span class="line">        &#x2F;&#x2F;刷新</span><br><span class="line">        oos.flush();</span><br><span class="line">        &#x2F;&#x2F;关闭</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.bean;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">&#x2F;&#x2F;反序列化</span><br><span class="line">public class ObjectInputStreamTest01 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(&quot;student&quot;));</span><br><span class="line">        Object o &#x3D; ois.readObject();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h4><p>关键字：不参与序列化对象</p>
<h4 id="手动写版本号"><a href="#手动写版本号" class="headerlink" title="手动写版本号"></a>手动写版本号</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static final long serialVersionUID &#x3D; 1L;&#x2F;&#x2F;java虚拟机识别一个类的时候，先通过类名，如果类名一致，再通过序列化版本号</span><br></pre></td></tr></table></figure>

<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>写法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.thread;</span><br><span class="line">public class ThreadTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyTread myTread &#x3D; new MyTread();</span><br><span class="line">        &#x2F;&#x2F;启动线程</span><br><span class="line">        myTread.start();</span><br><span class="line">        &#x2F;&#x2F;myTread.run();&#x2F;&#x2F;不会启用线程，不会分配新的分支栈（这种方法就是单线程）</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            System.out.println(&quot;主线程——&gt;&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyTread extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            System.out.println(&quot;分支线程——&gt;&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写法二：（实现接口比较常用，因为一个类实现了接口，还能继承其他类，更灵活）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.thread;</span><br><span class="line">public class ThreadTest02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Thread t &#x3D; new Thread(new MyRunnable());</span><br><span class="line">        t.start();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">            System.out.println(&quot;主线程——&gt;&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyRunnable implements Runnable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">            System.out.println(&quot;分支线程——&gt;&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><ul>
<li>新建状态</li>
<li>就绪状态</li>
<li>运行状态</li>
<li>阻塞状态</li>
<li>死亡状态</li>
</ul>
<h3 id="查看主分程线程和当前线程"><a href="#查看主分程线程和当前线程" class="headerlink" title="查看主分程线程和当前线程"></a>查看主分程线程和当前线程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.thread;</span><br><span class="line">public class ThreadTest03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;当前线程,出现在main方法里，所以当前线程就是主线程</span><br><span class="line">        Thread currentThread &#x3D; Thread.currentThread();</span><br><span class="line">        System.out.println(currentThread.getName());&#x2F;&#x2F;main</span><br><span class="line">        MyThread2 t &#x3D; new MyThread2();</span><br><span class="line">        &#x2F;&#x2F;设置线程名字</span><br><span class="line">        &#x2F;&#x2F;t.setName(&quot;ttt&quot;);</span><br><span class="line">        String name1 &#x3D; t.getName();</span><br><span class="line">        System.out.println(name1);&#x2F;&#x2F;默认：Thread-0</span><br><span class="line">        MyThread2 t2 &#x3D; new MyThread2();</span><br><span class="line">        System.out.println(t2.getName());&#x2F;&#x2F;默认：Thread-1</span><br><span class="line">        t.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyThread2 extends Thread &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        &#x2F;&#x2F;谁start，就是谁当前的线程</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">            Thread thread &#x3D; Thread.currentThread();</span><br><span class="line">            System.out.println(thread.getName() + &quot;——&gt;&quot; + i);</span><br><span class="line">            &#x2F;&#x2F;System.out.println(&quot;分支线程——&gt;&quot; + i);</span><br><span class="line">            &#x2F;&#x2F;也可以输出当前线程，具有局限性</span><br><span class="line">            &#x2F;&#x2F;System.out.println(super.getName());</span><br><span class="line">            &#x2F;&#x2F;System.out.println(this.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.thread;</span><br><span class="line">&#x2F;&#x2F;怎么叫醒一个正在睡眠的线程</span><br><span class="line">&#x2F;&#x2F;注意：这个不是终断线程的执行，是终止线程的睡眠</span><br><span class="line">public class ThreadTest05 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Thread t &#x3D; new Thread(new MyRunnable2());</span><br><span class="line">        t.setName(&quot;t&quot;);</span><br><span class="line">        t.start();</span><br><span class="line">        &#x2F;&#x2F;希望5秒之后，t线程醒来</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000 * 5);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            &#x2F;&#x2F;打印异常</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;终断t线程睡眠（这种终断睡眠的方式依靠了java的异常处理机制）</span><br><span class="line">        t.interrupt();&#x2F;&#x2F;干扰</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyRunnable2 implements Runnable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + &quot;--&gt;begin&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000 * 60 * 60 *24 * 365);&#x2F;&#x2F;此处不能抛异常是因为：子类重写不能抛出更多的异常</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + &quot;--&gt;end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合理的终止线程"><a href="#合理的终止线程" class="headerlink" title="合理的终止线程"></a>合理的终止线程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.thread;</span><br><span class="line">public class ThreadTest06 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyRunnable3 r &#x3D; new MyRunnable3();</span><br><span class="line">        Thread t &#x3D; new Thread(r);</span><br><span class="line">        t.setName(&quot;t&quot;);</span><br><span class="line">        t.start();</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000 * 5);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;5秒之后强行终止t线程</span><br><span class="line">        r.run &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyRunnable3 implements Runnable&#123;</span><br><span class="line">    boolean run &#x3D; true;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            if (run)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; + i);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> package com.java.thread;</span><br><span class="line">public class ThreadTest07 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;设置主线程的优先级为1</span><br><span class="line">        Thread.currentThread().setPriority(1);</span><br><span class="line">        &#x2F;*System.out.println(&quot;最高优先级：&quot; + Thread.MAX_PRIORITY);&#x2F;&#x2F;最高优先级：10</span><br><span class="line">        System.out.println(&quot;最低优先级：&quot; + Thread.MIN_PRIORITY);&#x2F;&#x2F;最低优先级：1</span><br><span class="line">        System.out.println(&quot;默认优先级：&quot; + Thread.NORM_PRIORITY);&#x2F;&#x2F;默认优先级：5*&#x2F;</span><br><span class="line">        Thread c &#x3D; Thread.currentThread();</span><br><span class="line">        &#x2F;&#x2F;System.out.println(c.getName() + &quot;线程的默认优先级&quot; + c.getPriority());&#x2F;&#x2F;main线程的默认优先级5</span><br><span class="line">        Thread t &#x3D; new Thread(new MyRunnable4());</span><br><span class="line">        t.setPriority(10);</span><br><span class="line">        t.setName(&quot;t&quot;);</span><br><span class="line">        t.start();</span><br><span class="line">        &#x2F;&#x2F;优先级高的，抢占CPU时间片相对多一点</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyRunnable4 implements Runnable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        &#x2F;&#x2F;获取线程优先级</span><br><span class="line">        &#x2F;&#x2F;System.out.println(Thread.currentThread().getName() +&quot;线程的默认优先级&quot; + Thread.currentThread().getPriority());&#x2F;&#x2F;t线程的默认优先级5</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="让位和合并"><a href="#让位和合并" class="headerlink" title="让位和合并"></a>让位和合并</h3><p>yield：在某一次输出让位给另一个线程</p>
<p>join：当前线程进入阻塞，另一线程执行结束，当前线程才可继续执行</p>
<h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><ul>
<li>三个条件：<ul>
<li>多线程并发</li>
<li>有共享数据</li>
<li>共享数据有修改行为</li>
</ul>
</li>
</ul>
<p>满足三个条件，就会存在线程安全问题</p>
<h4 id="synchronize"><a href="#synchronize" class="headerlink" title="synchronize"></a>synchronize</h4><p>Account类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.threadsafe;</span><br><span class="line">public class Account &#123;</span><br><span class="line">    private String actno;</span><br><span class="line">    private double balance;</span><br><span class="line">    public Account()&#123;&#125;</span><br><span class="line">    public Account(String actno,double balance)&#123;</span><br><span class="line">        this.actno &#x3D; actno;</span><br><span class="line">        this.balance &#x3D; balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getActno() &#123;</span><br><span class="line">        return actno;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setActno(String actno) &#123;</span><br><span class="line">        this.actno &#x3D; actno;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getBalance() &#123;</span><br><span class="line">        return balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBalance(double balance) &#123;</span><br><span class="line">        this.balance &#x3D; balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public void withdraw(double money)&#123;</span><br><span class="line">        double before &#x3D; this.getBalance();</span><br><span class="line">        double after &#x3D; before - money;</span><br><span class="line">        &#x2F;&#x2F;synchronized (this)</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        this.setBalance(after);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AccountThread类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.threadsafe;</span><br><span class="line"></span><br><span class="line">public class AccountThread extends Thread&#123;</span><br><span class="line">    private Account act;</span><br><span class="line">    public AccountThread(Account act)&#123;</span><br><span class="line">        this.act &#x3D; act;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        double money &#x3D; 5000;</span><br><span class="line">        synchronized (act) &#123;</span><br><span class="line">            act.withdraw(money);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + &quot;对&quot; + act.getActno() + &quot;取款成功，余额&quot; + act.getBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.threadsafe;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Account act &#x3D; new Account(&quot;act-001&quot;,10000);</span><br><span class="line">        Thread t1 &#x3D;new AccountThread(act);</span><br><span class="line">        Thread t2 &#x3D;new AccountThread(act);</span><br><span class="line">        t1.setName(&quot;t1&quot;);</span><br><span class="line">        t2.setName(&quot;t2&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Exam"><a href="#Exam" class="headerlink" title="Exam"></a>Exam</h4><ul>
<li>exam01:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.threadsafe;</span><br><span class="line">public class exam01 &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Myclass mc &#x3D; new Myclass();</span><br><span class="line">        Thread t1 &#x3D; new MyThread(mc);</span><br><span class="line">        Thread t2 &#x3D; new MyThread(mc);</span><br><span class="line">        t1.setName(&quot;t1&quot;);</span><br><span class="line">        t2.setName(&quot;t2&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyThread extends Thread&#123;</span><br><span class="line">    private Myclass mc;</span><br><span class="line">    public MyThread(Myclass mc)&#123;this.mc &#x3D; mc;&#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        if (Thread.currentThread().getName().equals(&quot;t1&quot;))&#123;</span><br><span class="line">            mc.doSome();</span><br><span class="line">        &#125;if (Thread.currentThread().getName().equals(&quot;t2&quot;))&#123;</span><br><span class="line">            mc.doOther();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Myclass&#123;</span><br><span class="line">    public synchronized void doSome()&#123;</span><br><span class="line">        System.out.println(&quot;main begin!!!&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000*10);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;main over!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void doOther()&#123;</span><br><span class="line">        System.out.println(&quot;main begin!&quot;);</span><br><span class="line">        System.out.println(&quot;main over!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>t2不需要等t1结束执行，因为doOther没有synchronize</p>
<ul>
<li>exam02:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.threadsafe;</span><br><span class="line">public class exam01 &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Myclass mc1 &#x3D; new Myclass();</span><br><span class="line">        &#x2F;&#x2F;Myclass mc2 &#x3D; new Myclass();</span><br><span class="line">        Thread t1 &#x3D; new MyThread(mc1);</span><br><span class="line">        Thread t2 &#x3D; new MyThread(mc1);</span><br><span class="line">        t1.setName(&quot;t1&quot;);</span><br><span class="line">        t2.setName(&quot;t2&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyThread extends Thread&#123;</span><br><span class="line">    private Myclass mc;</span><br><span class="line">    public MyThread(Myclass mc)&#123;this.mc &#x3D; mc;&#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        if (Thread.currentThread().getName().equals(&quot;t1&quot;))&#123;</span><br><span class="line">            mc.doSome();</span><br><span class="line">        &#125;if (Thread.currentThread().getName().equals(&quot;t2&quot;))&#123;</span><br><span class="line">            mc.doOther();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Myclass&#123;</span><br><span class="line">    public synchronized void doSome()&#123;</span><br><span class="line">        System.out.println(&quot;main begin!!!&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000*10);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;main over!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void doOther()&#123;</span><br><span class="line">        System.out.println(&quot;main begin!&quot;);</span><br><span class="line">        System.out.println(&quot;main over!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>t2需要等t1执行结束再执行</p>
<ul>
<li>exam03:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.threadsafe;</span><br><span class="line">public class exam01 &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Myclass mc1 &#x3D; new Myclass();</span><br><span class="line">        Myclass mc2 &#x3D; new Myclass();</span><br><span class="line">        Thread t1 &#x3D; new MyThread(mc1);</span><br><span class="line">        Thread t2 &#x3D; new MyThread(mc2);</span><br><span class="line">        t1.setName(&quot;t1&quot;);</span><br><span class="line">        t2.setName(&quot;t2&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyThread extends Thread&#123;</span><br><span class="line">    private Myclass mc;</span><br><span class="line">    public MyThread(Myclass mc)&#123;this.mc &#x3D; mc;&#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        if (Thread.currentThread().getName().equals(&quot;t1&quot;))&#123;</span><br><span class="line">            mc.doSome();</span><br><span class="line">        &#125;if (Thread.currentThread().getName().equals(&quot;t2&quot;))&#123;</span><br><span class="line">            mc.doOther();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Myclass&#123;</span><br><span class="line">    public synchronized void doSome()&#123;</span><br><span class="line">        System.out.println(&quot;main begin!!!&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000*10);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;main over!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void doOther()&#123;</span><br><span class="line">        System.out.println(&quot;main begin!&quot;);</span><br><span class="line">        System.out.println(&quot;main over!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>t2不需要等t1结束执行，因为MyClass对象是两个，两把锁</p>
<ul>
<li>exam04:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.threadsafe;</span><br><span class="line">public class exam01 &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Myclass mc1 &#x3D; new Myclass();</span><br><span class="line">        Myclass mc2 &#x3D; new Myclass();</span><br><span class="line">        Thread t1 &#x3D; new MyThread(mc1);</span><br><span class="line">        Thread t2 &#x3D; new MyThread(mc2);</span><br><span class="line">        t1.setName(&quot;t1&quot;);</span><br><span class="line">        t2.setName(&quot;t2&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyThread extends Thread&#123;</span><br><span class="line">    private Myclass mc;</span><br><span class="line">    public MyThread(Myclass mc)&#123;this.mc &#x3D; mc;&#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        if (Thread.currentThread().getName().equals(&quot;t1&quot;))&#123;</span><br><span class="line">            mc.doSome();</span><br><span class="line">        &#125;if (Thread.currentThread().getName().equals(&quot;t2&quot;))&#123;</span><br><span class="line">            mc.doOther();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Myclass&#123;</span><br><span class="line">    &#x2F;&#x2F;找类锁</span><br><span class="line">    public synchronized static void doSome()&#123;</span><br><span class="line">        System.out.println(&quot;main begin!!!&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000*10);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;main over!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized static void doOther()&#123;</span><br><span class="line">        System.out.println(&quot;main begin!&quot;);</span><br><span class="line">        System.out.println(&quot;main over!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>t2需要等t1执行结束再执行，因为静态方法是类锁，不管创建了几个对象，类锁只有一把</p>
<h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.ioTest.threadsafe;</span><br><span class="line">public class deadlock &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Object o1 &#x3D; new Object();</span><br><span class="line">        Object o2 &#x3D; new Object();</span><br><span class="line">        &#x2F;&#x2F;t1和t2共享o1和o2</span><br><span class="line">        Thread t1 &#x3D; new MyThread1(o1,o2);</span><br><span class="line">        Thread t2 &#x3D; new MyThread2(o1,o2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyThread1 extends Thread&#123;</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line">    public MyThread1(Object o1,Object o2)&#123;</span><br><span class="line">        this.o1 &#x3D; o1;</span><br><span class="line">        this.o2 &#x3D; o2;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        synchronized (o1)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            synchronized (o2)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyThread2 extends Thread&#123;</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line">    public MyThread2(Object o1,Object o2)&#123;</span><br><span class="line">        this.o1 &#x3D; o1;</span><br><span class="line">        this.o2 &#x3D; o2;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        synchronized (o2)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            synchronized (o1)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.thread;</span><br><span class="line">public class ThreadTest08 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Thread t &#x3D;new BakDataThread();</span><br><span class="line">        t.setName(&quot;备份数据的线程&quot;);</span><br><span class="line">        &#x2F;&#x2F;启动线程之前，将线程设置为守护线程</span><br><span class="line">        t.setDaemon(true);</span><br><span class="line">        t.start();</span><br><span class="line">        &#x2F;&#x2F;主线程：主线程是用户线程</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; + (++i));</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class BakDataThread extends Thread&#123;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; + (++i));</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.thread;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Timer;</span><br><span class="line">import java.util.TimerTask;</span><br><span class="line">public class TimerTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        Timer time &#x3D; new Timer();</span><br><span class="line">        &#x2F;&#x2F;Timer time &#x3D; new Timer(true);&#x2F;&#x2F;守护线程的方式</span><br><span class="line">        SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        Date first &#x3D; sdf.parse(&quot;2020-11-18 00:39:00&quot;);</span><br><span class="line">        time.schedule(new LogTimerTask(),first,1000*10);</span><br><span class="line">        &#x2F;&#x2F;也可以使用匿名内部类</span><br><span class="line">        &#x2F;*time.schedule(new LogTimerTask()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">                String str &#x3D; sdf.format(new Date());</span><br><span class="line">                System.out.println(str + &quot;:成功完成了一次数据备份！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,first,1000*10);*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;编写一个定时任务类</span><br><span class="line">class LogTimerTask extends TimerTask&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        String str &#x3D; sdf.format(new Date());</span><br><span class="line">        System.out.println(str + &quot;:成功完成了一次数据备份！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取线程结果"><a href="#获取线程结果" class="headerlink" title="获取线程结果"></a>获取线程结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.thread;</span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.FutureTask;</span><br><span class="line">public class ThreadTest09 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        FutureTask f &#x3D; new FutureTask(new Callable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object call() throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;call method begin!&quot;);</span><br><span class="line">                Thread.sleep(1000*10);</span><br><span class="line">                System.out.println(&quot;call method over!&quot;);</span><br><span class="line">                int a &#x3D;100;</span><br><span class="line">                int b &#x3D; 200;</span><br><span class="line">                return a + b;&#x2F;&#x2F;自动装箱（300结果变成Integer）</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t &#x3D;new Thread(f);</span><br><span class="line">        t.start();</span><br><span class="line">        &#x2F;&#x2F;获取t线程返回结果</span><br><span class="line">        Object o  &#x3D; f.get();</span><br><span class="line">        &#x2F;&#x2F;main方法这里的程序想要执行必须等待get()方法的结束</span><br><span class="line">        System.out.println(&quot;Hello World!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="线程交互"><a href="#线程交互" class="headerlink" title="线程交互"></a>线程交互</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.thread;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">public class ThreadTest10 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建一个仓库对象，共享的</span><br><span class="line">        List l &#x3D; new ArrayList();</span><br><span class="line">        &#x2F;&#x2F;创建两个线程对象</span><br><span class="line">        &#x2F;&#x2F;生产线程</span><br><span class="line">        Thread t1 &#x3D; new Thread(new Producer(l));</span><br><span class="line">        &#x2F;&#x2F;消费线程</span><br><span class="line">        Thread t2 &#x3D; new Thread(new Consumer(l));</span><br><span class="line">        t1.setName(&quot;生产者线程&quot;);</span><br><span class="line">        t2.setName(&quot;消费者线程&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;生产线程</span><br><span class="line">class Producer implements Runnable&#123;</span><br><span class="line">    &#x2F;&#x2F;仓库</span><br><span class="line">    private List list;</span><br><span class="line">    public Producer(List list)&#123;</span><br><span class="line">        this.list &#x3D; list;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        &#x2F;&#x2F;一直生产，死循环</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            synchronized (list) &#123;</span><br><span class="line">                if (list.size() &gt; 0)&#123;&#x2F;&#x2F;大于0，说明仓库已经有一个元素，当前线程进入等待状态，并且释放list集合的锁</span><br><span class="line">                    try &#123;</span><br><span class="line">                        list.wait();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;程序到这，说明仓库空的，可以生产</span><br><span class="line">                Object o &#x3D; new Object();</span><br><span class="line">                list.add(o);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; + o);</span><br><span class="line">                &#x2F;&#x2F;唤醒消费者消费</span><br><span class="line">                list.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;消费线程</span><br><span class="line">class Consumer implements Runnable&#123;</span><br><span class="line">    &#x2F;&#x2F;仓库</span><br><span class="line">    private List list;</span><br><span class="line">    public Consumer(List list)&#123;</span><br><span class="line">        this.list &#x3D; list;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            synchronized (list)&#123;</span><br><span class="line">                if (list.size() &#x3D;&#x3D; 0)&#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        list.wait();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;程序到这，说明仓库有数据，进行消费</span><br><span class="line">                Object o &#x3D; list.remove(0);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; + o);</span><br><span class="line">                &#x2F;&#x2F;唤醒生产者生产</span><br><span class="line">                list.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><ul>
<li><p>java.lang.class：代表整个字节码，代表一个类型，代表整个类</p>
</li>
<li><p>java.lang.refle.Method：代表字节码中的方法字节码，代表类中的方法</p>
</li>
<li><p>java.lang.reflec.Constructor：代表字节码中的构造方法字节码，代表类中的构造方法</p>
</li>
<li><p>java.lang.refle.Filed：代表字节码中的属性字节码，代表类中的成员变量（静态变量+实例变量）</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.class:</span><br><span class="line">	public class User&#123;</span><br><span class="line">		&#x2F;&#x2F;Filed</span><br><span class="line">		int no;</span><br><span class="line">		&#x2F;&#x2F;Constructor</span><br><span class="line">		public User()&#123;&#125;</span><br><span class="line">		public User(int no)&#123;</span><br><span class="line">			this.no &#x3D; no;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;Method</span><br><span class="line">		public void setNo(int no)&#123;</span><br><span class="line">			this.no &#x3D; no;</span><br><span class="line">		&#125;</span><br><span class="line">		public int getNo()&#123;</span><br><span class="line">			return no;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三种Class-forName方法"><a href="#三种Class-forName方法" class="headerlink" title="三种Class.forName方法"></a>三种Class.forName方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">import java.util.Date;</span><br><span class="line">public class ReflectTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;*Class.forName：</span><br><span class="line">            1.静态方法</span><br><span class="line">            2.方法的参数是一个字符串</span><br><span class="line">            3.字符串需要的是一个完整的类名</span><br><span class="line">            4.完整的类名必须带有包名。java.lang包也不能省略*&#x2F;</span><br><span class="line">        Class c1 &#x3D; null;</span><br><span class="line">        Class c2 &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            c1 &#x3D; Class.forName(&quot;java.lang.String&quot;);&#x2F;&#x2F;c1代表String.class文件，或者说c1代表String类型</span><br><span class="line">            c2 &#x3D; Class.forName(&quot;java.util.Date&quot;);&#x2F;&#x2F;c2代表Date类型</span><br><span class="line">            Class c3 &#x3D; Class.forName(&quot;java.lang.Integer&quot;);&#x2F;&#x2F;c3代表Integer类型</span><br><span class="line">            Class c4 &#x3D; Class.forName(&quot;java.lang.System&quot;);&#x2F;&#x2F;c4代表System类型</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;java中任何一个对象都有一个方法：getClass()</span><br><span class="line">        String s &#x3D; &quot;abc&quot;;</span><br><span class="line">        Class x &#x3D; s.getClass();&#x2F;&#x2F;x代表String.class字节码文件，x代表String类型</span><br><span class="line">        System.out.println(c1 &#x3D;&#x3D; x);&#x2F;&#x2F;true</span><br><span class="line">        Date time &#x3D; new Date();</span><br><span class="line">        Class y &#x3D; time.getClass();</span><br><span class="line">        System.out.println(c2 &#x3D;&#x3D; y);&#x2F;&#x2F;true</span><br><span class="line">        &#x2F;&#x2F;java语言中任何一个类型，包括基本数据类型，都有.class属性</span><br><span class="line">        Class z &#x3D; String.class;</span><br><span class="line">        Class k &#x3D; Date.class;</span><br><span class="line">        Class f &#x3D; int.class;</span><br><span class="line">        Class e &#x3D; double.class;</span><br><span class="line">        System.out.println(x &#x3D;&#x3D; z);&#x2F;&#x2F;true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="只执行静态代码"><a href="#只执行静态代码" class="headerlink" title="只执行静态代码"></a>只执行静态代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">public class ReflectTest02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;这个方法执行导致类加载，类加载时，静态代码块执行（其他的代码一律不执行）</span><br><span class="line">            Class.forName(&quot;com.java.reflect.MyClass&quot;);&#x2F;&#x2F;com.java.reflect.MyClass</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyClass&#123;</span><br><span class="line">    static &#123;&#x2F;&#x2F;静态代码块在类加载时执行，并且只执行一次</span><br><span class="line">        System.out.println(&quot;MyClass类的静态代码执行了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类加载对象"><a href="#类加载对象" class="headerlink" title="类加载对象"></a>类加载对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">public class AboutPath &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;Thread.currentThread()当前线程对象</span><br><span class="line">        &#x2F;&#x2F;getContextClassLoader()是线程对象的方法，可以获取到当前线程的类加载对象</span><br><span class="line">        &#x2F;&#x2F;getResource()这是类加载对象的方法，当前线程的类加载器默认从类的根路径下加载资源</span><br><span class="line">        String path &#x3D; Thread.currentThread().getContextClassLoader().getResource(&quot;classinfo.properties&quot;).getPath();</span><br><span class="line">        System.out.println(path);&#x2F;&#x2F;文件的绝对路径：&#x2F;G:&#x2F;JavaTest&#x2F;out&#x2F;production&#x2F;javaTest&#x2F;classinfo.properties</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过key获得value"><a href="#通过key获得value" class="headerlink" title="通过key获得value"></a>通过key获得value</h3><p>src包下建文档：classinfo.properties：className=com.java.reflect.AboutPath</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">public class IoPropertiesTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F;获取一个文件的绝对路径！！！</span><br><span class="line">        &#x2F;*String path &#x3D; Thread.currentThread().getContextClassLoader().getResource(&quot;classinfo.properties&quot;).getPath();</span><br><span class="line">        FileReader reader &#x3D; new FileReader(path);*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;直接以流的形式返回</span><br><span class="line">        InputStream reader &#x3D; Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;classinfo.properties&quot;);</span><br><span class="line">        Properties pro &#x3D; new Properties();</span><br><span class="line">        pro.load(reader);</span><br><span class="line">        reader.close();</span><br><span class="line">        &#x2F;&#x2F;通过key获得value</span><br><span class="line">        String className &#x3D; pro.getProperty(&quot;className&quot;);</span><br><span class="line">        System.out.println(className);&#x2F;&#x2F;com.java.reflect.AboutPath</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="资源绑定器"><a href="#资源绑定器" class="headerlink" title="资源绑定器"></a>资源绑定器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">import java.util.ResourceBundle;</span><br><span class="line">public class ResourceBundleTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;资源绑定器，只能绑定xxx.properties文件，并且这个文件必须在类路径下。文件扩展名也必须是properties</span><br><span class="line">        &#x2F;&#x2F;并且在写路径的时候，路径后面的扩展名不能写</span><br><span class="line">        ResourceBundle bundle &#x3D; ResourceBundle.getBundle(&quot;classinfo&quot;);</span><br><span class="line">        String className &#x3D; bundle.getString(&quot;className&quot;);</span><br><span class="line">        System.out.println(className);&#x2F;&#x2F;com.java.reflect.AboutPath</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取Field"><a href="#获取Field" class="headerlink" title="获取Field"></a>获取Field</h3><p>Student类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.Student;</span><br><span class="line">&#x2F;&#x2F;反射属性Field</span><br><span class="line">public class Student &#123;</span><br><span class="line">    &#x2F;&#x2F;Field翻译为字段，其实就是属性&#x2F;成员</span><br><span class="line">    public int no;</span><br><span class="line">    private String name;</span><br><span class="line">    protected int age;</span><br><span class="line">    boolean sex;</span><br><span class="line">    public static final double PI &#x3D; 3.1415926;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ReflectTest类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Modifier;</span><br><span class="line">public class ReflectTest03 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        Class student &#x3D; Class.forName(&quot;com.java.Student.Student&quot;);</span><br><span class="line">        String className &#x3D; student.getName();</span><br><span class="line">        System.out.println(&quot;完整类名：&quot; + className);&#x2F;&#x2F;完整类名：com.java.Student.Student</span><br><span class="line">        String simpleName &#x3D; student.getSimpleName();</span><br><span class="line">        System.out.println(&quot;简类名：&quot; + simpleName);&#x2F;&#x2F;简类名：Student</span><br><span class="line">        Field[] fields &#x3D; student.getFields();</span><br><span class="line">        System.out.println(fields.length);&#x2F;&#x2F;测试数组只有一个元素</span><br><span class="line">        Field f &#x3D; fields[0];</span><br><span class="line">        String fName &#x3D; f.getName();</span><br><span class="line">        System.out.println(fName);&#x2F;&#x2F;no</span><br><span class="line">        &#x2F;&#x2F;获取所有Field</span><br><span class="line">        Field[] fs &#x3D; student.getDeclaredFields();</span><br><span class="line">        System.out.println(fs.length);</span><br><span class="line">        for (Field field : fs) &#123;</span><br><span class="line">            &#x2F;&#x2F;获取属性的修饰符列表</span><br><span class="line">            int i &#x3D; field.getModifiers();</span><br><span class="line">            System.out.println(i);&#x2F;&#x2F;5 1 2 4 0 25 返回的修饰符是一个数字，每个数字是修饰符的代号</span><br><span class="line">            &#x2F;&#x2F;可以讲“数字”再转为字符串</span><br><span class="line">            String s &#x3D; Modifier.toString(i);</span><br><span class="line">            System.out.println(s);&#x2F;&#x2F;public private protected public  static final</span><br><span class="line">            &#x2F;&#x2F;获取属性的类型</span><br><span class="line">            Class type &#x3D; field.getType();</span><br><span class="line">            String fileName &#x3D; type.getName();</span><br><span class="line">            System.out.println(fileName);&#x2F;&#x2F;int java.lang.String int boolean double</span><br><span class="line">            String fiName &#x3D; type.getSimpleName();</span><br><span class="line">            System.out.println(fiName);&#x2F;&#x2F;int String int boolean double</span><br><span class="line">            &#x2F;&#x2F;获取属性的名字</span><br><span class="line">            System.out.println(field.getName());&#x2F;&#x2F;no name age sex PI</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Modifier;</span><br><span class="line">&#x2F;&#x2F;通过反射机制，反编译一个类的属性Field</span><br><span class="line">public class ReflectTest04 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        StringBuilder s &#x3D; new StringBuilder();</span><br><span class="line">        Class student &#x3D; Class.forName(&quot;com.java.Student.Student&quot;);</span><br><span class="line">        s.append(Modifier.toString(student.getModifiers()) + &quot; class &quot; + student.getSimpleName() + &quot;&#123;\n&quot;);</span><br><span class="line">        Field[] fields &#x3D; student.getDeclaredFields();</span><br><span class="line">        for (Field field : fields)&#123;</span><br><span class="line">            s.append(&quot;\t&quot;);</span><br><span class="line">            s.append(Modifier.toString(field.getModifiers()));</span><br><span class="line">            s.append(&quot; &quot;);</span><br><span class="line">            s.append(field.getType().getSimpleName());</span><br><span class="line">            s.append(&quot; &quot;);</span><br><span class="line">            s.append(field.getName());</span><br><span class="line">            s.append(&quot;;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        s.append(&quot;&#125;&quot;);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="访问对象参数"><a href="#访问对象参数" class="headerlink" title="访问对象参数"></a>访问对象参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">import com.java.Student.Student;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">public class ReflectTest05 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F;不使用反射机制</span><br><span class="line">        Student s &#x3D; new Student();</span><br><span class="line">        s.no &#x3D; 111;</span><br><span class="line">        System.out.println(s.no);&#x2F;&#x2F;111</span><br><span class="line">        &#x2F;&#x2F;使用反射机制访问对象属性</span><br><span class="line">        Class student &#x3D; Class.forName(&quot;com.java.Student.Student&quot;);</span><br><span class="line">        Object o &#x3D; student.newInstance();</span><br><span class="line">        Field nof &#x3D; student.getDeclaredField(&quot;no&quot;);</span><br><span class="line">        nof.set(o,222);</span><br><span class="line">        System.out.println(nof.get(o));&#x2F;&#x2F;222</span><br><span class="line">        Field namef &#x3D; student.getDeclaredField(&quot;name&quot;);</span><br><span class="line">        &#x2F;&#x2F;因为是private，所以得打破封装(反射机制缺点，打破封装，可能会给不法分子留下机会！)</span><br><span class="line">        namef.setAccessible(true);</span><br><span class="line">        namef.set(o,&quot;jack&quot;);</span><br><span class="line">        System.out.println(namef.get(o));&#x2F;&#x2F;jack</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变长度参数"><a href="#可变长度参数" class="headerlink" title="可变长度参数"></a>可变长度参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main (String[] args)&#123;</span><br><span class="line">	m();</span><br><span class="line">	m(10);</span><br><span class="line">	m(10,20);&#x2F;&#x2F;个数是0~N个</span><br><span class="line">&#125;</span><br><span class="line">public static void m(int... args)&#123;&#x2F;&#x2F;可变长度参数在参数列表必须是最后一个位置，而且只能有一个</span><br><span class="line">	System.out.println(&quot;m方法执行了！&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反射Constructor"><a href="#反射Constructor" class="headerlink" title="反射Constructor"></a>反射Constructor</h3><p>VIP类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.bean;</span><br><span class="line">public class VIP &#123;</span><br><span class="line">    int no;</span><br><span class="line">    String name;</span><br><span class="line">    String birth;</span><br><span class="line">    boolean sex;</span><br><span class="line">    public VIP()&#123;&#125;</span><br><span class="line">    public VIP(int no) &#123;</span><br><span class="line">        this.no &#x3D; no;</span><br><span class="line">    &#125;</span><br><span class="line">    public VIP(int no, String name) &#123;</span><br><span class="line">        this.no &#x3D; no;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">    public VIP(int no, String name, String birth) &#123;</span><br><span class="line">        this.no &#x3D; no;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.birth &#x3D; birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public VIP(int no, String name, String birth, boolean sex) &#123;</span><br><span class="line">        this.no &#x3D; no;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.birth &#x3D; birth;</span><br><span class="line">        this.sex &#x3D; sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ReflectTest类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Modifier;</span><br><span class="line">public class ReflectTest06 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        StringBuilder str &#x3D; new StringBuilder();</span><br><span class="line">        Class vip &#x3D; Class.forName(&quot;com.java.bean.VIP&quot;);</span><br><span class="line">        str.append(Modifier.toString(vip.getModifiers()));</span><br><span class="line">        str.append(&quot; class &quot;);</span><br><span class="line">        str.append(vip.getSimpleName());</span><br><span class="line">        str.append(&quot;&#123;\n&quot;);</span><br><span class="line">        &#x2F;&#x2F;拼接构造方法</span><br><span class="line">        Constructor[] c &#x3D; vip.getDeclaredConstructors();</span><br><span class="line">        for (Constructor con : c)&#123;</span><br><span class="line">            str.append(&quot;\t&quot;);</span><br><span class="line">            str.append(Modifier.toString(con.getModifiers()));</span><br><span class="line">            str.append(&quot; &quot;);</span><br><span class="line">            str.append(vip.getSimpleName());</span><br><span class="line">            str.append(&quot;(&quot;);</span><br><span class="line">            &#x2F;&#x2F;拼接参数</span><br><span class="line">            Class[] parameterTypes &#x3D; con.getParameterTypes();</span><br><span class="line">            for (Class p : parameterTypes)&#123;</span><br><span class="line">                str.append(p.getSimpleName());</span><br><span class="line">                str.append(&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (parameterTypes.length &gt; 0)&#123;</span><br><span class="line">                &#x2F;&#x2F;删除最后下标上的字符</span><br><span class="line">                str.deleteCharAt(str.length() - 1);</span><br><span class="line">            &#125;</span><br><span class="line">            str.append(&quot;)&#123;&#125;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        str.append(&quot;&#125;&quot;);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反射机制调用构造方法"><a href="#反射机制调用构造方法" class="headerlink" title="反射机制调用构造方法"></a>反射机制调用构造方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">import com.java.bean.VIP;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">public class ReflectTest07 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F;不适用反射机制</span><br><span class="line">        VIP v1 &#x3D; new VIP();</span><br><span class="line">        VIP v2 &#x3D; new VIP(11,&quot;zhangsan&quot;,&quot;2020-20-12&quot;,true);</span><br><span class="line">        &#x2F;&#x2F;使用反射机制创建对象</span><br><span class="line">        Class vip &#x3D; Class.forName(&quot;com.java.bean.VIP&quot;);</span><br><span class="line">        &#x2F;&#x2F;调用无参数构造方法</span><br><span class="line">        Object o &#x3D; vip.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        &#x2F;&#x2F;调用有参数的构造犯法</span><br><span class="line">        Constructor con &#x3D; vip.getDeclaredConstructor(int.class, String.class, String.class, boolean.class);</span><br><span class="line">        Object obj &#x3D; con.newInstance(11, &quot;zhangsan&quot;, &quot;2020-20-12&quot;, true);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取父类和父接口"><a href="#获取父类和父接口" class="headerlink" title="获取父类和父接口"></a>获取父类和父接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.reflect;</span><br><span class="line">public class ReflectTest08 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        Class stringClass &#x3D;Class.forName(&quot;java.lang.String&quot;);</span><br><span class="line">        Class superclass &#x3D; stringClass.getSuperclass();</span><br><span class="line">        System.out.println(superclass.getName());</span><br><span class="line">        Class[] interfaces &#x3D; stringClass.getInterfaces();</span><br><span class="line">        for (Class c : interfaces)&#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="注解调用"><a href="#注解调用" class="headerlink" title="注解调用"></a>注解调用</h3><p>MyAnnotation注解类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.MyAnnotation;</span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface MyAnnotation &#123;</span><br><span class="line">    String username();</span><br><span class="line">    String password();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyAnnotation类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.java.MyAnnotation;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">public class MyAnnotationTest &#123;</span><br><span class="line">    @MyAnnotation(username &#x3D; &quot;admin&quot;,password &#x3D; &quot;123&quot;)</span><br><span class="line">    public void doSome()&#123;&#125;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        Class c &#x3D; Class.forName(&quot;com.java.MyAnnotation.MyAnnotationTest&quot;);</span><br><span class="line">        Method doSome &#x3D; c.getDeclaredMethod(&quot;doSome&quot;);</span><br><span class="line">        if (doSome.isAnnotationPresent(MyAnnotation.class))&#123;</span><br><span class="line">            MyAnnotation m &#x3D; doSome.getAnnotation(MyAnnotation.class);</span><br><span class="line">            System.out.println(m.username());&#x2F;&#x2F;admin</span><br><span class="line">            System.out.println(m.password());&#x2F;&#x2F;123</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
